<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>心梦</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-05-16T04:01:20.216Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>心梦</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UnityShader</title>
    <link href="http://example.com/2023/05/06/UnityShader/"/>
    <id>http://example.com/2023/05/06/UnityShader/</id>
    <published>2023-05-06T07:53:49.000Z</published>
    <updated>2023-05-16T04:01:20.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>[TOC]</p><span id="more"></span><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="基本类型表达式"><a href="#基本类型表达式" class="headerlink" title="基本类型表达式"></a>基本类型表达式</h2><p><img src="/../images/image-20230508123426929.png" alt="image-20230508123426929"></p><h2 id="结构体和语义"><a href="#结构体和语义" class="headerlink" title="结构体和语义"></a>结构体和语义</h2><p><img src="/../images/image-20230508123733246.png" alt="image-20230508123733246"></p><h2 id="unity支持的shader语义"><a href="#unity支持的shader语义" class="headerlink" title="unity支持的shader语义"></a>unity支持的shader语义</h2><p>在 Unity 中，支持的 Shader 语义如下：</p><p>POSITION：表示顶点位置。</p><p>NORMAL：表示顶点法线。</p><p>COLOR：表示顶点颜色。</p><p>TEXCOORD0：表示主纹理坐标。</p><p>TEXCOORD1：表示第二个纹理坐标。</p><p>TEXCOORD2：表示第三个纹理坐标。</p><p>TEXCOORD3：表示第四个纹理坐标。</p><p>TANGENT：表示切线。</p><p>BINORMAL：表示副切线。</p><p>VIEW_DIRECTION：表示视图方向。</p><p>SCREEN_POSITION：表示屏幕上的位置。</p><p>SV_POSITION：表示像素在屏幕上的位置。</p><p>DEPTH：表示深度值。</p><p>TARGET：表示渲染目标。</p><p>SV_TARGET：表示像素着色器输出的颜色渲染目标。</p><p>COLOR0, COLOR1, COLOR2, COLOR3：表示颜色缓冲区。</p><p>DEPTH_STENCIL：表示深度&#x2F;模板缓冲区。</p><p>SV_Depth：表示像素深度值。</p><h2 id="标准内置函数"><a href="#标准内置函数" class="headerlink" title="标准内置函数"></a>标准内置函数</h2><p><img src="/../images/image-20230508124239459.png" alt="image-20230508124239459"></p><h2 id="float4-fixed4-Time"><a href="#float4-fixed4-Time" class="headerlink" title="float4 fixed4 _Time"></a>float4 fixed4 _Time</h2><p><img src="/../images/image-20230508134159808.png" alt="image-20230508134159808"></p><h2 id="UnityObjectToClipPos"><a href="#UnityObjectToClipPos" class="headerlink" title="UnityObjectToClipPos"></a>UnityObjectToClipPos</h2><p><code>UnityObjectToClipPos</code> 是Unity中的内置函数，用于将顶点位置从对象空间转换到剪裁空间。它接受一个<code>float4</code>类型的向量，表示顶点的位置，返回一个<code>float4</code>类型的向量，表示变换后的剪裁空间中的位置。</p><p>在Shader中，我们通常使用<code>UnityObjectToClipPos</code>将顶点位置从对象空间转换到剪裁空间。这是因为在剪裁空间中，所有的几何体都是以相对于摄像机的位置来表示的，这使得在屏幕上进行投影和裁剪变得更加容易。此外，在剪裁空间中，所有的几何体都是以标准化设备坐标（NDC）表示的，这使得深度测试、深度剔除和颜色插值等操作都更加方便。</p><p><code>UnityObjectToClipPos</code>函数通常被用在顶点着色器中，用于将顶点的位置从对象空间转换到剪裁空间，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arduinoCopy codefloat4 <span class="title function_">vert</span> <span class="params">(appdata v)</span> : SV_POSITION</span><br><span class="line">&#123;</span><br><span class="line">    float4 clipPos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">    <span class="keyword">return</span> clipPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个顶点着色器接受一个结构体类型的输入<code>appdata</code>，表示传入的顶点数据，输出一个<code>float4</code>类型的向量，表示变换后的剪裁空间中的顶点位置。在这个顶点着色器中，我们使用<code>UnityObjectToClipPos</code>将顶点的位置从对象空间转换到剪裁空间，并返回变换后的剪裁空间中的顶点位置。</p><h2 id="SV-POSITION"><a href="#SV-POSITION" class="headerlink" title="SV_POSITION"></a>SV_POSITION</h2><p><code>SV_POSITION</code>是在HLSL中使用的一种内置的语义（semantic），用于表示当前变量是一个顶点着色器的输出，它表示输出的是一个顶点的位置。</p><p>在Unity的Shader中，当使用<code>CGPROGRAM</code>和<code>ENDCG</code>包含着色器代码时，可以使用<code>SV_POSITION</code>语义来指定顶点着色器输出的变量类型为顶点位置。这个语义通常用于将顶点位置从对象空间（Object Space）转换到剪裁空间（Clip Space），或者进行屏幕空间的计算。</p><p>例如，下面是一个使用<code>SV_POSITION</code>语义的顶点着色器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arduinoCopy code<span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">appdata</span> &#123;</span></span><br><span class="line">    float4 vertex : POSITION;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line">    float4 pos : SV_POSITION;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">v2f <span class="title function_">vert</span><span class="params">(appdata v)</span> &#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个着色器中，<code>SV_POSITION</code>语义被用来指定输出变量<code>pos</code>的类型为顶点位置。顶点着色器将传入的<code>POSITION</code>数据转换到剪裁空间，并将结果存储在输出变量<code>pos</code>中，这个变量将会被传递到后续的像素着色器进行处理。</p><h2 id="Diffuse"><a href="#Diffuse" class="headerlink" title="Diffuse"></a>Diffuse</h2><p><code>Diffuse</code>是一种渲染模型，用于在计算每个像素的颜色时考虑物体表面的漫反射属性。在这个模型中，每个像素的颜色由以下公式计算得出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Color = BaseColor * LightColor * (DiffuseFactor * NdotL)</span><br></pre></td></tr></table></figure><p>其中，<code>BaseColor</code>表示物体的基础颜色，<code>LightColor</code>表示光源的颜色，<code>DiffuseFactor</code>表示物体表面的漫反射系数，<code>NdotL</code>表示法线向量和光照方向的点积。</p><p>在Unity中的Standard Shader和Legacy Shader中，都使用了<code>Diffuse</code>渲染模型。在Standard Shader中，它被作为一种可选的光照模型，可以在Inspector面板中的Material属性中进行设置；在Legacy Shader中，则是默认的渲染模型。</p><h2 id="SV-Target"><a href="#SV-Target" class="headerlink" title="SV_Target"></a>SV_Target</h2><p><code>SV_Target</code> 是 DirectX&#x2F;HLSL 中的一个语义，用于指定像素着色器输出颜色的目标渲染目标（color buffer），也就是要将像素着色器计算出来的颜色写入到哪个渲染目标中。<code>SV_Target</code> 的值是一个系统值语义，代表像素着色器输出颜色的目标缓冲区编号。</p><h2 id="Properties属性"><a href="#Properties属性" class="headerlink" title="Properties属性"></a>Properties属性</h2><p>在 Unity 的 Shader 中，<code>Properties</code> 是用于定义材质属性（Material Properties）的一种语法。材质属性是指在 Unity 中定义的可以修改材质外观的属性，例如纹理、颜色、数值等等。通过在 Shader 中定义 Properties，可以将材质属性传递给 Shader，以便在 Shader 中使用这些属性来修改材质的外观。</p><p>下面是一个简单的例子，展示了如何在 Shader 中定义一个纹理属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mathematicaCopy codeProperties &#123;</span><br><span class="line">    _MainTex (<span class="string">&quot;Texture&quot;</span>, <span class="number">2</span>D) = <span class="string">&quot;white&quot;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>_MainTex</code> 是一个纹理属性的名称，<code>(&quot;Texture&quot;, 2D)</code> 表示这是一个二维纹理，并且默认使用一个白色纹理，最后的大括号表示这个属性没有特殊的限制或标签。</p><p>除了纹理属性，还可以定义其他类型的材质属性，例如颜色、浮点数、向量等等。通过定义 Properties，可以使 Shader 具有更好的可配置性和灵活性。</p><h2 id="TRANSFORM-TEX"><a href="#TRANSFORM-TEX" class="headerlink" title="TRANSFORM_TEX"></a>TRANSFORM_TEX</h2><p>TRANSFORM_TEX 是 Unity 中的一个宏定义，用于在自定义着色器中对纹理坐标进行变换。在使用这个宏定义之前，需要在自定义着色器的 SubShader 中添加以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br></pre></td></tr></table></figure><p>这个指令引入了 UnityCG.cginc 文件，该文件中包含了一些和着色器编程相关的函数和宏定义，包括 TRANSFORM_TEX。</p><p>TRANSFORM_TEX 宏定义用于将纹理坐标从对象空间或投影空间转换为纹理空间。例如，下面的代码将从一个名为 “_MainTex” 的纹理中采样一个颜色，并将纹理坐标从对象空间转换到纹理空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fixed4 <span class="title">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span></span><br><span class="line">   fixed4 col = <span class="built_in">tex2D</span>(_MainTex, <span class="built_in">TRANSFORM_TEX</span>(i.uv, _MainTex));</span><br><span class="line">   <span class="keyword">return</span> col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，i.uv 是输入结构体中传递进来的纹理坐标，_MainTex 是一个名为 “_MainTex” 的纹理，TRANSFORM_TEX(i.uv, _MainTex) 将 i.uv 从对象空间转换到 _MainTex 纹理的纹理空间。</p><p>需要注意的是，TRANSFORM_TEX 宏定义只对从对象空间或投影空间采样纹理的情况有效。对于直接从纹理坐标中采样纹理的情况，不需要使用 TRANSFORM_TEX。</p><h2 id="tex2D"><a href="#tex2D" class="headerlink" title="tex2D"></a>tex2D</h2><p><code>tex2D</code> 是 Unity 中用于从纹理中获取颜色值的函数。它的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fixed4 tex2D(sampler2D sampler, float2 uv);</span><br></pre></td></tr></table></figure><p>其中 <code>sampler</code> 是一个 2D 纹理采样器，<code>uv</code> 是纹理坐标，返回值是一个 <code>fixed4</code> 类型的颜色值。</p><p><code>tex2D</code> 可以用于顶点着色器和像素着色器中，用于从纹理中获取对应位置的颜色值进行计算。例如，下面的代码从 <code>_MainTex</code> 纹理中获取 <code>i.uv</code> 坐标处的颜色，并将其作为像素着色器的输出颜色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag(v2f i) : SV_Target &#123;</span><br><span class="line">    fixed4 col = tex2D(_MainTex, i.uv);</span><br><span class="line">    return col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果纹理的格式不支持 alpha 通道，则 <code>fixed4</code> 类型的返回值中的 alpha 值将被忽略。如果需要获取 3 通道（RGB）的颜色值，则可以使用 <code>tex2D.rgb</code> 来获取。</p><h1 id="模型空间、世界空间、观察空间和裁剪空间"><a href="#模型空间、世界空间、观察空间和裁剪空间" class="headerlink" title="模型空间、世界空间、观察空间和裁剪空间"></a>模型空间、世界空间、观察空间和裁剪空间</h1><p>模型空间、世界空间、观察空间和裁剪空间是计算机图形学中常见的坐标空间，它们用于描述三维物体的位置和方向，并且在渲染管线中扮演重要角色。</p><ul><li>模型空间（Model Space）：是指物体的本地坐标系，即在物体自身坐标系下描述的坐标。在模型空间中，物体的原点一般位于其几何中心。</li><li>世界空间（World Space）：是指在全局坐标系下描述的坐标系，所有物体都共享同一个世界坐标系。在世界空间中，物体的位置是相对于全局原点的。</li><li>观察空间（View Space&#x2F;Camera Space）：是指相机拍摄时的坐标系，相机位于坐标系原点，观察方向为z轴负方向，x轴和y轴分别表示相机视野中的水平和垂直方向。</li><li>裁剪空间（Clip Space）：是指相机空间中的坐标经过投影变换（投影矩阵）后得到的坐标系。在裁剪空间中，所有坐标都在范围[-1,1]之间。这个坐标系是为了方便进行透视变换，把物体从三维空间投影到二维屏幕上。</li></ul><p>在渲染管线中，顶点着色器把模型空间中的顶点转换为裁剪空间中的顶点，然后光栅化阶段把裁剪空间中的几何图元转换为屏幕空间中的像素，最终显示在屏幕上。在这个过程中，我们需要对坐标进行多次变换和计算，以便在不同的坐标空间中进行正确的渲染和投影。</p><h1 id="01"><a href="#01" class="headerlink" title="01"></a>01</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Shader <span class="string">&quot;Unlit/01&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(<span class="string">&quot;Texture&quot;</span>, <span class="number">2</span>D) = <span class="string">&quot;red&quot;</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">        SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            </span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            float4 <span class="built_in">vert</span>(float4 v : POSITION) : SV_POSITION &#123;</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">UnityObjectToClipPos</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function">fixed4 <span class="title">frag</span> <span class="params">()</span> : SV_Target&#123;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">fixed4</span>(<span class="number">1.0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;Diffuse&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>- </p><h1 id="02"><a href="#02" class="headerlink" title="02"></a>02</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Unlit/02&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//_MainTex(&quot;Texture&quot;, 2D) = &quot;red&quot; &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Tags &#123; &quot;RenderType&quot; = &quot;Opaque&quot; &#125;</span></span><br><span class="line">       <span class="comment">// LOD 100</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="comment">//指定顶点着色器</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="comment">//指定片元着色器</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">a2v</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">                <span class="comment">// 模型的第一套纹理</span></span><br><span class="line">                float4 texcoord:TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            <span class="function">float4 <span class="title">vert</span><span class="params">(a2v v )</span> : SV_POSITION &#123;</span></span><br><span class="line">            <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">UnityObjectToClipPos</span>(v.vertex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">fixed4 <span class="title">frag</span><span class="params">()</span> : SV_Target&#123;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">fixed4</span>(<span class="number">1.0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        FallBack <span class="string">&quot;Diffuse&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="帧调试器"><a href="#帧调试器" class="headerlink" title="帧调试器"></a>帧调试器</h1><p><img src="/../images/image-20230506181906689.png" alt="image-20230506181906689"></p><h1 id="Shader-Target-编译的目标平台"><a href="#Shader-Target-编译的目标平台" class="headerlink" title="Shader Target 编译的目标平台"></a>Shader Target 编译的目标平台</h1><p>Shader Target（Shader目标）是指编写 Shader 时要编译的目标平台，即目标 GPU 和渲染 API。在 Unity 中，Shader Target 由以下两个部分组成：</p><ol><li>GPU 类型：表示目标平台的 GPU 类型，例如 DirectX 11、OpenGL ES 3.0、Metal、PlayStation 4 等。</li><li>渲染 API：表示目标平台的渲染 API，例如 DirectX 11、OpenGL ES 3.0、Metal、Vulkan 等。</li></ol><p>Shader Target 会影响 Shader 代码的编写方式和可用的特性和功能。例如，不同的 GPU 类型可能有不同的指令集和限制，需要使用不同的指令和优化技巧来实现最佳性能。而不同的渲染 API 可能具有不同的特性和限制，例如 DirectX 11 支持 Compute Shader，而 OpenGL ES 3.0 不支持。</p><p>在 Unity 中，可以使用 <code>#pragma target</code> 指令来指定 Shader Target，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arduinoCopy code</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> target 3.0</span></span><br></pre></td></tr></table></figure><p>这个指令表示编写的 Shader 目标平台是 OpenGL ES 3.0。Unity 支持的 Shader Target 取决于 Unity 版本和目标平台，具体支持的 Shader Target 可以在 Unity 的官方文档中查看。</p><h1 id="BRDF模型"><a href="#BRDF模型" class="headerlink" title="BRDF模型"></a>BRDF模型</h1><p>BRDF（Bidirectional Reflectance Distribution Function，双向反射分布函数）是计算光在物体表面反射的分布规律的函数模型，用于描述光线从一个给定的方向射入物体表面后，以不同方向反射的能量分布情况。</p><p>BRDF 可以看作是将入射光线和出射光线之间的关系表示为一个函数，用于计算每个出射方向上的反射率。在计算机图形学中，BRDF 通常用于模拟材质表面的光照效果，以生成逼真的图像。BRDF 模型通常包括两个部分：</p><ol><li>几何遮挡（Geometry Occlusion）：表示入射光线和出射光线之间的物理障碍物。该部分通常由微平面模型来描述，例如 Beckmann 分布、GGX 分布等。</li><li>光的分布规律（Light Distribution）：表示从入射方向射入的光线在各个出射方向上的能量分布情况。该部分通常由 Cook-Torrance 模型、Lambert 模型等来描述。</li></ol><p>BRDF 模型是计算机图形学中非常重要的概念，可以用于实现各种复杂的光照效果，例如金属、塑料、皮肤等材质的表现。在 Unity 中，可以使用内置的 Standard Shader 来实现基于 PBR（Physically Based Rendering，基于物理的渲染）的材质渲染，该 Shader 使用了 Cook-Torrance BRDF 模型来计算光照效果。</p><h1 id="反射光照"><a href="#反射光照" class="headerlink" title="反射光照"></a>反射光照</h1><h2 id="逐顶点漫反射光照"><a href="#逐顶点漫反射光照" class="headerlink" title="逐顶点漫反射光照"></a>逐顶点漫反射光照</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Unlit/01&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="comment">//#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line">            <span class="comment">//引用了Lighting.cginc文件，这个文件中包含了一些和光照计算相关的函数和变量。</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            <span class="comment">//定义了一个名为_Diffuse的uniform变量，用于存储物体表面的颜色。</span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">a2v</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">                <span class="comment">// 模型的第一套纹理</span></span><br><span class="line">                float4 texcoord:TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">v2f</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                <span class="comment">// 存储颜色信息</span></span><br><span class="line">                fixed3 color : COLOR0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function">v2f <span class="title">vert</span><span class="params">(a2v v)</span> </span>&#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = <span class="built_in">UnityObjectToClipPos</span>(v.vertex);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//UNITY_LIGHTMODEL_AMBIENT.xyz;: 获取环境光照颜色。</span></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                <span class="comment">//将顶点法线从模型空间转换到世界空间，并归一化。</span></span><br><span class="line">                fixed3 worldNormal = <span class="built_in">normalize</span>(<span class="built_in">mul</span>(v.normal, (float3x3)unity_WorldToObject));</span><br><span class="line">                <span class="comment">//获取光源在世界空间中的位置，并归一化。</span></span><br><span class="line">                fixed3 worldLight = <span class="built_in">normalize</span>(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                <span class="comment">//计算漫反射颜色，使用光源的颜色</span></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * <span class="built_in">saturate</span>(<span class="built_in">dot</span>(worldNormal, worldLight));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                o.color = ambient + diffuse;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function">fixed4 <span class="title">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span></span><br><span class="line">               fixed3 c = i.color;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">fixed4</span>(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逐像素漫反射光照"><a href="#逐像素漫反射光照" class="headerlink" title="逐像素漫反射光照"></a>逐像素漫反射光照</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Unlit/逐像素漫反射&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="comment">//#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line">            <span class="comment">//引用了Lighting.cginc文件，这个文件中包含了一些和光照计算相关的函数和变量。</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            <span class="comment">//定义了一个名为_Diffuse的uniform变量，用于存储物体表面的颜色。</span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float3 worldNormal:TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment">//将顶点法线从模型空间转换到世界空间，并归一化。</span></span><br><span class="line">                o.worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line">               <span class="comment">//UNITY_LIGHTMODEL_AMBIENT.xyz;: 获取环境光照颜色。</span></span><br><span class="line">               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">               fixed3 worldNormal=normalize(i.worldNormal);</span><br><span class="line">               fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line"></span><br><span class="line">               fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*saturate(dot(worldNormal,worldLightDir));</span><br><span class="line">               fixed3 c = ambient+diffuse;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;DIFFUSE&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="正旋波和UV动画"><a href="#正旋波和UV动画" class="headerlink" title="正旋波和UV动画"></a>正旋波和UV动画</h1><h2 id="sin波纹"><a href="#sin波纹" class="headerlink" title="sin波纹"></a>sin波纹</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">Shader <span class="string">&quot;Unlit/sin波纹&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (<span class="string">&quot;Texture&quot;</span>, <span class="number">2</span>D) = <span class="string">&quot;White&quot;</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span></span></span><br><span class="line"><span class="class">            &#123;</span></span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span> <span class="params">(appdata v)</span></span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//相对距离</span></span><br><span class="line">                <span class="type">float</span> dist=distance(v.vertex.xyz,float3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">                <span class="comment">//正弦波</span></span><br><span class="line">                <span class="type">float</span> h=<span class="built_in">sin</span>(dist+_Time.z);</span><br><span class="line">                <span class="comment">//模型空间变为到世界空间</span></span><br><span class="line">                o.vertex=mul(unity_ObjectToWorld,v.vertex);</span><br><span class="line">                <span class="comment">//改变Y的位置</span></span><br><span class="line">                o.vertex.y=h;</span><br><span class="line">                <span class="comment">//世界空间变为模型空间</span></span><br><span class="line">                o.vertex=mul(unity_WorldToObject,o.vertex);</span><br><span class="line">                <span class="comment">//模型空间变为裁剪空间</span></span><br><span class="line">                o.vertex = UnityObjectToClipPos(o.vertex);</span><br><span class="line">                <span class="comment">//对象空间或投影空间转化为纹理空间</span></span><br><span class="line">                o.uv = TRANSFORM_TEX(v.uv, _MainTex);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 <span class="title function_">frag</span> <span class="params">(v2f i)</span> : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//从纹理中获取颜色值</span></span><br><span class="line">                fixed4 col = tex2D(_MainTex, i.uv);</span><br><span class="line">                <span class="keyword">return</span> col;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="UV动画"><a href="#UV动画" class="headerlink" title="UV动画"></a>UV动画</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Shader <span class="string">&quot;Unlit/sin波纹&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (<span class="string">&quot;Texture&quot;</span>, <span class="number">2</span>D) = <span class="string">&quot;White&quot;</span> &#123;&#125;</span><br><span class="line">        _SubTex (<span class="string">&quot;SubTexture&quot;</span>, <span class="number">2</span>D) = <span class="string">&quot;white&quot;</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> appdata</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">v2f</span></span><br><span class="line">            &#123;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            sampler2D _SubTex;</span><br><span class="line">            float4 _SubTex_ST;</span><br><span class="line"></span><br><span class="line">            <span class="function">v2f <span class="title">vert</span> <span class="params">(appdata v)</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//相对距离</span></span><br><span class="line">                <span class="type">float</span> dist=<span class="built_in">distance</span>(v.vertex.xyz,<span class="built_in">float3</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">                <span class="comment">//正弦波</span></span><br><span class="line">                <span class="type">float</span> h=<span class="built_in">sin</span>(dist+_Time.z);</span><br><span class="line">                <span class="comment">//模型空间变为到世界空间</span></span><br><span class="line">                o.vertex=<span class="built_in">mul</span>(unity_ObjectToWorld,v.vertex);</span><br><span class="line">                <span class="comment">//改变Y的位置</span></span><br><span class="line">                o.vertex.y=h;</span><br><span class="line">                <span class="comment">//世界空间变为模型空间</span></span><br><span class="line">                o.vertex=<span class="built_in">mul</span>(unity_WorldToObject,o.vertex);</span><br><span class="line">                <span class="comment">//模型空间变为裁剪空间</span></span><br><span class="line">                o.vertex = <span class="built_in">UnityObjectToClipPos</span>(o.vertex);</span><br><span class="line">                <span class="comment">//对象空间或投影空间转化为纹理空间</span></span><br><span class="line">                o.uv = <span class="built_in">TRANSFORM_TEX</span>(v.uv, _MainTex);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function">fixed4 <span class="title">frag</span> <span class="params">(v2f i)</span> : SV_Target</span></span><br><span class="line"><span class="function">            &#123;</span></span><br><span class="line">                <span class="comment">//从纹理中获取颜色值</span></span><br><span class="line">                float2 p=<span class="built_in">float2</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">                p.x=_Time.y;</span><br><span class="line">                p.y=_Time.y;</span><br><span class="line">                <span class="comment">//计算动画颜色</span></span><br><span class="line">                fixed4 linght_col = <span class="built_in">tex2D</span>(_SubTex, i.uv+p);</span><br><span class="line">                fixed4 col = <span class="built_in">tex2D</span>(_MainTex, i.uv)+linght_col;</span><br><span class="line">                <span class="keyword">return</span> col;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="表面着色器"><a href="#表面着色器" class="headerlink" title="表面着色器"></a>表面着色器</h1><p><img src="/../images/image-20230509153201669.png" alt="image-20230509153201669"></p><h2 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h2><p><img src="/../images/image-20230509153549241.png" alt="image-20230509153549241"></p><h2 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h2><p><img src="/../images/image-20230509153628051.png" alt="image-20230509153628051"></p><h2 id="Input附加的数据"><a href="#Input附加的数据" class="headerlink" title="Input附加的数据"></a>Input附加的数据</h2><p><img src="/../images/image-20230509153840191.png" alt="image-20230509153840191"></p><h2 id="SurfaceOutput结构体"><a href="#SurfaceOutput结构体" class="headerlink" title="SurfaceOutput结构体"></a>SurfaceOutput结构体</h2><p><img src="/../images/image-20230509154021492.png" alt="image-20230509154021492"></p><h2 id="简单表面着色器代码"><a href="#简单表面着色器代码" class="headerlink" title="简单表面着色器代码"></a>简单表面着色器代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">Shader <span class="string">&quot;Custom/表面着色器&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (<span class="string">&quot;Color&quot;</span>, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _MainTex (<span class="string">&quot;Albedo (RGB)&quot;</span>, <span class="number">2</span>D) = <span class="string">&quot;white&quot;</span> &#123;&#125;</span><br><span class="line">        <span class="comment">//平滑度</span></span><br><span class="line">        _Glossiness (<span class="string">&quot;Smoothness&quot;</span>, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0.5</span></span><br><span class="line">        <span class="comment">//金属</span></span><br><span class="line">        _Metallic (<span class="string">&quot;Metallic&quot;</span>, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123; <span class="string">&quot;RenderType&quot;</span>=<span class="string">&quot;Opaque&quot;</span> &#125;</span><br><span class="line">        LOD <span class="number">200</span></span><br><span class="line"></span><br><span class="line">        CGPROGRAM</span><br><span class="line">        <span class="comment">// Physically based Standard lighting model, and enable shadows on all light types</span></span><br><span class="line">        <span class="comment">//fullforwardshadows 在正向渲染路径中支持所有阴影类型</span></span><br><span class="line">        <span class="meta">#<span class="keyword">pragma</span> surface surf Standard fullforwardshadows</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use shader model 3.0 target, to get nicer looking lighting</span></span><br><span class="line">        <span class="meta">#<span class="keyword">pragma</span> target 3.0</span></span><br><span class="line"></span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Input</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="comment">//表示纹理 uv+纹理名称</span></span><br><span class="line">            float2 uv_MainTex;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        half _Glossiness;</span><br><span class="line">        half _Metallic;</span><br><span class="line">        fixed4 _Color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// #pragma instancing_options assumeuniformscaling</span></span><br><span class="line">        UNITY_INSTANCING_BUFFER_START(Props)</span><br><span class="line">            <span class="comment">// put more per-instance properties here</span></span><br><span class="line">        UNITY_INSTANCING_BUFFER_END(Props)</span><br><span class="line"></span><br><span class="line">        <span class="type">void</span> <span class="title function_">surf</span> <span class="params">(Input IN, inout SurfaceOutputStandard o)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Albedo comes from a texture tinted by color</span></span><br><span class="line">            fixed4 c = tex2D (_MainTex, IN.uv_MainTex) * _Color;</span><br><span class="line">            <span class="comment">//漫反射颜色值</span></span><br><span class="line">            o.Albedo = c.rgb;</span><br><span class="line">            <span class="comment">//金属值</span></span><br><span class="line">            o.Metallic = _Metallic;</span><br><span class="line">            <span class="comment">//平滑值</span></span><br><span class="line">            o.Smoothness = _Glossiness;</span><br><span class="line">            <span class="comment">//透明度</span></span><br><span class="line">            o.Alpha = c.a;</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;Diffuse&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="LOD值"><a href="#LOD值" class="headerlink" title="LOD值"></a>LOD值</h1><p><img src="/../images/image-20230509164630883.png" alt="image-20230509164630883"></p><h1 id="渲染队列"><a href="#渲染队列" class="headerlink" title="渲染队列"></a>渲染队列</h1><p><img src="/../images/image-20230509181116997.png" alt="image-20230509181116997"></p><h1 id="高光"><a href="#高光" class="headerlink" title="高光"></a>高光</h1><h2 id="逐顶点高光"><a href="#逐顶点高光" class="headerlink" title="逐顶点高光"></a>逐顶点高光</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_Object2World&#x27; with &#x27;unity_ObjectToWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Unlit/逐顶点高光&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(<span class="string">&quot;Specular&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(<span class="string">&quot;Gloss&quot;</span>,Range(<span class="number">1.0</span>,<span class="number">256</span>))=<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="comment">//#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line">            <span class="comment">//引用了Lighting.cginc文件，这个文件中包含了一些和光照计算相关的函数和变量。</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            <span class="comment">//定义了一个名为_Diffuse的uniform变量，用于存储物体表面的颜色。</span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">                <span class="comment">// 模型的第一套纹理</span></span><br><span class="line">                float4 texcoord:TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                <span class="comment">// 存储颜色信息</span></span><br><span class="line">                fixed3 color : COLOR0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//UNITY_LIGHTMODEL_AMBIENT.xyz;: 获取环境光照颜色。</span></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将顶点法线从模型空间转换到世界空间，并归一化。</span></span><br><span class="line">                <span class="comment">//fixed3 worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));</span></span><br><span class="line">                fixed3 worldNormal =  normalize(mul(unity_ObjectToWorld,v.normal));</span><br><span class="line">                <span class="comment">//获取光源在世界空间中的位置，并归一化。</span></span><br><span class="line">                fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                <span class="comment">//计算漫反射颜色，使用光源的颜色</span></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (dot(worldNormal, worldLightDir)*<span class="number">0.5</span>+<span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//根据reflect函数获取r值（光线入射方向相对法线的射出方向）</span></span><br><span class="line">                fixed3 reflectDir=normalize(reflect(-worldLightDir,worldNormal));</span><br><span class="line">                <span class="comment">//获取观察方向</span></span><br><span class="line">                fixed3 viewDir=normalize(_WorldSpaceCameraPos.xyz-mul(unity_ObjectToWorld,v.vertex).xyz);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//c*m*(pow(dot(v*r))</span></span><br><span class="line">                fixed3 specular=_LightColor0.rgb*_Specular.rgb*<span class="built_in">pow</span>(saturate(dot(reflectDir,viewDir)),_Gloss);</span><br><span class="line">                o.color = ambient + diffuse+specular;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line">               fixed3 c = i.color;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;DIFFUSE&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逐像素高光"><a href="#逐像素高光" class="headerlink" title="逐像素高光"></a>逐像素高光</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Unlit/逐像素高光&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(<span class="string">&quot;Specular&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(<span class="string">&quot;Gloss&quot;</span>,Range(<span class="number">1.0</span>,<span class="number">256</span>))=<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float3 worldNormal:TEXCOORD0;</span><br><span class="line">                float3 worldPos:TEXCOORD1;</span><br><span class="line">                float3 viewDir:TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment">//将顶点法线从模型空间转换到世界空间，并归一化。</span></span><br><span class="line">                <span class="comment">//o.worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));</span></span><br><span class="line"></span><br><span class="line">                 <span class="comment">//o.worldNormal =  normalize(mul(unity_ObjectToWorld,v.normal));</span></span><br><span class="line">                 o.worldNormal=normalize(UnityObjectToWorldDir(v.normal));</span><br><span class="line">                <span class="comment">//世界空间顶点坐标</span></span><br><span class="line">                o.worldPos = normalize(mul(unity_ObjectToWorld,v.vertex)).xyz;</span><br><span class="line">                o.viewDir=normalize(_WorldSpaceCameraPos.xyz-o.worldPos.xyz);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line">               <span class="comment">//UNITY_LIGHTMODEL_AMBIENT.xyz;: 获取环境光照颜色。</span></span><br><span class="line">               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">               fixed3 worldNormal=normalize(i.worldNormal);</span><br><span class="line">               fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">               <span class="type">float</span> halfLambert = dot(worldNormal,worldLightDir)*<span class="number">0.5</span>+<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*saturate(dot(worldNormal,worldLightDir));</span></span><br><span class="line">               fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*halfLambert;</span><br><span class="line"></span><br><span class="line">               fixed3 reflectDir=normalize(reflect(-worldLightDir,worldNormal));</span><br><span class="line"></span><br><span class="line">               fixed3 specular =_LightColor0.rgb*_Specular.rgb*(<span class="built_in">pow</span>(saturate(dot(reflectDir,i.viewDir)),_Gloss));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               fixed3 c = specular+ambient+diffuse;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;DIFFUSE&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Blinn-Phong高光"><a href="#Blinn-Phong高光" class="headerlink" title="Blinn-Phong高光"></a>Blinn-Phong高光</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Unlit/Blinn-Phong反射&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(<span class="string">&quot;Specular&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(<span class="string">&quot;Gloss&quot;</span>,Range(<span class="number">1.0</span>,<span class="number">256</span>))=<span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float3 worldNormal:TEXCOORD0;</span><br><span class="line">                float3 worldPos:TEXCOORD1;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment">//将顶点法线从模型空间转换到世界空间，并归一化。</span></span><br><span class="line">                <span class="comment">//o.worldNormal = normalize(mul(v.normal, (float3x3)unity_WorldToObject));</span></span><br><span class="line">                 o.worldNormal =  normalize(mul(unity_ObjectToWorld,v.normal));</span><br><span class="line">                <span class="comment">//世界空间顶点坐标</span></span><br><span class="line">                o.worldPos = normalize(mul(unity_ObjectToWorld,v.vertex)).xyz;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line">               <span class="comment">//UNITY_LIGHTMODEL_AMBIENT.xyz;: 获取环境光照颜色。</span></span><br><span class="line">               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">               fixed3 worldNormal=normalize(i.worldNormal);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//fixed3 worldLightDir = normalize(_WorldSpaceLightPos0.xyz);</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//根据世界坐标位置顶点位置，返回从该点到光源的方向向量</span></span><br><span class="line">               fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">               <span class="type">float</span> halfLambert = dot(worldNormal,worldLightDir)*<span class="number">0.5</span>+<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*saturate(dot(worldNormal,worldLightDir));</span></span><br><span class="line">               fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*halfLambert;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//fixed3 reflectDir=normalize(reflect(-worldLightDir,worldNormal));</span></span><br><span class="line">               </span><br><span class="line"></span><br><span class="line">               <span class="comment">//fixed3 viewDir=normalize(_WorldSpaceCameraPos.xyz-i.worldPos.xyz);</span></span><br><span class="line">               </span><br><span class="line">               <span class="comment">//根据世界坐标位置顶点位置，返回从该点到摄像机的方向向量</span></span><br><span class="line">               fixed3 viewDir=normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">               fixed3 halfDir=normalize(worldLightDir+viewDir);</span><br><span class="line"></span><br><span class="line">               fixed3 specular =_LightColor0.rgb*_Specular.rgb*(<span class="built_in">pow</span>(saturate(dot(worldNormal,halfDir)),_Gloss));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               fixed3 c = ambient+diffuse+specular;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;DIFFUSE&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h1><h2 id="单纹理"><a href="#单纹理" class="headerlink" title="单纹理"></a>单纹理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Texture/单纹理&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Tex_Color(<span class="string">&quot;Tex_Color&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(<span class="string">&quot;Specular&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(<span class="string">&quot;Gloss&quot;</span>,Range(<span class="number">1.0</span>,<span class="number">256</span>))=<span class="number">20</span></span><br><span class="line">        _MainTex(<span class="string">&quot;Main_Tex&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            fixed4 _Tex_Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            <span class="comment">//_MainTex的缩放和平移  xy为缩放，zw为平移</span></span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">                float4 texcoord:TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float3 worldNormal:TEXCOORD0;</span><br><span class="line">                float3 worldPos:TEXCOORD1;</span><br><span class="line">                float2 uv:TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                <span class="comment">//将顶点法线从模型空间转换到世界空间，并归一化。</span></span><br><span class="line">                o.worldNormal =normalize(mul(v.normal,(float3x3)unity_WorldToObject));</span><br><span class="line">                <span class="comment">//世界空间顶点坐标</span></span><br><span class="line">                o.worldPos = normalize(mul(unity_ObjectToWorld,v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//o.uv=TRANSFORM_TEX(v.texcoord,_MainTex); 与下方代码相同</span></span><br><span class="line">                o.uv=v.texcoord.xy*_MainTex_ST.xy+_MainTex_ST.zw;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取纹理颜色</span></span><br><span class="line">               fixed3 albedo=tex2D(_MainTex,i.uv).rgb*_Tex_Color.rgb; </span><br><span class="line">               <span class="comment">//将纹理颜色添加到环境光中</span></span><br><span class="line">               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz*   albedo;</span><br><span class="line"></span><br><span class="line">               fixed3 worldNormal=normalize(i.worldNormal);</span><br><span class="line">               <span class="comment">//根据世界坐标位置顶点位置，返回从该点到光源的方向向量</span></span><br><span class="line">               fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">               <span class="type">float</span> halfLambert = dot(worldNormal,worldLightDir)*<span class="number">0.5</span>+<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//将纹理颜色添加到漫反射中</span></span><br><span class="line">               fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*halfLambert   *albedo;</span><br><span class="line">               <span class="comment">//diffuse= _LightColor0.rgb * _Diffuse.rgb*saturate(dot(worldNormal,worldLightDir));</span></span><br><span class="line">               <span class="comment">//根据世界坐标位置顶点位置，返回从该点到摄像机的方向向量</span></span><br><span class="line">               fixed3 viewDir=normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">               fixed3 halfDir=normalize(worldLightDir+viewDir);</span><br><span class="line">               fixed3 specular =_LightColor0.rgb*_Specular.rgb*(<span class="built_in">pow</span>(saturate(dot(worldNormal,halfDir)),_Gloss));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               fixed3 c = ambient+diffuse+specular;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;SPECULAR&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="切线空间法线纹理"><a href="#切线空间法线纹理" class="headerlink" title="切线空间法线纹理"></a>切线空间法线纹理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Texture/切线空间法线纹理&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Tex_Color(<span class="string">&quot;Tex_Color&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        _Gloss(<span class="string">&quot;Gloss&quot;</span>,Range(<span class="number">0</span>,<span class="number">10</span>))=<span class="number">5</span></span><br><span class="line">        _MainTex(<span class="string">&quot;Main_Tex&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        _BumpMap(<span class="string">&quot;BumpMap&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line">        _Specular_Tex(<span class="string">&quot;Specular_Tex&quot;</span>,<span class="number">2</span>d) = <span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line">        _BumpScale(<span class="string">&quot;BumpScale&quot;</span>,Range(<span class="number">-20</span>,<span class="number">20</span>))=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            fixed4 _Tex_Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            <span class="comment">//_MainTex的缩放和平移  xy为缩放，zw为平移</span></span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            sampler2D _Specular_Tex;</span><br><span class="line">            float4 _Specular_Tex_ST;</span><br><span class="line">            <span class="comment">//缩放值</span></span><br><span class="line">            <span class="type">float</span> _BumpScale;</span><br><span class="line"></span><br><span class="line">            sampler2D _BumpMap;</span><br><span class="line">            <span class="comment">//_BumpMap的缩放和平移  xy为缩放，zw为平移</span></span><br><span class="line">            float4 _BumpMap_ST;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">                float4 texcoord:TEXCOORD0;</span><br><span class="line"></span><br><span class="line">                float4 tangent:TANGENT;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float4 uv:TEXCOORD0;</span><br><span class="line">                float3 lightDit:TEXCOORD1;</span><br><span class="line">                float3 viewDir:TEXCOORD2;</span><br><span class="line">                float2 specular_uv:TEXCOORD3;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                <span class="comment">//变换到纹理坐标</span></span><br><span class="line">                o.uv.xy=v.texcoord.xy*_MainTex_ST.xy+_MainTex_ST.zw;</span><br><span class="line">                o.uv.zw=v.texcoord.xy*_BumpMap_ST.xy+_BumpMap_ST.zw;</span><br><span class="line">                o.specular_uv=v.texcoord.xy*_Specular_Tex_ST.xy+_Specular_Tex_ST.zw;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用unity自带的宏计算从模型空间到切线空间的变化矩阵或自己写</span></span><br><span class="line">                TANGENT_SPACE_ROTATION;</span><br><span class="line">                <span class="comment">//副切线</span></span><br><span class="line">                <span class="comment">//float3 binormal=cross(normalize(v.normal),normalize(v.tangent.xyz))*v.tangent.w;</span></span><br><span class="line">                <span class="comment">//模型空间-&gt;切线空间变换</span></span><br><span class="line">                <span class="comment">//float3x3 rotation=float3x3(v.tangent.xyz,binormal,v.normal);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//ObjSpaceLightDir 获取模型空间下顶点指向光源的方向</span></span><br><span class="line">                o.lightDit=mul(rotation,ObjSpaceLightDir(v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//ObjSpaceViewDir 获取模型空间下顶点指向光源的方向</span></span><br><span class="line">                o.viewDir=mul(rotation,ObjSpaceViewDir(v.vertex)).xyz;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//切线观察方向</span></span><br><span class="line">               fixed3 tangentViewDir=normalize(i.viewDir);</span><br><span class="line">               <span class="comment">//切线光源方向</span></span><br><span class="line">               fixed3 tangentLightDir=normalize(i.lightDit);</span><br><span class="line">               <span class="comment">//法线纹理法线颜色</span></span><br><span class="line">               fixed4 packedNormal = tex2D(_BumpMap,i.uv.zw);</span><br><span class="line">               fixed3 tangentNormal;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//tangentNormal.xy=(packedNormal.xy*2-1);</span></span><br><span class="line">               <span class="comment">//颜色值-&gt;法线</span></span><br><span class="line">               tangentNormal=UnpackNormal(packedNormal);</span><br><span class="line"></span><br><span class="line">               tangentNormal.xy*=_BumpScale;</span><br><span class="line">               <span class="comment">//计算z坐标</span></span><br><span class="line">               tangentNormal.z=<span class="built_in">sqrt</span>(<span class="number">1</span>-saturate(dot(tangentNormal.xy,tangentNormal.xy)));</span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取纹理颜色</span></span><br><span class="line">               fixed3 albedo=tex2D(_MainTex,i.uv.xy).rgb*_Tex_Color.rgb; </span><br><span class="line">               <span class="comment">//将纹理颜色添加到环境光中</span></span><br><span class="line">               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz*albedo;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//法线和光源方向的点乘  半兰伯特模型</span></span><br><span class="line">               <span class="type">float</span> halfLambert = dot(tangentNormal,tangentLightDir)*<span class="number">0.5</span>+<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//将纹理颜色添加到漫反射中</span></span><br><span class="line">               fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*halfLambert   *albedo;</span><br><span class="line">               <span class="comment">//diffuse= _LightColor0.rgb * _Diffuse.rgb*saturate(dot(tangentNormal,tangentLightDir));</span></span><br><span class="line">               </span><br><span class="line">               <span class="comment">//高光颜色</span></span><br><span class="line">               fixed3 _Specular= tex2D(_Specular_Tex,i.specular_uv);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//半程向量 光源方向和观察方向</span></span><br><span class="line">               fixed3 halfDir=normalize(tangentLightDir+tangentViewDir);</span><br><span class="line">               fixed3 specular =_LightColor0.rgb*_Specular.rgb*(<span class="built_in">pow</span>(saturate(dot(tangentNormal,halfDir)),_Gloss));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               fixed3 c = ambient+diffuse+specular;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;SPECULAR&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="世界空间法线纹理"><a href="#世界空间法线纹理" class="headerlink" title="世界空间法线纹理"></a>世界空间法线纹理</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;Texture/世界空间法线纹理&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Tex_Color(<span class="string">&quot;Tex_Color&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        _Gloss(<span class="string">&quot;Gloss&quot;</span>,Range(<span class="number">0</span>,<span class="number">10</span>))=<span class="number">5</span></span><br><span class="line">        _MainTex(<span class="string">&quot;Main_Tex&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        _BumpMap(<span class="string">&quot;BumpMap&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line">        _Specular_Tex(<span class="string">&quot;Specular_Tex&quot;</span>,<span class="number">2</span>d) = <span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line">        _BumpScale(<span class="string">&quot;BumpScale&quot;</span>,Range(<span class="number">-20</span>,<span class="number">20</span>))=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            fixed4 _Tex_Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            <span class="comment">//_MainTex的缩放和平移  xy为缩放，zw为平移</span></span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            sampler2D _Specular_Tex;</span><br><span class="line">            float4 _Specular_Tex_ST;</span><br><span class="line">            <span class="comment">//缩放值</span></span><br><span class="line">            <span class="type">float</span> _BumpScale;</span><br><span class="line"></span><br><span class="line">            sampler2D _BumpMap;</span><br><span class="line">            <span class="comment">//_BumpMap的缩放和平移  xy为缩放，zw为平移</span></span><br><span class="line">            float4 _BumpMap_ST;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">                float4 texcoord:TEXCOORD0;</span><br><span class="line"></span><br><span class="line">                float4 tangent:TANGENT;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float4 uv:TEXCOORD0;</span><br><span class="line">                float4 TtoW0:TEXCOORD1;</span><br><span class="line">                float4 TtoW1:TEXCOORD2;</span><br><span class="line">                float4 TtoW2:TEXCOORD3;</span><br><span class="line">                float2 specular_uv:TEXCOORD4;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.uv.xy=v.texcoord.xy*_MainTex_ST.xy+_MainTex_ST.zw;</span><br><span class="line">                o.uv.zw=v.texcoord.xy*_BumpMap_ST.xy+_BumpMap_ST.zw;</span><br><span class="line">                o.specular_uv=v.texcoord.xy*_Specular_Tex_ST.xy+_Specular_Tex_ST.zw;</span><br><span class="line"></span><br><span class="line">                float3 worldPos=mul(unity_ObjectToWorld,v.vertex).xyz;</span><br><span class="line">                fixed3 worldNormal=UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                fixed3 worldTangent=UnityObjectToWorldDir(v.tangent.xyz);</span><br><span class="line">                fixed3 worldBinormal=cross(worldNormal,worldTangent)*v.tangent.w;</span><br><span class="line">                </span><br><span class="line">                o.TtoW0=float4(worldTangent.x,worldBinormal.x,worldNormal.x,worldPos.x);</span><br><span class="line">                o.TtoW1=float4(worldTangent.y,worldBinormal.y,worldNormal.y,worldPos.y);</span><br><span class="line">                o.TtoW2=float4(worldTangent.z,worldBinormal.z,worldNormal.z,worldPos.z);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line"></span><br><span class="line">               float3 worldPos=float3(i.TtoW0.w,i.TtoW1.w,i.TtoW2.w);</span><br><span class="line">               fixed3 worldViewDir=normalize(UnityWorldSpaceViewDir(worldPos));</span><br><span class="line">               fixed3 worldLightDir=normalize(UnityWorldSpaceLightDir(worldPos));</span><br><span class="line">               fixed4 packedNormal = tex2D(_BumpMap,i.uv.zw);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//世界空间下凹凸纹理</span></span><br><span class="line">               fixed3 worldBumpNormal=UnpackNormal(packedNormal);</span><br><span class="line">               worldBumpNormal.xy*=_BumpScale;</span><br><span class="line">               worldBumpNormal.z=<span class="built_in">sqrt</span>(<span class="number">1</span>-saturate(dot(worldBumpNormal.xy,worldBumpNormal.xy)));</span><br><span class="line">               worldBumpNormal=normalize(half3(dot(i.TtoW0.xyz,worldBumpNormal),</span><br><span class="line">                                               dot(i.TtoW1.xyz,worldBumpNormal),</span><br><span class="line">                                               dot(i.TtoW2.xyz,worldBumpNormal)));</span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取纹理颜色</span></span><br><span class="line">               fixed3 albedo=tex2D(_MainTex,i.uv.xy).rgb*_Tex_Color.rgb; </span><br><span class="line">               <span class="comment">//将纹理颜色添加到环境光中</span></span><br><span class="line">               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz*albedo;</span><br><span class="line"></span><br><span class="line">               <span class="type">float</span> halfLambert = dot(worldBumpNormal,worldLightDir)*<span class="number">0.5</span>+<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//将纹理颜色添加到漫反射中</span></span><br><span class="line">               fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*halfLambert   *albedo;</span><br><span class="line">               <span class="comment">//diffuse= _LightColor0.rgb * _Diffuse.rgb*saturate(dot(worldBumpNormal,worldLightDir));</span></span><br><span class="line">               </span><br><span class="line">               fixed3 _Specular= tex2D(_Specular_Tex,i.specular_uv);</span><br><span class="line"></span><br><span class="line">               fixed3 halfDir=normalize(worldLightDir+worldViewDir);</span><br><span class="line">               fixed3 specular =_LightColor0.rgb*_Specular.rgb*(<span class="built_in">pow</span>(saturate(dot(worldBumpNormal,halfDir)),_Gloss));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               fixed3 c = ambient+diffuse+specular;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;SPECULAR&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="渐变纹理"><a href="#渐变纹理" class="headerlink" title="渐变纹理"></a>渐变纹理</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> replaced &#x27;_World2Object&#x27; with &#x27;unity_WorldToObject&#x27;</span></span><br><span class="line"></span><br><span class="line">Shader <span class="string">&quot;渐变纹理/渐变纹理&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Tex_Color(<span class="string">&quot;Tex_Color&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Diffuse(<span class="string">&quot;Diffuse&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(<span class="string">&quot;Specular&quot;</span>,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(<span class="string">&quot;Gloss&quot;</span>,Range(<span class="number">1.0</span>,<span class="number">256</span>))=<span class="number">20</span></span><br><span class="line">        _MainTex(<span class="string">&quot;Main_Tex&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">        _RampTex(<span class="string">&quot;Ramp_Tex&quot;</span>,<span class="number">2</span>D)=<span class="string">&quot;white&quot;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//指定SubShader的LOD等级，这里是最高的100级，表示该SubShader在任何情况下都应该被渲染。</span></span><br><span class="line">        LOD <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//这里指定了LightMode标签为ForwardBase，表示该Pass会参与到正向渲染中，用于处理基础光照。</span></span><br><span class="line">            Tags &#123; <span class="string">&quot;LightMode&quot;</span> = <span class="string">&quot;ForwardBase&quot;</span> &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">            <span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityCG.cginc&quot;</span></span></span><br><span class="line">            <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Lighting.cginc&quot;</span></span></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            fixed4 _Tex_Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            <span class="comment">//_MainTex的缩放和平移  xy为缩放，zw为平移</span></span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            </span><br><span class="line">            sampler2D _RampTex;</span><br><span class="line">            <span class="comment">//_MainTex的缩放和平移  xy为缩放，zw为平移</span></span><br><span class="line">            float4 _RampTex_ST;</span><br><span class="line">            <span class="comment">//定义结构体</span></span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">a2v</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模型空间顶点坐标</span></span><br><span class="line">                float4 vertex:POSITION;</span><br><span class="line">                <span class="comment">// 模型空间法线方向</span></span><br><span class="line">                float3 normal:NORMAL;</span><br><span class="line">                float4 texcoord:TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">v2f</span> &#123;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶点在裁剪空间的位置信息</span></span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float3 worldNormal:TEXCOORD0;</span><br><span class="line">                float3 worldPos:TEXCOORD1;</span><br><span class="line">                float4 uv:TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f <span class="title function_">vert</span><span class="params">(a2v v)</span> &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//顶点的位置从对象空间转换到剪裁空间</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                <span class="comment">//将顶点法线从模型空间转换到世界空间，并归一化。</span></span><br><span class="line">                o.worldNormal =normalize(mul(v.normal,(float3x3)unity_WorldToObject));</span><br><span class="line">                <span class="comment">//世界空间顶点坐标</span></span><br><span class="line">                o.worldPos = normalize(mul(unity_ObjectToWorld,v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//o.uv=TRANSFORM_TEX(v.texcoord,_MainTex); 与下方代码相同</span></span><br><span class="line">                o.uv.xy=v.texcoord.xy*_MainTex_ST.xy+_MainTex_ST.zw;</span><br><span class="line"></span><br><span class="line">                o.uv.zw=v.texcoord.xy*_RampTex_ST.xy+_RampTex_ST.zw;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               fixed3 worldNormal=normalize(i.worldNormal);</span><br><span class="line">               <span class="comment">//根据世界坐标位置顶点位置，返回从该点到光源的方向向量</span></span><br><span class="line">               fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">               <span class="type">float</span> halfLambert = dot(worldNormal,worldLightDir)*<span class="number">0.5</span>+<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//获取纹理颜色+渐变纹理颜色</span></span><br><span class="line">               fixed3 albedo=tex2D(_MainTex,i.uv.xy).rgb*_Tex_Color.rgb+tex2D(_RampTex,fixed2(halfLambert,halfLambert)).rgb; </span><br><span class="line">               <span class="comment">//将纹理颜色添加到环境光中</span></span><br><span class="line">               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz*   albedo;</span><br><span class="line"></span><br><span class="line">               </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="comment">//将纹理颜色添加到漫反射中</span></span><br><span class="line">               fixed3 diffuse= _LightColor0.rgb * _Diffuse.rgb*halfLambert   *albedo;</span><br><span class="line">               <span class="comment">//diffuse= _LightColor0.rgb * _Diffuse.rgb*saturate(dot(worldNormal,worldLightDir));</span></span><br><span class="line">               <span class="comment">//根据世界坐标位置顶点位置，返回从该点到摄像机的方向向量</span></span><br><span class="line">               fixed3 viewDir=normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">               fixed3 halfDir=normalize(worldLightDir+viewDir);</span><br><span class="line">               fixed3 specular =_LightColor0.rgb*_Specular.rgb*(<span class="built_in">pow</span>(saturate(dot(worldNormal,halfDir)),_Gloss));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               fixed3 c = ambient+diffuse+specular;</span><br><span class="line">               <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack <span class="string">&quot;SPECULAR&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h1><p><img src="/../images/image-20230516120119488.png" alt="image-20230516120119488"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="图形学" scheme="http://example.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="图形学" scheme="http://example.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>现代计算机图形学入梦02</title>
    <link href="http://example.com/2023/04/27/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E6%A2%A602/"/>
    <id>http://example.com/2023/04/27/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E6%A2%A602/</id>
    <published>2023-04-27T03:12:06.000Z</published>
    <updated>2023-05-06T08:24:41.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>[TOC]</p><span id="more"></span><h1 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h1><p>Shader（着色器）是一种计算机程序，主要用于在图形渲染管线中对场景中的对象进行光照、材质等方面的渲染。Shader通常用于在GPU上实现高效的图形渲染。</p><p>Shader可以分为顶点着色器（Vertex Shader）、片元着色器（Fragment Shader）和几何着色器（Geometry Shader）等不同类型。顶点着色器用于对每个顶点进行处理，执行顶点变换、法线计算、切线计算等操作；片元着色器用于对每个像素进行处理，计算光照、材质、纹理等操作；几何着色器则用于对图元进行处理，可以对输入的图元进行修改和生成新的图元。</p><p>Shader的编写通常使用OpenGL Shader Language（GLSL）或High Level Shader Language（HLSL）等着色器语言。这些着色器语言提供了一些内置变量和函数，以便程序员能够轻松地访问图形渲染管线中的各个阶段。</p><p>在实际应用中，Shader可以用于实现各种图形效果，如反射、折射、阴影、光照、材质等。因此，Shader是图形渲染中不可或缺的一部分，对于实现高质量的图形渲染效果具有非常重要的作用。</p><p><img src="/../images/image-20230427111951091.png" alt="image-20230427111951091"></p><h1 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h1><p><img src="/../images/image-20230427120830808.png" alt="image-20230427120830808"></p><h1 id="Texture-Mapping-纹理映射"><a href="#Texture-Mapping-纹理映射" class="headerlink" title="Texture Mapping (纹理映射)"></a>Texture Mapping (纹理映射)</h1><p><img src="/../images/image-20230427123029811.png" alt="image-20230427123029811"></p><p><img src="/../images/image-20230427123229627.png" alt="image-20230427123229627"></p><p>纹理坐标系</p><p><img src="/../images/image-20230427123504469.png" alt="image-20230427123504469"></p><p>纹理映射可以重复</p><h1 id="重心坐标"><a href="#重心坐标" class="headerlink" title="重心坐标"></a>重心坐标</h1><p><img src="/../images/image-20230427201944526.png" alt="image-20230427201944526"></p><h1 id="模型空间、世界空间、观察空间和裁剪空间"><a href="#模型空间、世界空间、观察空间和裁剪空间" class="headerlink" title="模型空间、世界空间、观察空间和裁剪空间"></a>模型空间、世界空间、观察空间和裁剪空间</h1><p>模型空间、世界空间、观察空间和裁剪空间是计算机图形学中常见的坐标空间，它们用于描述三维物体的位置和方向，并且在渲染管线中扮演重要角色。</p><ul><li>模型空间（Model Space）：是指物体的本地坐标系，即在物体自身坐标系下描述的坐标。在模型空间中，物体的原点一般位于其几何中心。</li><li>世界空间（World Space）：是指在全局坐标系下描述的坐标系，所有物体都共享同一个世界坐标系。在世界空间中，物体的位置是相对于全局原点的。</li><li>观察空间（View Space&#x2F;Camera Space）：是指相机拍摄时的坐标系，相机位于坐标系原点，观察方向为z轴负方向，x轴和y轴分别表示相机视野中的水平和垂直方向。</li><li>裁剪空间（Clip Space）：是指相机空间中的坐标经过投影变换（投影矩阵）后得到的坐标系。在裁剪空间中，所有坐标都在范围[-1,1]之间。这个坐标系是为了方便进行透视变换，把物体从三维空间投影到二维屏幕上。</li></ul><p>在渲染管线中，顶点着色器把模型空间中的顶点转换为裁剪空间中的顶点，然后光栅化阶段把裁剪空间中的几何图元转换为屏幕空间中的像素，最终显示在屏幕上。在这个过程中，我们需要对坐标进行多次变换和计算，以便在不同的坐标空间中进行正确的渲染和投影。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="图形学" scheme="http://example.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="图形学" scheme="http://example.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>现代计算机图形学入门01</title>
    <link href="http://example.com/2023/04/14/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A801/"/>
    <id>http://example.com/2023/04/14/%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A801/</id>
    <published>2023-04-14T01:46:39.000Z</published>
    <updated>2023-04-27T03:13:23.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>[TOC]</p><span id="more"></span><h1 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h1><p>计算机图形学是研究计算机如何生成、处理和显示图像的学科。它结合了计算机科学、数学和物理学等领域的知识，旨在开发出用于创建和操纵数字图像的算法和技术。计算机图形学被广泛应用于游戏开发、虚拟现实、医学成像、动画制作、建筑设计和工程等领域。主要包括以下几个方面：</p><ol><li>图像处理：利用计算机处理数字图像，如图像增强、分割、压缩等。</li><li>三维建模：利用计算机生成三维模型，如几何建模、曲面建模、体绘制等。</li><li>渲染技术：利用计算机将三维模型转换为二维图像，如光线追踪、阴影处理、纹理映射等。</li><li>动画制作：利用计算机制作动画，如骨骼动画、形状关键帧动画、物理动画等。</li><li>虚拟现实：利用计算机模拟现实环境，如虚拟现实头戴显示器、手柄等。</li><li>计算机视觉：利用计算机从图像中提取有用信息，如目标检测、人脸识别、图像分类等。</li></ol><h1 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h1><p>光栅化是计算机图形学中的一个重要技术，其主要思想是将几何图形转换为像素，并在像素级别上对其进行处理。在具体实现过程中，可以分为三个主要步骤：几何变换、光栅化和着色。</p><ol><li>几何变换</li></ol><p>在进行光栅化之前，需要对几何图形进行变换，以便将其正确地放置在屏幕上。通常，这涉及到三维几何图形的平移、旋转、缩放和投影等操作。在这个过程中，通常使用矩阵和向量来表示几何变换。</p><ol><li>光栅化</li></ol><p>一旦几何图形被变换到屏幕坐标系中，就可以进行光栅化。在这个过程中，将三角形分解为像素，并为每个像素确定颜色值和深度值。这个过程通常包括以下几个步骤：</p><ul><li>扫描线生成：确定三角形在屏幕上的位置，并找出它跨越的每一行像素。</li><li>插值计算：对于每一行像素，计算每个像素的颜色和深度值，通常使用插值算法来计算每个像素的属性值。</li><li>剪裁：根据视口大小和屏幕分辨率，剪切超出屏幕的像素。</li><li>深度测试：检查像素的深度值是否比现有像素深，以便正确绘制叠加像素。</li></ul><ol><li>着色</li></ol><p>一旦像素被计算出来，就需要对它们进行着色，以便将其呈现为图像。通常，着色是通过对像素进行颜色填充来实现的。在这个过程中，可以使用多种着色算法和材质属性来实现不同的视觉效果。</p><p>总的来说，光栅化是计算机图形学中非常重要的技术，可以将几何图形转换为像素，并且可以高效地处理大量像素。光栅化通常应用于实时渲染，例如视频游戏和虚拟现实应用程序。</p><h2 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h2><p>在计算机图形学中，光栅化是将矢量图形转换为栅格图像的过程。矢量图形是由一系列点、线和曲线组成的，而栅格图像则是由像素点组成的。光栅化的过程就是将矢量图形中的点、线和曲线转换为像素点，确定像素点的位置和颜色值，从而得到栅格图像。</p><p>在光栅化过程中，采样是一个非常重要的环节。采样就是将矢量图形中的点、线和曲线离散化为像素点，确定每个像素点的颜色值和位置。在实际应用中，采样可以通过以下几个步骤完成：</p><ol><li>定义采样区域和采样分辨率。采样区域是指矢量图形需要转换为栅格图像的区域，采样分辨率是指每个像素点的大小。采样区域和采样分辨率通常由应用程序或硬件设备指定。</li><li>确定像素点的位置。在确定像素点的位置时，需要考虑矢量图形中的点、线和曲线的位置和形状。对于点和线段，像素点的位置通常与它们的中心点或中心线段对齐。对于曲线，则需要将其分割为多个线段，并确定每个线段上的像素点位置。</li><li>确定像素点的颜色值。在确定像素点的颜色值时，需要考虑矢量图形中的颜色和光照等信息。通常，像素点的颜色值可以通过以下几种方式计算得到：<ul><li>点采样。对于每个像素点，只取其中心点的颜色值作为该像素点的颜色值。这种方式简单易实现，但可能会产生锯齿状的图形边缘。</li><li>双线性插值。对于每个像素点，计算其周围4个像素的颜色值，并进行加权平均，得到该像素点的颜色值。这种方式可以有效地降低锯齿状的图形边缘，但需要进行更多的计算，因此相对较慢。</li><li>其他插值方式。还有其他一些插值方式，如三线性插值、样条插值等，可以根据具体需求选择。</li></ul></li></ol><p>以上就是光栅化和采样的基本概念和流程。在实际应用中，光栅化和采样常常与其他技术一起使用，以实现更高质量的图像渲染。下面是一些常用的光栅化和采样技术：</p><ol><li>多级采样。多级采样是一种可以提高图像质量和减少锯齿的技术。它的基本思想是，在渲染图像之前，先生成一个分辨率较低的版本，然后对其进行插值，得到分辨率较高的版本。这样可以减少锯齿和噪声，并提高渲染速度。</li><li>抗锯齿。抗锯齿是一种可以减少锯齿和提高图像质量的技术。它的基本思想是，在渲染图像时，对边缘进行平滑处理，以消除锯齿和噪声。常用的抗锯齿技术包括多重采样抗锯齿、超采样抗锯齿等。</li><li>阴影计算。阴影计算是一种可以增强图像深度感和真实感的技术。它的基本思想是，根据光源和物体的位置、形状等信息，计算出每个像素点的阴影值，并对图像进行渲染。常用的阴影计算技术包括阴影映射、体积阴影等。</li><li>纹理映射。纹理映射是一种可以增强图像细节和真实感的技术。它的基本思想是，在渲染图像时，将纹理图像映射到物体表面上，以模拟物体的真实表面。常用的纹理映射技术包括UV映射、球形映射等。</li></ol><p>总之，光栅化和采样是计算机图形学中非常重要的技术之一，它可以将矢量图形转换为栅格图像，并实现图像渲染、抗锯齿、阴影计算、纹理映射等功能。在实际应用中，需要根据具体需求选择合适的光栅化和采样技术，并结合其他技术一起使用，以实现更高质量的图像渲染。</p><h2 id="包围盒"><a href="#包围盒" class="headerlink" title="包围盒"></a>包围盒</h2><p><img src="/../images/image-20230425104108331.png" alt="image-20230425104108331"></p><p>只有区域内的才需要进行判断</p><h2 id="AABB包围盒"><a href="#AABB包围盒" class="headerlink" title="AABB包围盒"></a>AABB包围盒</h2><p>AABB包围盒（Axis-Aligned Bounding Box，轴对齐包围盒）是计算机图形学中常用的一种包围盒，它是由一组最小和最大的坐标值构成的矩形，且该矩形的边与坐标轴平行。AABB包围盒可以用于快速检测两个物体是否相交或者用于物体的碰撞检测等。</p><p>AABB包围盒的优点在于它的计算速度快、简单易用、存储空间小。对于包含几何形状的物体，如果我们使用AABB包围盒将其框住，我们可以利用包围盒的快速计算来减少对几何形状的碰撞检测次数，从而提高程序的效率。</p><p>AABB包围盒通常是通过以下方式生成的：</p><ol><li>遍历物体的所有顶点，找出其中最小和最大的坐标值，得到包围盒的两个顶点。</li><li>根据这两个顶点的坐标值构建出AABB包围盒。</li></ol><p>在实际应用中，AABB包围盒通常会与其他技术一起使用，例如空间分割、碰撞检测等。通过使用AABB包围盒，可以加快程序的执行速度，提高图形处理的效率和性能。</p><h2 id="锯齿"><a href="#锯齿" class="headerlink" title="锯齿"></a>锯齿</h2><p>光栅化是一种将连续的几何图形转换为离散的像素图形的过程。在进行光栅化时，由于像素是离散的，而几何图形是连续的，因此会出现锯齿的现象。这种现象被称为锯齿现象，也称为走样（aliasing）。</p><p>锯齿现象的产生原因主要是由于离散化导致的采样误差。当像素格子的大小小于几何图形的最小特征尺寸时，就会发生采样误差，从而导致锯齿现象。例如，当一条直线的斜率很大时，它在像素上的表示就是一列点，而不是一条连续的直线，这就会导致锯齿现象。</p><p>锯齿现象的解决方法有多种，其中比较常用的方法包括：</p><ol><li>抗锯齿技术。抗锯齿技术是一种可以减少锯齿和提高图像质量的技术。它的基本思想是，在渲染图像时，对边缘进行平滑处理，以消除锯齿和噪声。常用的抗锯齿技术包括多重采样抗锯齿、超采样抗锯齿等。</li><li>提高像素密度。提高像素密度是一种可以减少锯齿现象的方法。增加像素的数量可以使得离散化的误差更小，从而减少锯齿现象。</li><li>使用平滑曲线。在绘制曲线时，使用平滑的曲线可以减少锯齿现象。常用的平滑曲线包括贝塞尔曲线、B样条曲线等。</li></ol><p>总之，锯齿现象是光栅化中常见的现象，它会影响图像的质量和真实感。要解决锯齿现象，需要使用各种技术和方法，以实现更高质量的图像渲染。</p><p><img src="/../images/image-20230425105411309.png" alt="image-20230425105411309"></p><h3 id="抗锯齿的方法"><a href="#抗锯齿的方法" class="headerlink" title="抗锯齿的方法"></a>抗锯齿的方法</h3><p>抗锯齿是一种可以减少锯齿和提高图像质量的技术，常见的抗锯齿方法有以下几种：</p><ol><li>多重采样抗锯齿（MSAA）：多重采样抗锯齿是一种常用的抗锯齿技术。它的基本思想是对于每个像素，使用多个采样点来计算颜色，然后对颜色进行平均，以减少锯齿的现象。多重采样抗锯齿可以在不增加过多计算量的情况下有效地减少锯齿现象。</li><li>超采样抗锯齿（SSAA）：超采样抗锯齿是一种使用更高分辨率的缓冲区进行渲染的抗锯齿技术。它的基本思想是将图像放大到超过显示器分辨率的大小，然后对图像进行平滑处理，最后将图像缩小回显示器分辨率的大小。超采样抗锯齿可以有效地减少锯齿的现象，但是它需要更多的计算量和存储空间。</li><li>FXAA：FXAA（Fast Approximate Anti-Aliasing）是一种快速近似抗锯齿技术。它的基本思想是对图像进行简单的平滑处理，并根据像素周围的颜色信息来确定像素的颜色，从而减少锯齿现象。FXAA是一种快速而有效的抗锯齿技术，它适用于移动设备和游戏等实时渲染场景。</li><li>TXAA：TXAA（Temporal Anti-Aliasing）是一种基于时间的抗锯齿技术。它的基本思想是使用多帧图像进行平滑处理，并根据像素在不同帧中的颜色信息来确定像素的颜色，从而减少锯齿现象。TXAA可以提供更高质量的图像，但是需要更多的计算量和存储空间。</li></ol><p>总之，抗锯齿技术是一种可以有效减少锯齿现象的技术，可以提高图像的质量和真实感。在实际应用中，我们可以根据具体的场景选择合适的抗锯齿技术，以达到最好的效果。</p><h4 id="先模糊在采样"><a href="#先模糊在采样" class="headerlink" title="先模糊在采样"></a>先模糊在采样</h4><p><img src="/../images/image-20230425111846582.png" alt="image-20230425111846582"></p><p>先进行模糊处理在采样</p><p><img src="/../images/image-20230425112042673.png" alt="image-20230425112042673"></p><h4 id="先采样在模糊"><a href="#先采样在模糊" class="headerlink" title="先采样在模糊"></a>先采样在模糊</h4><p><img src="/../images/image-20230425112255942.png" alt="image-20230425112255942"></p><p>采样速度跟不上信号处理速度会发生走样</p><h2 id="频域"><a href="#频域" class="headerlink" title="频域"></a>频域</h2><p><img src="/../images/image-20230425144444065.png" alt="image-20230425144444065"></p><h3 id="傅里叶变换"><a href="#傅里叶变换" class="headerlink" title="傅里叶变换"></a>傅里叶变换</h3><p>傅里叶变换（Fourier Transform）是一种将一个信号分解成不同频率的正弦和余弦函数的数学技术。傅里叶变换是一种重要的信号处理技术，它在音频、图像、视频处理等领域都有广泛的应用。</p><p>傅里叶变换可以将时域信号（例如音频、视频信号）转换为频域信号，即将一个时域上的复杂信号分解成一系列不同的正弦波和余弦波。这些正弦波和余弦波代表了信号在不同频率上的成分。傅里叶变换通过将信号在不同频率上的成分分解出来，可以使我们更加清晰地理解和分析信号的特征。</p><p>傅里叶变换的数学表达式为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">F</span>(ω) = ∫<span class="built_in">f</span>(t) e^(-jωt) <span class="selector-tag">dt</span></span><br></pre></td></tr></table></figure><p>其中，f(t)是原始信号，F(ω)是信号在频域中的表示，e是自然常数，j是虚数单位，ω表示频率。傅里叶变换的逆变换可以将频域信号重新转换为时域信号，即将分解后的正弦波和余弦波重新合成为原始信号。</p><p>在实际应用中，通常使用离散傅里叶变换（Discrete Fourier Transform, DFT）和快速傅里叶变换（Fast Fourier Transform, FFT）来实现傅里叶变换。这些技术大大提高了计算效率，使得傅里叶变换在实际应用中更加广泛。</p><p><img src="/../images/image-20230425160030576.png" alt="image-20230425160030576"></p><h4 id="傅里叶函数展开"><a href="#傅里叶函数展开" class="headerlink" title="傅里叶函数展开"></a>傅里叶函数展开</h4><p><img src="/../images/image-20230425144921873.png" alt="image-20230425144921873"></p><h4 id="傅里叶变换和逆变换"><a href="#傅里叶变换和逆变换" class="headerlink" title="傅里叶变换和逆变换"></a>傅里叶变换和逆变换</h4><p><img src="/../images/image-20230425145051142.png" alt="image-20230425145051142"></p><h2 id="摩尔纹"><a href="#摩尔纹" class="headerlink" title="摩尔纹"></a>摩尔纹</h2><p><img src="/../images/image-20230425111222944.png" alt="image-20230425111222944"></p><p>去掉奇数行列之后的结果</p><p><img src="/../images/image-20230425145804131.png" alt="image-20230425145804131"></p><p>当频域逐渐增大，相同的采样频率对原函数的恢复程度逐渐降低</p><h2 id="走样Artifacts"><a href="#走样Artifacts" class="headerlink" title="走样Artifacts"></a>走样Artifacts</h2><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><p>走样（aliasing）是指在对连续信号进行采样时，由于采样频率不足以满足信号带宽的采样定理要求，导致信号的高频成分被混叠到了低频成分中，从而引起原始信号的失真。</p><p>具体来说，走样的产生原因是信号带宽超过了采样频率的一半（即奈奎斯特采样定理），导致高频成分被混叠到了低频区域。这种混叠现象在数字信号中表现为折叠，因为超过一半的信号频率被折叠到了低频区域。这样，在还原信号时就会出现错误，因为在低频区域中的信号可能来自于多个高频成分，这样就无法恢复原始信号。</p><p>例如，对于一条频率为10kHz的信号，如果采样频率只有15kHz，那么超过采样频率的一半（即7.5kHz）的高频部分就会被折叠到低频区域，从而与低频部分重叠，导致信号失真。如果将采样频率提高到20kHz，那么信号就可以被正确采样，不会发生走样现象。</p><p>为了避免走样的发生，在进行采样时需要满足奈奎斯特采样定理，即采样频率要大于等于信号带宽的两倍。这样就可以确保信号的高频成分不会被混叠到低频区域，从而保证信号的准确性和完整性。</p><h3 id="奈奎斯特采样定理"><a href="#奈奎斯特采样定理" class="headerlink" title="奈奎斯特采样定理"></a>奈奎斯特采样定理</h3><p>奈奎斯特采样定理是数字信号处理中的基本理论之一，它规定：在进行离散时间信号采样时，采样频率必须大于等于信号最高频率的两倍，才能完全还原原始信号。</p><p>具体地说，如果一个连续时间信号x(t)的最高频率为f_max，则采样频率f_s必须满足：</p><p>f_s &gt;&#x3D; 2f_max</p><p>否则，在进行采样时就会出现走样现象，信号的高频部分将被混淆到低频部分，从而无法恢复原始信号。</p><p>奈奎斯特采样定理的证明可以通过傅里叶变换的理论来进行。根据傅里叶变换的定义，信号在频域中的表示是由连续的频率分量组成的，其中最高频率为f_max。如果采样频率小于2f_max，则在进行采样时，高于采样频率一半的频率分量将被折叠回到低于采样频率一半的频率范围内，这就导致了频域中的重叠和混淆，从而无法还原原始信号。</p><p>因此，为了保证完全还原原始信号，必须保证采样频率大于等于2f_max。这就是奈奎斯特采样定理的基本内容。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>奈奎斯特采样定理的证明可以通过采用频域的角度来解释。假设有一段带宽为B的连续信号f(t)，那么其傅里叶变换F(ω)的频域表示为：</p><p>F(ω) &#x3D; ∫f(t)e^(-iωt)dt</p><p>其中ω为频率。假设对f(t)进行等间隔采样，采样频率为fs，采样时间间隔为Δt &#x3D; 1&#x2F;fs。那么采样信号g(t)可以表示为：</p><p>g(t) &#x3D; f(t)sinc(πt&#x2F;Δt)</p><p>其中sinc函数为正弦卷积函数，定义为sinc(x) &#x3D; sin(πx)&#x2F;(πx)。g(t)的傅里叶变换G(ω)为：</p><p>G(ω) &#x3D; F(ω) * Fs(ω)</p><p>其中*表示卷积运算，Fs(ω)为采样函数的频域表示，它为一个周期为1&#x2F;fs的函数，具有无限多个零点。在频率域中，采样后的信号的频率分布相当于信号的频率分布与采样函数的频率分布的乘积。</p><p>考虑采样信号的频率范围，假设采样频率为fs，那么采样后的信号的频率范围为[-fs&#x2F;2, fs&#x2F;2]。在这个频率范围内，采样函数Fs(ω)的零点会与信号的频率分布产生重叠，导致信号的高频部分被折叠到低频区域。</p><p>如果采样频率fs满足2B &gt; fs，那么采样函数的零点将不会与信号的频率分布重叠，从而避免了折叠失真的问题。因此，采样频率fs必须满足2B ≤ fs，才能确保信号能够被完全恢复，这就是奈奎斯特采样定理。</p><p>因此，可以得出结论：在对连续信号进行离散化处理时，采样频率必须不小于信号带宽的两倍，以避免失真。</p><p><img src="/../images/image-20230425150152229.png" alt="image-20230425150152229"></p><p>相同的采样频率对于两个完全不同的函数采样得出了相同的结果叫做走样</p><p><img src="/../images/image-20230425163627335.png"></p><h3 id="反走样"><a href="#反走样" class="headerlink" title="反走样"></a>反走样</h3><h4 id="先模糊在采样-1"><a href="#先模糊在采样-1" class="headerlink" title="先模糊在采样"></a>先模糊在采样</h4><p>先将高频信息移除在进行采样</p><p><img src="/../images/image-20230425164310083.png" alt="image-20230425164310083"></p><p><img src="/../images/image-20230425165043792.png" alt="image-20230425165043792"></p><h4 id="多重采样抗锯齿（MSAA）"><a href="#多重采样抗锯齿（MSAA）" class="headerlink" title="多重采样抗锯齿（MSAA）"></a>多重采样抗锯齿（MSAA）</h4><p>多重采样抗锯齿是一种常用的抗锯齿技术。它的基本思想是对于每个像素，使用多个采样点来计算颜色，然后对颜色进行平均，以减少锯齿的现象。多重采样抗锯齿可以在不增加过多计算量的情况下有效地减少锯齿现象。</p><p><img src="/../images/image-20230425165509630.png" alt="image-20230425165509630"></p><h4 id="快速近似抗锯齿技术FXAA"><a href="#快速近似抗锯齿技术FXAA" class="headerlink" title="快速近似抗锯齿技术FXAA"></a>快速近似抗锯齿技术FXAA</h4><p>FXAA（Fast Approximate Anti-Aliasing）是一种快速近似抗锯齿技术。它的基本思想是对图像进行简单的平滑处理，并根据像素周围的颜色信息来确定像素的颜色，从而减少锯齿现象。FXAA是一种快速而有效的抗锯齿技术，它适用于移动设备和游戏等实时渲染场景。</p><p>先得到具有锯齿的图像，在去除锯齿</p><h4 id="TAA"><a href="#TAA" class="headerlink" title="TAA"></a>TAA</h4><p>TAA（Temporal Anti-Aliasing）是一种抗锯齿技术，可以消除动态场景中的锯齿和边缘毛刺等锯齿状图像失真。TAA技术通过使用当前帧和前一帧之间的像素信息来进行抗锯齿处理，从而产生更加平滑和清晰的图像。</p><p>TAA技术的基本思想是，在两个连续帧之间进行插值，并对插值图像进行抗锯齿处理。插值的过程可以通过使用运动向量或时间信息来进行计算。然后，根据插值图像的颜色信息和深度信息，使用一定的过滤器来计算出最终的抗锯齿结果。</p><p>TAA技术具有一定的优势，因为它可以在动态场景中提供高质量的抗锯齿效果，并且可以避免由于运动产生的锯齿和伪影效果。TAA技术也可以与其他抗锯齿技术一起使用，例如MSAA等技术，从而产生更加平滑和清晰的图像。</p><p>TAA技术的缺点是在一些情况下，它可能会导致图像模糊或产生其他的伪影效果。此外，TAA技术需要对图像进行多次渲染和计算，因此可能会对渲染性能产生一定的影响。</p><p>首先，TAA技术可以使用多种插值方法，例如双线性插值、双三次插值等。不同的插值方法可以产生不同的效果，同时也会对性能产生一定的影响。在实际应用中，通常会选择一种性能和效果之间的平衡点来进行设置。</p><p>其次，TAA技术需要使用一个合适的抗锯齿滤波器来处理插值图像。常见的滤波器包括Gaussian滤波器和Box滤波器等。这些滤波器可以产生不同的抗锯齿效果，同时也会对性能产生一定的影响。</p><p>最后，为了优化TAA技术的性能，可以使用一些技巧来减少计算量和带宽需求。例如，可以使用多分辨率技术来降低插值和滤波的复杂度，或者使用预过滤技术来减少图像中的高频成分。这些技巧可以有效地提高TAA技术的性能和效果。</p><p>总之，TAA技术是一种非常实用的抗锯齿技术，可以在动态场景中产生高质量的抗锯齿效果。在实际应用中，需要根据场景的需求和硬件性能来进行合理的设置和优化。</p><h2 id="滤波"><a href="#滤波" class="headerlink" title="滤波"></a>滤波</h2><p><img src="/../images/image-20230425151840892.png" alt="image-20230425151840892"></p><p>只留高频</p><p><img src="/../images/image-20230425151856397.png" alt="image-20230425151856397"></p><p>只留低频</p><p><img src="/../images/image-20230425151910210.png" alt="image-20230425151910210"></p><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p>卷积（Convolution）是一种数学运算，通常用于信号处理、图像处理等领域。卷积的基本思想是将两个函数在一定范围内进行加权平均，其中一个函数称为输入函数，另一个函数称为卷积核或滤波器。</p><p>在信号处理中，卷积操作可以将两个信号进行合并或分离。例如，可以通过将输入信号与低通滤波器进行卷积来去除高频噪声，从而得到一个更加平滑的信号。</p><p>数学上，卷积操作的定义为：</p><p>(f * g)(t) &#x3D; ∫f(τ) g(t - τ) dτ</p><p>其中，f和g是两个实数函数，*表示卷积操作，t是自变量。这个公式表示的是函数f和g的卷积在时刻t的取值，即将函数f与以t为中心的函数g进行加权平均得到的值。</p><p>在数字信号处理中，卷积操作可以表示为离散形式：</p><p>(f * g)[n] &#x3D; ∑f[k] g[n - k]</p><p>其中，f和g是两个离散信号，[n]表示第n个采样点，k是一个整数。这个公式表示的是信号f和g的卷积在第n个采样点的取值，即将信号f与以第n个采样点为中心的信号g进行加权平均得到的值。</p><p>卷积操作在信号处理、图像处理等领域都有广泛的应用，例如图像模糊、图像增强、特征提取等。</p><p><img src="/../images/image-20230425152739795.png" alt="image-20230425152739795"></p><h3 id="时域的卷积等于频域的乘积"><a href="#时域的卷积等于频域的乘积" class="headerlink" title="时域的卷积等于频域的乘积"></a>时域的卷积等于频域的乘积</h3><p>卷积定理的核心是将时域的卷积运算转换为频域的乘积运算。具体来说，时域上的卷积运算可以看做是频域上的乘积运算的逆变换。换句话说，将两个函数在时域上卷积运算后的结果进行傅里叶变换得到的频域函数，在频域上相乘，再进行傅里叶反变换，就得到了在时域上卷积运算后的结果。</p><p>这个过程可以用以下公式来表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f * g = F^-1(F(f) × F(g))</span><br></pre></td></tr></table></figure><p>其中，f和g是时域上的两个函数，*表示卷积操作，F表示傅里叶变换，F^-1表示傅里叶反变换。</p><p>这个公式说明了，在时域上进行卷积运算，等价于在频域上将两个函数进行傅里叶变换后相乘，再进行傅里叶反变换。这个过程可以大大简化卷积运算的计算，特别是对于信号处理等需要高效处理大量数据的任务来说，非常有用。</p><p><img src="/../images/image-20230425153637789.png" alt="image-20230425153637789"></p><h2 id="深度缓冲"><a href="#深度缓冲" class="headerlink" title="深度缓冲"></a>深度缓冲</h2><p>深度缓冲（Depth Buffer），也叫作深度缓存或者 Z 缓冲，是一种在计算机图形学中用于实现三维场景的技术。深度缓冲是一个二维数组，用于存储场景中每个像素的深度信息（即距离相机的距离）。当我们进行渲染时，每个像素的深度信息都会被计算，并存储到深度缓冲中。</p><p>深度缓冲通常是在三维场景的渲染过程中使用的。当我们渲染一个三维场景时，每个像素的深度信息都需要被计算出来，以便于决定哪些像素应该被显示在屏幕上。具体来说，对于每个像素，我们需要计算出它在相机坐标系中的深度，然后将其转换为屏幕空间中的深度。最后，将该深度值与深度缓冲中对应像素的深度值进行比较，如果该深度值比深度缓冲中的深度值更小，则说明该像素应该被显示在屏幕上。</p><p>深度缓冲在计算机图形学中非常重要。它不仅可以用于确定哪些像素应该被显示在屏幕上，还可以用于实现各种特效，如深度测试、阴影和透明度等。通过使用深度缓冲，我们可以在不增加额外开销的情况下，提高渲染效率和图像的真实感。</p><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><p><img src="/../images/image-20230414110202088.png" alt="image-20230414110202088"></p><p><img src="/../images/image-20230414111537538.png" alt="image-20230414111537538"></p><p><img src="/../images/image-20230414111734336.png" alt="image-20230414111734336"></p><p>叉乘</p><p><img src="/../images/image-20230414112303051.png" alt="image-20230414112303051"></p><p>将一个向量分到定义的三个坐标系上</p><p><img src="/../images/image-20230414115117179.png" alt="image-20230414115117179"></p><p>矩阵相乘</p><p><img src="/../images/image-20230414115619152.png" alt="image-20230414115619152"></p><p>矩阵相乘没有交换律</p><p><img src="/../images/image-20230414115725711.png" alt="image-20230414115725711"></p><p>矩阵的转置</p><p><img src="/../images/image-20230414120421184.png" alt="image-20230414120421184"></p><p>矩阵的逆</p><p><img src="/../images/image-20230414120552501.png" alt="image-20230414120552501"></p><p>点乘和叉乘转化为矩阵计算</p><p><img src="/../images/image-20230414120719811.png" alt="image-20230414120719811"></p><h2 id="基本公式"><a href="#基本公式" class="headerlink" title="基本公式"></a>基本公式</h2><p>以下是线性代数中的一些基础公式：</p><ol><li>向量基本运算：</li></ol><ul><li>向量加法：$\vec{u} + \vec{v} &#x3D; (u_1+v_1, u_2+v_2, …, u_n+v_n)$</li><li>向量数乘：$k \vec{u} &#x3D; (k u_1, k u_2, …, k u_n)$</li><li>向量点积：$\vec{u} \cdot \vec{v} &#x3D; u_1 v_1 + u_2 v_2 + … + u_n v_n$</li><li>向量模长：$||\vec{u}|| &#x3D; \sqrt{u_1^2 + u_2^2 + … + u_n^2}$</li></ul><ol><li>矩阵基本运算：</li></ol><ul><li>矩阵加法：$A+B&#x3D;C$，其中 $C_{ij} &#x3D; A_{ij}+B_{ij}$</li><li>矩阵数乘：$kA&#x3D;B$，其中 $B_{ij}&#x3D;kA_{ij}$</li><li>矩阵乘法：$AB&#x3D;C$，其中 $C_{ij} &#x3D; \sum_k A_{ik} B_{kj}$</li><li>矩阵转置：$A^T$，其中 $(A^T)<em>{ij}&#x3D;A</em>{ji}$</li></ul><ol><li>线性变换基本运算：</li></ol><ul><li>线性变换定义：对于向量空间 $V$ 和 $W$，映射 $T:V \rightarrow W$ 满足 $T(k \vec{v}+\vec{u}) &#x3D; k T(\vec{v})+T(\vec{u})$</li><li>线性变换矩阵表示：对于线性变换 $T:V \rightarrow W$，如果 $V$ 和 $W$ 有基 ${\vec{v}_1,\vec{v}_2,…,\vec{v}_n}$ 和 ${\vec{w}_1,\vec{w}<em>2,…,\vec{w}*m}$，则 $T$ 的矩阵表示为 $A*{m \times n}$，其中 $A</em>{ij}$ 是 $T(\vec{v}_j)$ 在 ${\vec{w}_1,\vec{w}_2,…,\vec{w}_m}$ 基下的坐标</li><li>线性变换的行列式：$det(T)$ 表示线性变换 $T$ 对向量空间 $V$ 的面积或体积的缩放因子，可以通过计算矩阵 $A$ 的行列式来得到 $det(T)$ 的值</li></ul><p>以上是线性代数中的一些基础公式，这些公式是解决线性代数问题的基础，深入理解它们对于学习和应用线性代数非常重要。</p><p>在unity中a叉乘b为负数，b在a的左侧，为正在右侧</p><h1 id="变化Transformation"><a href="#变化Transformation" class="headerlink" title="变化Transformation"></a>变化Transformation</h1><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><h2 id="Shear-Matrix-切变"><a href="#Shear-Matrix-切变" class="headerlink" title="Shear Matrix 切变"></a>Shear Matrix 切变</h2><p><img src="/../images/image-20230424102311017.png" alt="image-20230424102311017"></p><p>x水平方向的移动为A*Y</p><h3 id="三维空间的缩放和平移"><a href="#三维空间的缩放和平移" class="headerlink" title="三维空间的缩放和平移"></a>三维空间的缩放和平移</h3><p><img src="/../images/image-20230424153508752.png" alt="image-20230424153508752"></p><h2 id="Rotate-旋转"><a href="#Rotate-旋转" class="headerlink" title="Rotate 旋转"></a>Rotate 旋转</h2><p>旋转默认绕原点逆时针进行</p><p><img src="/../images/image-20230424102650026.png" alt="image-20230424102650026"></p><p>推导</p><p><img src="/../images/image-20230424103330453.png" alt="image-20230424103330453"></p><p>旋转矩阵的逆等于旋转矩阵的转置</p><p><img src="/../images/image-20230424152626644.png" alt="image-20230424152626644"></p><h2 id="三维空间的旋转"><a href="#三维空间的旋转" class="headerlink" title="三维空间的旋转"></a>三维空间的旋转</h2><p><img src="/../images/image-20230424153728987.png" alt="image-20230424153728987"></p><h2 id="齐次坐标"><a href="#齐次坐标" class="headerlink" title="齐次坐标"></a>齐次坐标</h2><p>Translation（平移）不能用上面的方式进行表示</p><p><img src="/../images/image-20230424104326186.png" alt="image-20230424104326186"></p><p><img src="/../images/image-20230424105135971.png" alt="image-20230424105135971"></p><p>齐次坐标可以解决点的平移的问题</p><p>但是向量具有平移不变性，一个向量被平移后不发生任何改变</p><p><img src="/../images/image-20230424105750893.png" alt="image-20230424105750893"></p><p>0+0&#x3D;0 为向量</p><p>1-1&#x3D;0 为向量</p><p>1+0&#x3D;1 为点</p><p>点加点在齐次坐标上为两个点的中点</p><h3 id="齐次坐标上的线性变换"><a href="#齐次坐标上的线性变换" class="headerlink" title="齐次坐标上的线性变换"></a>齐次坐标上的线性变换</h3><p><img src="/../images/image-20230424110941497.png" alt="image-20230424110941497"></p><ol><li>平移变换矩阵：</li></ol><p>在二维空间中，平移变换矩阵可以表示为：</p><p>| 1 0 tx | </p><p>| 0 1 ty |</p><p> | 0 0 1 |</p><p>在三维空间中，平移变换矩阵可以表示为：</p><p>| 1 0 0 tx | </p><p>| 0 1 0 ty |</p><p>| 0 0 1 tz | </p><p>| 0 0 0 1 |</p><p>其中tx、ty和tz分别表示在x、y和z方向上的平移量。</p><ol><li>旋转变换矩阵：</li></ol><p>在二维空间中，绕原点旋转θ角度的变换矩阵可以表示为：</p><p>| cosθ -sinθ 0 | </p><p>| sinθ cosθ 0 | </p><p>| 0       0      1 |</p><p>在三维空间中，绕z轴旋转θ角度的变换矩阵可以表示为：</p><p>| cosθ -sinθ 0 0 | </p><p>| sinθ cosθ 0 0 | </p><p>| 0       0      1 0 | </p><p>| 0       0      0 1 |</p><p>其中cosθ和sinθ分别表示θ角度的余弦值和正弦值。</p><ol><li>缩放变换矩阵：</li></ol><p>在二维空间中，缩放变换矩阵可以表示为：</p><p>| sx 0 0 | </p><p>| 0 sy 0 | </p><p>| 0  0  1 |</p><p>在三维空间中，缩放变换矩阵可以表示为：</p><p>| sx 0 0 0 | </p><p>| 0 sy 0 0 | </p><p>| 0 0 sz 0 | </p><p>| 0 0 0  1 |</p><p>其中sx、sy和sz分别表示在x、y和z方向上的缩放比例。</p><p>需要注意的是，对于多个变换的组合，可以通过将它们的变换矩阵相乘来得到一个总的变换矩阵。例如，如果需要先进行平移变换，然后再进行旋转变换，可以将它们的变换矩阵相乘得到一个总的变换矩阵，然后将需要变换的点的齐次坐标与该矩阵相乘，得到变换后的点的齐次坐标。</p><p><img src="/../images/image-20230424110712886.png" alt="image-20230424110712886"></p><p><img src="/../images/image-20230424120249680.png" alt="image-20230424120249680"></p><h2 id="观察变换"><a href="#观察变换" class="headerlink" title="观察变换"></a>观察变换</h2><p><img src="/../images/image-20230424153230702.png" alt="image-20230424153230702"></p><h1 id="视图变换"><a href="#视图变换" class="headerlink" title="视图变换"></a>视图变换</h1><h2 id="MVP变换"><a href="#MVP变换" class="headerlink" title="MVP变换"></a>MVP变换</h2><p>模型视图投影（Model-View-Projection，MVP）是一种3D图形变换技术，它将3D对象从3D空间映射到2D平面上，通常用于计算机图形学、游戏开发和虚拟现实等领域。</p><p>MVP变换包括三个步骤：模型变换、视图变换和投影变换。</p><ol><li>模型变换：将3D对象从其自身坐标系变换到世界坐标系中。这个变换通常由平移、旋转和缩放等操作组成，将3D对象从其本地坐标系转换为世界坐标系。</li><li>视图变换：将世界坐标系中的3D对象转换到相机坐标系中。这个变换通常由平移和旋转操作组成，将3D对象从世界坐标系转换为相机坐标系，以便在相机的视锥体内进行后续计算。</li><li>投影变换：将相机坐标系中的3D对象投影到2D平面上。这个变换通常由正交投影和透视投影两种方式实现，将相机坐标系中的3D对象映射到2D平面上，生成最终的图像。</li></ol><p>MVP变换将3D对象从其本地坐标系转换为2D平面上的图像，使得开发者能够在屏幕上显示3D场景，并且可以对3D对象进行交互和操作。这种技术在游戏开发、计算机辅助设计和虚拟现实等领域得到了广泛的应用。</p><h2 id="视图变换-1"><a href="#视图变换-1" class="headerlink" title="视图变换"></a>视图变换</h2><p><img src="/../images/image-20230424162150923.png" alt="image-20230424162150923"></p><p><img src="/../images/image-20230424162428649.png" alt="image-20230424162428649"></p><p>相机变换：位置，看向的方向，向上的方向</p><p><img src="/../images/image-20230424162652301.png" alt="image-20230424162652301"></p><p>一般约定相机在原点，看向-Z轴，Y为向上的方向</p><p><img src="/../images/image-20230424162940532.png" alt="image-20230424162940532"></p><p>将摄像机的位置朝向和上方变为指定的</p><p><img src="/../images/image-20230424163849555.png" alt="image-20230424163849555"></p><p>先写逆变换，在求转置即为正变换</p><p><img src="/../images/image-20230424165041212.png" alt="image-20230424165041212"></p><p>物体和相机一起进行变化</p><h2 id="投影变换"><a href="#投影变换" class="headerlink" title="投影变换"></a>投影变换</h2><h2 id="正交投影和透视投影"><a href="#正交投影和透视投影" class="headerlink" title="正交投影和透视投影"></a>正交投影和透视投影</h2><p>正交投影和透视投影都是在三维空间中将三维对象转换为二维图像的方法，但它们有一些不同之处。</p><p>正交投影是将一个三维对象投影到一个平面上，使得投影线垂直于投影平面，因此投影不会出现透视效果，也就是说，平行的线在投影后仍然是平行的。这种投影通常用于制图或工程设计中，因为它可以准确地保持对象的尺寸和比例。</p><p>透视投影则是将三维对象投影到一个平面上，使得投影线不一定垂直于投影平面。这种投影会产生透视效果，即离观察者远的对象会比较小，而离观察者近的对象会比较大。透视投影通常用于艺术作品和摄影中，因为它可以更好地模拟人眼的视觉效果。</p><p>总的来说，正交投影适用于需要准确表达尺寸和比例的场合，而透视投影适用于需要模拟真实场景的场合。</p><h3 id="正交投影"><a href="#正交投影" class="headerlink" title="正交投影"></a>正交投影</h3><p><img src="/../images/image-20230424170823845.png" alt="image-20230424170823845"></p><p>将Z轴扔掉即是正交投影图，将正交投影的图放在【-1到1】之间</p><p><img src="/../images/image-20230424171831069.png" alt="image-20230424171831069"></p><p>右手坐标系的近大于远</p><p>先平移再转化为标准立方体</p><p><img src="/../images/image-20230424171932430.png" alt="image-20230424171932430"></p><p>先平移在缩放</p><h3 id="透视投影"><a href="#透视投影" class="headerlink" title="透视投影"></a>透视投影</h3><p><img src="/../images/image-20230424172748566.png" alt="image-20230424172748566"></p><p>一个向量乘上一个不等于0的常数K依然是这个向量</p><p><img src="/../images/image-20230424173705883.png" alt="image-20230424173705883"></p><p><img src="/../images/image-20230424182239743.png" alt="image-20230424182239743"></p><p>相似三角形挤压</p><p><img src="/../images/image-20230424182523951.png" alt="image-20230424182523951"></p><p>不知道Z的情况下进行变换</p><p><img src="/../images/image-20230424183543962.png" alt="image-20230424183543962"></p><p><img src="/../images/image-20230424183804060.png" alt="image-20230424183804060"></p><p>本来就在平面上的点</p><p><img src="/../images/image-20230424184758074.png" alt="image-20230424184758074"></p><h1 id="双线性插值、双三次插值"><a href="#双线性插值、双三次插值" class="headerlink" title="双线性插值、双三次插值"></a>双线性插值、双三次插值</h1><p>双线性插值和双三次插值都是图像处理中常用的插值算法，用于处理图像的缩放和旋转等操作。</p><p>双线性插值是一种基于四个相邻像素值的线性插值算法，它将需要插值的像素周围的四个像素按照位置权重进行加权平均，从而得到插值结果。双线性插值适用于图像的小范围缩放，可以实现较好的效果。但是在进行大范围缩放时，它容易产生锯齿状失真。</p><p>双三次插值是一种基于16个相邻像素值的插值算法，它对每个需要插值的像素周围的16个像素进行加权平均，从而得到插值结果。它可以处理较大范围的缩放和旋转等变换，并且可以减少锯齿状失真。双三次插值的计算量比双线性插值大，但是可以通过加快计算速度和使用GPU等方法来优化性能。</p><p>总的来说，双三次插值相对于双线性插值具有更高的图像质量和更少的失真。但是，在计算量和性能方面，双三次插值也更为复杂和耗时。因此，在实际应用中需要根据具体的情况进行选择。</p><h1 id="深度缓冲-1"><a href="#深度缓冲-1" class="headerlink" title="深度缓冲"></a>深度缓冲</h1><p><img src="/../images/image-20230425175942426.png" alt="image-20230425175942426"></p><p>越亮表示越远</p><p><img src="/../images/image-20230425180509072.png" alt="image-20230425180509072"></p><p>遍历所有点，记录每个位置的最小深度，当前点深度小于最小深度则进行更新·</p><p>时间复杂度为O（n）</p><p><img src="/../images/image-20230425180641197.png" alt="image-20230425180641197"></p><h1 id="着色（shading）"><a href="#着色（shading）" class="headerlink" title="着色（shading）"></a>着色（shading）</h1><p>通用定义:引入明暗和颜色的不同<br>图形学中着色的定义:对不同的物体应用不同材质的过程<br>材质和着色:不同的材质就是不同的着色方法</p><p><img src="/../images/image-20230425183349361.png" alt="image-20230425183349361"></p><p>高光漫反射和未照到的地方</p><p><img src="/../images/image-20230425183811163.png" alt="image-20230425183811163"></p><p>观察方向 V</p><p>光照方向L</p><p>法线N</p><p><img src="/../images/image-20230425184035206.png" alt="image-20230425184035206"></p><p>着色只考虑自己，不考虑其他任何物体的存在，不会进行阴影的处理</p><p><img src="/../images/image-20230425185718435.png" alt="image-20230425185718435"></p><h1 id="blinn-Phong模型"><a href="#blinn-Phong模型" class="headerlink" title="blinn-Phong模型"></a>blinn-Phong模型</h1><p>Blinn-Phong模型是计算机图形学中一个结合了Blinn模型和Phong模型的光照模型，它综合了两种模型的优点，被广泛用于实时渲染中。</p><p>Blinn-Phong模型的光照计算主要包括三个部分：环境光照、漫反射光照和镜面高光照。其中环境光照是指光线在表面上反射后，又被其他表面反射到观察者的光照。漫反射光照是指光线在表面上被散射，形成均匀的光照。镜面高光照则是指在光线照射表面后形成的亮点，这些亮点通常出现在表面的光滑区域。</p><p>Blinn-Phong模型中，漫反射光照和环境光照的计算和Phong模型相似，而镜面高光照的计算则采用Blinn模型中的半程向量来代替Phong模型中的反射向量。这样可以在计算镜面高光时提高计算效率，同时保持高光细节。Blinn-Phong模型还可以通过调整参数来控制材质的光滑度和高光亮度，使得渲染结果更加真实。</p><p>Blinn-Phong模型已经被广泛应用于实时渲染中，包括游戏、虚拟现实等领域。</p><p>在Blinn-Phong模型中，光照计算可以分为三个部分：环境光照、漫反射光照和镜面高光照。</p><p>环境光照是指物体表面在没有直接光照时所接收到的光照。环境光照的颜色通常由场景中的全局光照和天空盒等决定。在Blinn-Phong模型中，环境光照的计算公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ambient = Ka * Ia</span><br></pre></td></tr></table></figure><p>其中，Ka为环境光系数，Ia为全局光照强度。</p><p>漫反射光照是指物体表面在接收到光照时所散射出的光照。漫反射光照的强度和光照的角度、表面法向量以及光照的强度有关。在Blinn-Phong模型中，漫反射光照的计算公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Diffuse = Kd * Id * max(0, dot(N, L))</span><br></pre></td></tr></table></figure><p>其中，Kd为漫反射系数，Id为光照强度，N为表面法向量，L为光线方向向量。</p><p>镜面高光照是指物体表面在接收到光照时所反射出的高光。镜面高光的强度和观察者角度、光线角度、表面法向量以及材质的高光系数有关。在Blinn-Phong模型中，镜面高光的计算公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Specular = Ks * Is * pow(max(0, dot(H, N)), shininess)</span><br></pre></td></tr></table></figure><p>其中，Ks为高光系数，Is为光照强度，N为表面法向量，H为半程向量，shininess为高光的锐度。</p><p>Blinn-Phong模型中的半程向量H是由观察者和光线方向向量的平均值得出的。在实现中，可以使用以下公式计算半程向量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H = normalize(V + L)</span><br></pre></td></tr></table></figure><p>其中，V为观察者方向向量，L为光线方向向量。</p><p>Blinn-Phong模型中的所有参数，包括环境光系数、漫反射系数、高光系数、锐度等，都可以根据具体的应用场景进行调整，以达到更好的渲染效果。</p><p><img src="/../images/image-20230426205948797.png" alt="image-20230426205948797"></p><p><img src="/../images/image-20230426210642603.png" alt="image-20230426210642603"></p><p>p是为了让高光不是那么大</p><p><img src="/../images/image-20230426210929745.png" alt="image-20230426210929745"></p><p>环境光、漫反射光、高光</p><h2 id="Blinn-Phong模型的计算式如下："><a href="#Blinn-Phong模型的计算式如下：" class="headerlink" title="Blinn-Phong模型的计算式如下："></a>Blinn-Phong模型的计算式如下：</h2><p>I &#x3D; I_a + I_d + I_s</p><p>其中，I表示最终的光照强度，由三个分量组成：环境光分量I_a、漫反射分量I_d和镜面反射分量I_s。</p><p>环境光分量I_a表示物体表面受到的来自环境光的照射强度，计算公式如下：</p><p>I_a &#x3D; k_a * I_p</p><p>其中，k_a为环境光系数，通常取值在0到1之间；I_p为全局环境光强度。</p><p>漫反射分量I_d表示物体表面受到来自光源的散射光的照射强度，计算公式如下：</p><p>I_d &#x3D; k_d * I_p * max(0, N · L)</p><p>其中，k_d为漫反射系数，通常取值在0到1之间；I_p为光源强度；N为物体表面法向量，L为光源方向向量。</p><p>镜面反射分量I_s表示物体表面受到来自光源的反射光的照射强度，计算公式如下：</p><p>I_s &#x3D; k_s * I_p * max(0, H · V)^n</p><p>其中，k_s为镜面反射系数，通常取值在0到1之间；I_p为光源强度；H为光源方向向量和视线方向向量的一半向量（半程向量），V为视线方向向量；n为反射光的高光系数。</p><p><img src="/../images/image-20230426211221849.png" alt="image-20230426211221849"></p><h1 id="着色频率"><a href="#着色频率" class="headerlink" title="着色频率"></a>着色频率</h1><h2 id="Flat-Shading（平面着色）"><a href="#Flat-Shading（平面着色）" class="headerlink" title="Flat Shading（平面着色）"></a>Flat Shading（平面着色）</h2><p>Flat Shading（平面着色）是一种计算机图形学中的着色方法，它的原理是将一个三角形内的每个像素都赋予相同的颜色，通常使用该三角形的法线向量来计算每个像素的颜色。这种方法忽略了三角形内部的颜色变化，使得物体看起来更加平滑和简单。</p><p>Flat Shading通常被用于低端设备和实时渲染场景中，因为它计算量小，渲染速度快。然而，由于它忽略了三角形内部的颜色变化，所以渲染出来的图像可能会显得比较生硬，缺乏细节和真实感。与之相反的是Smooth Shading（平滑着色），它计算每个像素的颜色时，考虑了三角形内部的颜色变化，从而使得渲染出来的物体看起来更加真实和细腻。</p><p>在一些场景下，为了平衡着色的速度和真实感，可以采用Flat Shading和Smooth Shading的混合方式，例如使用Flat Shading来渲染较远的物体，使用Smooth Shading来渲染较近的物体。</p><h2 id="Gouraud着色"><a href="#Gouraud着色" class="headerlink" title="Gouraud着色"></a>Gouraud着色</h2><p>低频着色：也称为Gouraud着色。低频着色是一种基于顶点的着色方法，它在顶点处计算出颜色值，然后通过插值得到三角形内部的颜色。由于计算量较小，因此低频着色适合用于实时渲染和移动设备上。</p><h2 id="Phong着色"><a href="#Phong着色" class="headerlink" title="Phong着色"></a>Phong着色</h2><p>中频着色：也称为Phong着色。中频着色是一种基于片元的着色方法，它在每个像素处计算出颜色值。与低频着色相比，中频着色可以获得更加真实的光照效果，但需要更多的计算量，因此速度较低。</p><h2 id="Blinn-Phong着色"><a href="#Blinn-Phong着色" class="headerlink" title="Blinn-Phong着色"></a>Blinn-Phong着色</h2><p>高频着色：也称为Blinn-Phong着色。高频着色是一种基于片元的着色方法，它使用了更高阶的镜面反射模型，可以获得更加真实的高光效果。但由于计算量非常大，因此在实时渲染中很少使用，通常用于离线渲染或者高性能计算平台上。</p><p><img src="/../images/image-20230426220136002.png" alt="image-20230426220136002"></p><p>当面的频率出现的本来就很高的时候，不需要选用高频着色方式一样有很好的效果</p><h1 id="实时渲染管线"><a href="#实时渲染管线" class="headerlink" title="实时渲染管线"></a>实时渲染管线</h1><p>实时渲染管线（Real-time rendering pipeline），也称为图形渲染管线（Graphics rendering pipeline），是计算机图形学中的一个概念，指的是将三维模型渲染成二维图像的一系列处理步骤。这些步骤包括从场景中获取数据、计算光照、投影、裁剪、光栅化等。</p><p>通常，实时渲染管线被分为两个主要阶段：几何处理阶段和光栅化阶段。</p><p>几何处理阶段负责对场景中的几何数据进行处理，包括变换、裁剪、投影等。在该阶段中，首先将场景中的三维模型从模型空间变换到世界空间，然后应用相机矩阵将三维模型投影到二维屏幕上。投影完成后，需要对超出屏幕的部分进行裁剪，将其丢弃，以减少后面处理的开销。</p><p>在完成几何处理后，接下来就是光栅化阶段。在这个阶段中，将屏幕上的像素转换为可渲染的三角形。这个过程中，每个像素将会被分配一个相应的深度值，以及由颜色、法线等属性组成的顶点属性插值值。之后，使用光照等技术计算出每个像素的最终颜色值，并将其渲染到屏幕上。</p><p>除此之外，实时渲染管线还包括很多其他的处理步骤，如剔除面消除、多重采样、透明度排序等。这些步骤可以在管线中的不同阶段进行，以实现更高效的渲染。随着图形硬件的不断发展，现代实时渲染管线已经非常高效，可以在短时间内渲染出高质量的三维场景。</p><p><img src="/../images/image-20230427105443669.png" alt="image-20230427105443669"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="图形学" scheme="http://example.com/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="图形学" scheme="http://example.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>网络编程02</title>
    <link href="http://example.com/2023/04/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02/"/>
    <id>http://example.com/2023/04/07/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B02/</id>
    <published>2023-04-07T12:32:40.000Z</published>
    <updated>2023-04-11T13:47:59.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>[TOC]</p><span id="more"></span><h1 id="ip类和端口类"><a href="#ip类和端口类" class="headerlink" title="ip类和端口类"></a>ip类和端口类</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UIElements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lesson01</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在using System.Net命名空间下</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ip类和端口类能够用来做什么</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 进行网络通信首先进行网络连接，</span></span><br><span class="line"><span class="comment">         * 要找到对应的设备，ip号和端口号是定位网络设备必不可少的</span></span><br><span class="line"><span class="comment">         * C#中提供了对应的IP和端口相关的类来声明对应的信息</span></span><br><span class="line"><span class="comment">         * 对于之后的网络通信是必不可少的内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//IPAddress类</span></span><br><span class="line">        <span class="built_in">byte</span>[] ip = <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">128</span>, <span class="number">210</span>, <span class="number">102</span>, <span class="number">22</span> &#125;;</span><br><span class="line">        <span class="comment">//使用byte数组进行初始化</span></span><br><span class="line">        IPAddress iP1=<span class="keyword">new</span> IPAddress(ip);</span><br><span class="line">        <span class="comment">//使用字符串转化进行初始化</span></span><br><span class="line">        IPAddress iP2 = IPAddress.Parse(<span class="string">&quot;128.210.102.22&quot;</span>);</span><br><span class="line">        <span class="comment">//特殊的IP地址</span></span><br><span class="line">        <span class="comment">//127.0.0.1为本机的IP地址;</span></span><br><span class="line">        <span class="comment">//获取可用的IPV6地址</span></span><br><span class="line">        Debug.Log(IPAddress.IPv6Any);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//IPEndPoint类</span></span><br><span class="line">        <span class="comment">//IPEndPoint类将网络端点表示为IP地址和端口号，表现为IP地址和端口号的结合</span></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        IPEndPoint endPoint = <span class="keyword">new</span> IPEndPoint(iP2, <span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="unity的IPAddress类"><a href="#unity的IPAddress类" class="headerlink" title="unity的IPAddress类"></a>unity的IPAddress类</h2><p>在Unity中，<code>IPAddress</code>类表示一个IPv4或IPv6地址。它包含了一系列静态方法，用于创建和解析IP地址。</p><p>以下是<code>IPAddress</code>类的一些常用方法：</p><ul><li><code>Parse(string ipString)</code>：将字符串表示的IP地址解析为<code>IPAddress</code>实例。</li><li><code>TryParse(string ipString, out IPAddress address)</code>：尝试将字符串表示的IP地址解析为<code>IPAddress</code>实例，如果解析成功，则返回<code>true</code>，并将解析结果赋值给<code>address</code>参数；否则返回<code>false</code>。</li><li><code>TryParseExact(string ipString, string format, IFormatProvider provider, out IPAddress address)</code>：尝试将指定格式的字符串表示的IP地址解析为<code>IPAddress</code>实例，如果解析成功，则返回<code>true</code>，并将解析结果赋值给<code>address</code>参数；否则返回<code>false</code>。</li><li><code>Any</code>：表示任意IPv4地址的常量。</li><li><code>Broadcast</code>：表示IPv4广播地址的常量。</li><li><code>IPv6Any</code>：表示任意IPv6地址的常量。</li><li><code>IPv6Loopback</code>：表示IPv6环回地址的常量。</li><li><code>IPv6None</code>：表示无效的IPv6地址的常量。</li><li><code>IsLoopback(IPAddress address)</code>：判断指定的<code>IPAddress</code>实例是否是环回地址。</li><li><code>ToString()</code>：将<code>IPAddress</code>实例转换为字符串。</li></ul><p>例如，可以通过以下方式创建一个IPv4地址的<code>IPAddress</code>实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line">IPAddress ip = IPAddress.Parse(<span class="string">&quot;192.168.1.1&quot;</span>);</span><br></pre></td></tr></table></figure><p>或者创建一个IPv6地址的<code>IPAddress</code>实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code</span><br><span class="line">IPAddress ip = IPAddress.Parse(<span class="string">&quot;2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</span>);</span><br></pre></td></tr></table></figure><p>在Unity中，<code>IPAddress</code>类通常与<code>IPEndPoint</code>类一起使用，用于创建套接字的绑定地址和远程连接地址。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code<span class="comment">// 创建一个UDP套接字并绑定到本地IP地址和端口号</span></span><br><span class="line">IPAddress localIp = IPAddress.Any;</span><br><span class="line">Port localPort = <span class="keyword">new</span> Port(<span class="number">1234</span>);</span><br><span class="line">IPEndPoint localEndpoint = <span class="keyword">new</span> IPEndPoint(localIp, localPort);</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);</span><br><span class="line">socket.Bind(localEndpoint);</span><br></pre></td></tr></table></figure><h2 id="unity-的IPEndPoint类"><a href="#unity-的IPEndPoint类" class="headerlink" title="unity 的IPEndPoint类"></a>unity 的IPEndPoint类</h2><p>在Unity中，<code>IPEndPoint</code>类表示网络通信中的IP地址和端口号的组合。它继承自<code>EndPoint</code>类，可以表示一个IPv4或IPv6地址和对应的端口号。</p><p><code>IPEndPoint</code>类有两个重载的构造函数，分别接受<code>IPAddress</code>和<code>Port</code>实例作为参数，用于创建一个IP地址和端口号的组合。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code<span class="comment">// 创建一个IPv4的IPEndPoint实例</span></span><br><span class="line">IPAddress ip = IPAddress.Parse(<span class="string">&quot;192.168.1.1&quot;</span>);</span><br><span class="line">Port port = <span class="keyword">new</span> Port(<span class="number">1234</span>);</span><br><span class="line">IPEndPoint endpoint = <span class="keyword">new</span> IPEndPoint(ip, port);</span><br></pre></td></tr></table></figure><p><code>IPEndPoint</code>类还有一些其他的属性和方法，例如：</p><ul><li><code>Address</code>：获取或设置<code>IPEndPoint</code>实例的IP地址。</li><li><code>Port</code>：获取或设置<code>IPEndPoint</code>实例的端口号。</li><li><code>ToString()</code>：返回一个字符串，包含<code>IPEndPoint</code>实例的IP地址和端口号。</li><li><code>Equals(object obj)</code>：判断当前的<code>IPEndPoint</code>实例是否等于指定的对象。</li><li><code>GetHashCode()</code>：获取当前<code>IPEndPoint</code>实例的哈希值。</li></ul><p>在Unity中，可以通过<code>IPEndPoint</code>类来表示套接字的本地绑定地址和远程连接地址，用于创建和连接套接字。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy code<span class="comment">// 创建一个TCP套接字并连接到远程服务器</span></span><br><span class="line">IPAddress serverIp = IPAddress.Parse(<span class="string">&quot;192.168.1.1&quot;</span>);</span><br><span class="line">Port serverPort = <span class="keyword">new</span> Port(<span class="number">1234</span>);</span><br><span class="line">IPEndPoint serverEndpoint = <span class="keyword">new</span> IPEndPoint(serverIp, serverPort);</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">socket.Connect(serverEndpoint);</span><br></pre></td></tr></table></figure><h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><h2 id="什么是域名解析"><a href="#什么是域名解析" class="headerlink" title="什么是域名解析"></a>什么是域名解析</h2><p>域名解析指的是将人类可读的域名（例如<a href="http://www.example.com)转换为计算机可读的ip地址(例如192.0.2.1)的过程.由于计算机之间的通信都是通过ip地址进行的,因此当我们在浏览器中输入一个网址时,需要通过域名解析将其转换为对应的ip地址,才能和对应的服务器进行通信.域名解析通常是由域名解析服务商提供的,用户可以在dns服务器上设置自己的域名解析信息./">www.example.com）转换为计算机可读的IP地址（例如192.0.2.1）的过程。由于计算机之间的通信都是通过IP地址进行的，因此当我们在浏览器中输入一个网址时，需要通过域名解析将其转换为对应的IP地址，才能和对应的服务器进行通信。域名解析通常是由域名解析服务商提供的，用户可以在DNS服务器上设置自己的域名解析信息。</a></p><h2 id="什么是DNS服务器"><a href="#什么是DNS服务器" class="headerlink" title="什么是DNS服务器"></a>什么是DNS服务器</h2><p>DNS服务器（Domain Name System Server）是一种特殊的服务器，它的作用是将域名解析为对应的IP地址。当我们在浏览器中输入一个网址时，浏览器会向DNS服务器发送查询请求，请求解析该域名对应的IP地址。DNS服务器会在自己的数据库中查找该域名对应的IP地址，并将结果返回给浏览器。通过这种方式，浏览器才能知道要访问哪个服务器并与其建立连接。</p><p>DNS服务器通常由ISP（Internet Service Provider，互联网服务提供商）或其他机构提供，用户可以在网络设置中配置自己使用的DNS服务器地址。另外，由于DNS查询的速度会影响网页打开的速度，因此一些互联网公司也会部署自己的DNS服务器，以提高用户的网页加载速度和用户体验。</p><h2 id="C-的IPhostentry类"><a href="#C-的IPhostentry类" class="headerlink" title="C#的IPhostentry类"></a>C#的IPhostentry类</h2><p>IPHostEntry类是.NET框架中用于存储主机名和相关的IP地址信息的类。它提供了一些方法来查询主机名和IP地址之间的映射关系。</p><p>IPHostEntry类的主要属性和方法包括：</p><ul><li>AddressList：一个IPAddress数组，它包含了主机名对应的所有IP地址。</li><li>Aliases：一个包含主机别名的字符串数组。</li><li>HostName：包含主机名的字符串。</li></ul><p>使用IPHostEntry类可以轻松地查询主机名和IP地址之间的映射关系。下面是一个使用IPHostEntry类查询本机IP地址的示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> hostname = <span class="string">&quot;www.google.com&quot;</span>;</span><br><span class="line">        IPHostEntry hostEntry = Dns.GetHostEntry(hostname);</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;Hostname: <span class="subst">&#123;hostEntry.HostName&#125;</span>&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;IP Addresses:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (IPAddress address <span class="keyword">in</span> hostEntry.AddressList)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;- <span class="subst">&#123;address&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Aliases:&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">string</span> <span class="keyword">alias</span> <span class="keyword">in</span> hostEntry.Aliases)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;- <span class="subst">&#123;<span class="keyword">alias</span>&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个示例中，首先通过<code>Dns.GetHostName()</code>方法获取本机的主机名，然后使用<code>Dns.GetHostEntry()</code>方法查询主机名对应的IP地址信息，最后遍历<code>ipEntry.AddressList</code>数组输出所有IP地址。</p><h2 id="DNS类"><a href="#DNS类" class="headerlink" title="DNS类"></a>DNS类</h2><p>Unity中的DNS类（Domain Name System）用于将域名解析为IP地址。DNS类提供了与域名解析相关的静态方法和属性。</p><p>其中最常用的方法是<code>GetHostEntry(string hostNameOrAddress)</code>，它可以根据提供的域名或IP地址获取主机的详细信息。返回一个<code>IPHostEntry</code>对象，该对象包含了主机的IP地址列表、别名列表、主机名等信息。如果解析失败，则会抛出一个异常。</p><p>以下是一个使用DNS类获取主机信息的例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codeusing System.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> </span><br><span class="line">        &#123;</span><br><span class="line">            IPHostEntry host = Dns.GetHostEntry(<span class="string">&quot;www.example.com&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Host name: &quot;</span> + host.HostName);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;IP addresses:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (IPAddress ip <span class="keyword">in</span> host.AddressList)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;  &quot;</span> + ip);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Could not resolve host: &quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用DNS类的<code>GetHostEntry</code>方法获取”<a href="http://www.example.c椓梃o緁m琠"癎憪,柏憪蹟緁星氝i氋晁p硢ꇁ掤.如果解析失败,则会打印出错误信息./">www.example.com"主机的信息，并打印出主机名和IP地址列表。如果解析失败，则会打印出错误信息。</a></p><h3 id="异步获取"><a href="#异步获取" class="headerlink" title="异步获取"></a>异步获取</h3><p>在Unity中，可以使用DNS类的异步方法来获取主机信息，这样可以避免在主线程中执行阻塞操作。异步方法有两种：<code>GetHostEntryAsync(string hostNameOrAddress)</code>和<code>GetHostAddressesAsync(string hostNameOrAddress)</code>。</p><p><code>GetHostEntryAsync</code>方法返回一个<code>Task&lt;IPHostEntry&gt;</code>，表示获取主机信息的异步操作。可以使用<code>await</code>关键字来等待操作完成，然后访问<code>Result</code>属性获取返回结果。以下是一个使用<code>GetHostEntryAsync</code>方法的例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codeusing System.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">GetHostInfoAsync</span>(<span class="params"><span class="built_in">string</span> hostname</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> </span><br><span class="line">        &#123;</span><br><span class="line">            IPHostEntry host = <span class="keyword">await</span> Dns.GetHostEntryAsync(hostname);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Host name: &quot;</span> + host.HostName);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;IP addresses:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (IPAddress ip <span class="keyword">in</span> host.AddressList)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;  &quot;</span> + ip);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Could not resolve host: &quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> GetHostInfoAsync(<span class="string">&quot;www.example.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个异步方法<code>GetHostInfoAsync</code>，它使用<code>GetHostEntryAsync</code>方法获取主机信息，并打印出主机名和IP地址列表。在<code>Main</code>方法中，我们使用<code>await</code>关键字等待<code>GetHostInfoAsync</code>方法完成。</p><p>另外一个异步方法<code>GetHostAddressesAsync</code>返回一个<code>Task&lt;IPAddress[]&gt;</code>，表示获取IP地址列表的异步操作。可以使用<code>await</code>关键字来等待操作完成，然后访问<code>Result</code>属性获取返回结果。以下是一个使用<code>GetHostAddressesAsync</code>方法的例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codeusing System.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Example</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">GetHostInfoAsync</span>(<span class="params"><span class="built_in">string</span> hostname</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> </span><br><span class="line">        &#123;</span><br><span class="line">            IPAddress[] addresses = <span class="keyword">await</span> Dns.GetHostAddressesAsync(hostname);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;IP addresses:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (IPAddress ip <span class="keyword">in</span> addresses)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;  &quot;</span> + ip);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Could not resolve host: &quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> GetHostInfoAsync(<span class="string">&quot;www.example.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个异步方法<code>GetHostInfoAsync</code>，它使用<code>GetHostAddressesAsync</code>方法获取IP地址列表，并打印出IP地址列表。在<code>Main</code>方法中，我们使用<code>await</code>关键字等待<code>GetHostInfoAsync</code>方法完成。</p><h1 id="序列化和反序列化二进制数据"><a href="#序列化和反序列化二进制数据" class="headerlink" title="序列化和反序列化二进制数据"></a>序列化和反序列化二进制数据</h1><h2 id="BitConverter类"><a href="#BitConverter类" class="headerlink" title="BitConverter类"></a>BitConverter类</h2><p>所处命名空间System</p><p>Unity 的 <code>BitConverter</code> 类提供了一些静态方法，可以将基本数据类型（如整数、浮点数、布尔值等）与字节数组之间进行转换。其主要作用是将数据类型转换成字节数组，或者将字节数组转换成对应的数据类型。</p><p><code>BitConverter</code> 类包含以下方法：</p><ul><li><code>GetBytes(bool value)</code>：将布尔值转换为字节数组。</li><li><code>GetBytes(char value)</code>：将 Unicode 字符转换为字节数组。</li><li><code>GetBytes(double value)</code>：将双精度浮点数转换为字节数组。</li><li><code>GetBytes(float value)</code>：将单精度浮点数转换为字节数组。</li><li><code>GetBytes(int value)</code>：将 32 位有符号整数转换为字节数组。</li><li><code>GetBytes(long value)</code>：将 64 位有符号整数转换为字节数组。</li><li><code>GetBytes(short value)</code>：将 16 位有符号整数转换为字节数组。</li><li><code>ToBoolean(byte[] value, int startIndex)</code>：从指定字节数组的指定位置开始，将字节转换为布尔值。</li><li><code>ToChar(byte[] value, int startIndex)</code>：从指定字节数组的指定位置开始，将两个字节转换为 Unicode 字符。</li><li><code>ToDouble(byte[] value, int startIndex)</code>：从指定字节数组的指定位置开始，将八个字节转换为双精度浮点数。</li><li><code>ToSingle(byte[] value, int startIndex)</code>：从指定字节数组的指定位置开始，将四个字节转换为单精度浮点数。</li><li><code>ToInt32(byte[] value, int startIndex)</code>：从指定字节数组的指定位置开始，将四个字节转换为 32 位有符号整数。</li><li><code>ToInt64(byte[] value, int startIndex)</code>：从指定字节数组的指定位置开始，将八个字节转换为 64 位有符号整数。</li><li><code>ToInt16(byte[] value, int startIndex)</code>：从指定字节数组的指定位置开始，将两个字节转换为 16 位有符号整数。</li></ul><p>需要注意的是，字节数组的大小应该与要转换的数据类型的大小匹配，否则可能会导致转换失败。此外，字节数组的字节顺序（即大小端问题）也需要注意，需要根据实际情况进行转换。</p><h2 id="Encoding类"><a href="#Encoding类" class="headerlink" title="Encoding类"></a>Encoding类</h2><p>所处命名空间System.Text</p><p>在 Unity 中，<code>System.Text.Encoding</code> 类是用于实现字符编码和解码的类，它支持各种不同的编码方式，例如 ASCII、UTF8、UTF16 等。使用该类可以将字符串编码为字节数组或从字节数组解码为字符串。</p><p>下面是 <code>Encoding</code> 类的一些常用方法：</p><ul><li><code>GetEncoding</code>：根据指定编码名称或编码的代码页获取编码实例。</li><li><code>GetBytes</code>：将指定的字符串编码为字节数组。</li><li><code>GetString</code>：将指定的字节数组解码为字符串。</li><li><code>GetChars</code>：将指定的字节数组解码为字符数组。</li><li><code>GetByteCount</code>：计算对指定字符串进行编码所产生的字节数。</li><li><code>GetCharCount</code>：计算对指定字节数组进行解码所产生的字符数。</li></ul><p>例如，以下代码演示了如何使用 <code>Encoding</code> 类将一个字符串转换为字节数组：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codeusing System.Text;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="built_in">byte</span>[] bytes = Encoding.UTF8.GetBytes(str);</span><br></pre></td></tr></table></figure><p>在上述代码中，我们使用 <code>Encoding.UTF8</code> 获取 UTF8 编码实例，并使用 <code>GetBytes</code> 方法将字符串 <code>str</code> 编码为一个字节数组 <code>bytes</code>。</p><p>同样，以下代码演示了如何使用 <code>Encoding</code> 类将一个字节数组转换为字符串：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codeusing System.Text;</span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">33</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> str = Encoding.UTF8.GetString(bytes);</span><br></pre></td></tr></table></figure><p>在上述代码中，我们使用 <code>Encoding.UTF8</code> 获取 UTF8 编码实例，并使用 <code>GetString</code> 方法将字节数组 <code>bytes</code> 解码为一个字符串 <code>str</code>。</p><h2 id="BinaryFormatter类"><a href="#BinaryFormatter类" class="headerlink" title="BinaryFormatter类"></a>BinaryFormatter类</h2><p>一般不使用，因为与其他平台存在兼容性问题</p><p>Unity中的BinaryFormatter类是一个序列化和反序列化二进制数据的工具类。它可以将一个对象序列化成二进制流并保存到文件中，也可以将一个二进制流反序列化成对象。</p><p>BinaryFormatter类通常与MemoryStream类一起使用。我们可以创建一个MemoryStream对象并使用BinaryFormatter将一个对象序列化到该流中，或者使用BinaryFormatter将一个从文件读取的二进制流反序列化为对象。</p><p>下面是一个示例，演示如何使用BinaryFormatter序列化和反序列化一个自定义类对象：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codeusing System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyData</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> value1;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> value2;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> value3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BinaryFormatterExample</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span> &#123;</span><br><span class="line">        MyData data = <span class="keyword">new</span> MyData();</span><br><span class="line">        data.value1 = <span class="number">123</span>;</span><br><span class="line">        data.value2 = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line">        data.value3 = <span class="number">3.14f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Serialize the object to a file</span></span><br><span class="line">        BinaryFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">        <span class="keyword">using</span> (FileStream stream = <span class="keyword">new</span> FileStream(<span class="string">&quot;data.bin&quot;</span>, FileMode.Create)) &#123;</span><br><span class="line">            formatter.Serialize(stream, data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Deserialize the object from the file</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream stream = <span class="keyword">new</span> FileStream(<span class="string">&quot;data.bin&quot;</span>, FileMode.Open)) &#123;</span><br><span class="line">            MyData loadedData = (MyData)formatter.Deserialize(stream);</span><br><span class="line">            Debug.Log(loadedData.value1);</span><br><span class="line">            Debug.Log(loadedData.value2);</span><br><span class="line">            Debug.Log(loadedData.value3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们创建了一个名为MyData的自定义类，并将它的三个字段值设置为一些随意的值。然后，我们使用BinaryFormatter将这个对象序列化到名为”data.bin”的文件中，并使用同样的方式反序列化它，最后在控制台输出序列化后的对象的字段值。</p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>Unity中的File类提供了一系列静态方法，用于在磁盘上创建、读取、写入和删除文件。</p><p>以下是一些常用的方法：</p><ul><li>File.Create(string path)：创建一个指定路径下的空文件，并返回一个FileStream对象，该对象可用于向文件中写入数据。</li><li>File.Open(string path, FileMode mode)：打开一个指定路径的文件，可以读取或写入数据。mode参数指定打开文件的模式，例如，FileMode.Open表示以只读方式打开文件，FileMode.Create表示如果文件不存在则创建文件。</li><li>File.ReadAllBytes(string path)：读取一个文件，并将其内容作为字节数组返回。</li><li>File.ReadAllText(string path)：读取一个文件，并将其内容作为字符串返回。</li><li>File.WriteAllBytes(string path, byte[] bytes)：将一个字节数组写入一个指定路径的文件中。</li><li>File.WriteAllText(string path, string contents)：将一个字符串写入一个指定路径的文件中。</li><li>File.Delete(string path)：删除一个指定路径的文件。</li></ul><p>需要注意的是，File类提供的方法都是同步方法，即执行文件操作时会阻塞当前线程，直到操作完成。如果需要进行异步操作，可以使用异步IO或协程等技术。此外，File类也不支持对Unity项目中StreamingAssets文件夹下的文件进行写入操作，只能读取其中的文件。</p><h3 id="File类的异步操作"><a href="#File类的异步操作" class="headerlink" title="File类的异步操作"></a>File类的异步操作</h3><p>Unity的File类提供了异步读取和写入文件的功能，可以通过调用Async方法实现。其中，异步读取文件可以使用AsyncRead方法，异步写入文件可以使用AsyncWrite方法。</p><p>以下是AsyncRead和AsyncWrite方法的详细说明：</p><ol><li>AsyncRead方法</li></ol><p>AsyncRead方法用于异步读取指定文件中的所有字节。该方法接受三个参数：</p><ul><li>文件路径：要读取的文件的路径。</li><li>回调函数：读取完成后执行的回调函数。</li><li>用户定义的对象：传递给回调函数的自定义数据。</li></ul><p>示例代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typescriptCopy codebyte[] bytes = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">string</span> path = <span class="string">&quot;FilePath&quot;</span>;</span><br><span class="line">File.AsyncRead(path, (result) =&gt; &#123;</span><br><span class="line">    bytes = result.bytes;</span><br><span class="line">    <span class="comment">// 处理读取到的字节</span></span><br><span class="line">&#125;, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ol><li>AsyncWrite方法</li></ol><p>AsyncWrite方法用于异步写入指定字节到指定文件中。该方法接受四个参数：</p><ul><li>文件路径：要写入的文件的路径。</li><li>写入的字节数组：要写入的字节数组。</li><li>回调函数：写入完成后执行的回调函数。</li><li>用户定义的对象：传递给回调函数的自定义数据。</li></ul><p>示例代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codebyte[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">string</span> path = <span class="string">&quot;FilePath&quot;</span>;</span><br><span class="line">File.AsyncWrite(path, bytes, (result) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 处理写入完成后的操作</span></span><br><span class="line">&#125;, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是，异步读取和写入文件的操作需要一定的时间，因此在执行异步操作期间，主线程仍然可以执行其他操作。当异步操作完成后，将通过回调函数通知主线程，然后可以在回调函数中继续处理数据。</p><h2 id="FileStream类"><a href="#FileStream类" class="headerlink" title="FileStream类"></a>FileStream类</h2><p>Unity的FileStream类是用于读取和写入文件的类，它继承自System.IO.Stream类，支持同步和异步的读写操作。</p><p>使用FileStream类可以实现更加灵活、高效的文件操作，可以读写任何类型的数据，包括字节、字符、文本和二进制文件等。</p><p>下面是一些常用的FileStream类方法：</p><ol><li>构造函数：FileStream(string path, FileMode mode)。用于创建一个FileStream对象，并打开指定文件。path参数是文件路径，mode参数指定打开文件的方式，如Create、Open、Append等。</li><li>Read(byte[] buffer, int offset, int count)：从当前FileStream对象读取指定数目的字节数据，并将其存储在缓冲区（byte数组）中。offset参数指定从缓冲区的哪个位置开始存储数据，count参数指定要读取的字节数。</li><li>Write(byte[] buffer, int offset, int count)：将指定数目的字节数据从缓冲区（byte数组）写入到当前FileStream对象中。offset参数指定从缓冲区的哪个位置开始读取数据，count参数指定要写入的字节数。</li><li>Seek(long offset, SeekOrigin origin)：将文件指针移动到指定位置。offset参数指定要移动的字节数，origin参数指定从哪里开始移动，如Begin、Current、End等。</li><li>Flush()：将缓冲区的数据写入到文件中。</li><li>Close()：关闭当前FileStream对象。</li></ol><p>FileStream类还支持异步操作，可以使用BeginRead、BeginWrite等方法进行异步读写。在异步读写完成后，可以通过调用EndRead、EndWrite方法来获取读写的结果。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileReadWrite</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 文件名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> fileName = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> filePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> fileContent = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取文件路径</span></span><br><span class="line">        filePath = Application.persistentDataPath + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入文件</span></span><br><span class="line">        WriteToFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取文件</span></span><br><span class="line">        ReadFromFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteToFile</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建FileStream对象</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(filePath, FileMode.Create))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 将字符串转换为字节数组</span></span><br><span class="line">            <span class="built_in">byte</span>[] data = Encoding.UTF8.GetBytes(fileContent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入数据到文件</span></span><br><span class="line">            fs.Write(data, <span class="number">0</span>, data.Length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭文件流</span></span><br><span class="line">            fs.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReadFromFile</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建FileStream对象</span></span><br><span class="line">        <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(filePath, FileMode.Open))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 创建字节数组，用于存储读取到的数据</span></span><br><span class="line">            <span class="built_in">byte</span>[] data = <span class="keyword">new</span> <span class="built_in">byte</span>[fs.Length];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从文件中读取数据</span></span><br><span class="line">            fs.Read(data, <span class="number">0</span>, data.Length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将字节数组转换为字符串</span></span><br><span class="line">            <span class="built_in">string</span> content = Encoding.UTF8.GetString(data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出文件内容</span></span><br><span class="line">            Debug.Log(<span class="string">&quot;File content: &quot;</span> + content);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭文件流</span></span><br><span class="line">            fs.Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="MemoryStream类"><a href="#MemoryStream类" class="headerlink" title="MemoryStream类"></a>MemoryStream类</h2><p>在Unity中，MemoryStream类是一个流，用于读写内存中的数据，而不是将数据读写到磁盘文件中。它派生自Stream类，可以将byte数组读入内存中，并提供了对byte数组的访问方法。</p><p>MemoryStream类有多个构造函数，其中最常用的一个是接受一个byte数组作为参数的构造函数，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codebyte[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream(buffer);</span><br></pre></td></tr></table></figure><p>这样就可以将一个byte数组读入内存中，并使用MemoryStream类对其进行读写操作了。</p><p>MemoryStream类提供了多个方法，用于读写内存中的数据，例如：</p><ul><li><code>Read(byte[] buffer, int offset, int count)</code>：从MemoryStream中读取数据并存储到指定的byte数组中，其中<code>offset</code>表示从数组中的哪个位置开始存储，<code>count</code>表示要读取的数据长度。</li><li><code>Write(byte[] buffer, int offset, int count)</code>：将指定的byte数组写入MemoryStream中，其中<code>offset</code>表示从数组中的哪个位置开始读取，<code>count</code>表示要写入的数据长度。</li><li><code>ToArray()</code>：将MemoryStream中的所有数据以byte数组的形式返回。</li><li><code>GetBuffer()</code>：获取MemoryStream中的内部缓冲区。</li></ul><p>下面是一个使用MemoryStream类的简单例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">csharpCopy codebyte[] buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream(buffer);</span><br><span class="line"><span class="built_in">byte</span>[] readBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">3</span>];</span><br><span class="line">memoryStream.Read(readBuffer, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">Debug.Log(<span class="string">&quot;读取到的数据：&quot;</span> + <span class="built_in">string</span>.Join(<span class="string">&quot;,&quot;</span>, readBuffer)); <span class="comment">// 输出 读取到的数据：1,2,3</span></span><br></pre></td></tr></table></figure><p>这段代码先创建了一个byte数组，然后使用MemoryStream将其读入内存中。接着使用Read方法从MemoryStream中读取前3个字节的数据，并将其存储到一个新的byte数组中，最后将读取到的数据以字符串的形式输出。</p><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p>字符编码指的是将字符集中的字符编码为计算机可识别的数字表示形式的过程。常见的字符编码有ASCII码、Unicode和UTF-8等。下面简要介绍一下这些常见的字符编码：</p><ol><li>ASCII码：是一种基础字符编码，它使用7位二进制数来表示字符，一共可以表示128个字符，包括英文字母、数字、符号等。ASCII码是美国标准信息交换码，但是只能表示英语等西欧语言。</li><li>Unicode：是一种国际化的字符集标准，可以表示全球范围内的所有字符，包括中文、日文、韩文等。Unicode编码有多种实现方式，其中比较常用的是UTF-8和UTF-16。</li><li>UTF-8：是一种变长的Unicode编码，可以使用1到4个字节表示一个字符，根据不同的字符范围来选择使用不同长度的字节。UTF-8兼容ASCII码，可以使用ASCII码的方式表示英文字母、数字、符号等，因此在网络传输和存储中广泛使用。</li><li>UTF-16：是一种定长的Unicode编码，使用2个字节表示一个字符，适用于处理较少字符但是需要快速访问的场景，如程序内部字符串操作。</li></ol><p>在实际编程中，需要根据具体场景和需求选择合适的字符编码。</p><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>序列化对象</p><p>1.确定字节数字的长度</p><p>2.创建容器</p><p>3.将对象中的元素依次加入容器中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> 序列化 : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayesrInfo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> lev;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">short</span> atk;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        PlayesrInfo info = <span class="keyword">new</span> PlayesrInfo();</span><br><span class="line">        info.lev = <span class="number">10</span>;</span><br><span class="line">        info.name = <span class="string">&quot;dsf&quot;</span>;</span><br><span class="line">        info.atk = <span class="number">100</span>;</span><br><span class="line">        info.sex = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> indexNum = <span class="keyword">sizeof</span>(<span class="built_in">int</span>) + <span class="comment">//lev int 类型</span></span><br><span class="line">                      <span class="keyword">sizeof</span>(<span class="built_in">int</span>) +  <span class="comment">//name字符串的长度</span></span><br><span class="line">                      Encoding.UTF8.GetBytes(info.name).Length +<span class="comment">//字符串具体字节长度</span></span><br><span class="line">                      <span class="keyword">sizeof</span>(<span class="built_in">short</span>) +<span class="comment">//atk short类型</span></span><br><span class="line">                      <span class="keyword">sizeof</span>(<span class="built_in">bool</span>);  <span class="comment">//sex bool 类型</span></span><br><span class="line">        <span class="built_in">byte</span>[] playerBytes=<span class="keyword">new</span> <span class="built_in">byte</span>[indexNum];</span><br><span class="line">        <span class="comment">//已经占用的字节</span></span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//等级</span></span><br><span class="line">        BitConverter.GetBytes(info.lev).CopyTo(playerBytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">int</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">byte</span>[] strBytes=Encoding.UTF8.GetBytes(info.name);</span><br><span class="line">        <span class="built_in">int</span> num=strBytes.Length; </span><br><span class="line">        <span class="comment">//姓名字节长度</span></span><br><span class="line">        BitConverter.GetBytes(num).CopyTo(playerBytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">int</span>);</span><br><span class="line">        strBytes.CopyTo(playerBytes, index);</span><br><span class="line">        index += num;</span><br><span class="line"></span><br><span class="line">        BitConverter.GetBytes(info.atk).CopyTo(playerBytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">short</span>);</span><br><span class="line"></span><br><span class="line">        BitConverter.GetBytes(info.sex).CopyTo(playerBytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">bool</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="序列化BaseData基类"><a href="#序列化BaseData基类" class="headerlink" title="序列化BaseData基类"></a>序列化BaseData基类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Rendering;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseData</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">int</span> <span class="title">GetBytesNum</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">byte</span>[] <span class="title">Writeing</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteInt</span>(<span class="params"><span class="built_in">byte</span>[] bytes,<span class="built_in">int</span> <span class="keyword">value</span>,<span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BitConverter.GetBytes(<span class="keyword">value</span>).CopyTo(bytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteBool</span>(<span class="params"><span class="built_in">byte</span>[] bytes, <span class="built_in">bool</span> <span class="keyword">value</span>, <span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BitConverter.GetBytes(<span class="keyword">value</span>).CopyTo(bytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">bool</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteFloat</span>(<span class="params"><span class="built_in">byte</span>[] bytes, <span class="built_in">float</span> <span class="keyword">value</span>, <span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BitConverter.GetBytes(<span class="keyword">value</span>).CopyTo(bytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">float</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteChar</span>(<span class="params"><span class="built_in">byte</span>[] bytes, <span class="built_in">char</span> <span class="keyword">value</span>, <span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BitConverter.GetBytes(<span class="keyword">value</span>).CopyTo(bytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">char</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteDouble</span>(<span class="params"><span class="built_in">byte</span>[] bytes, <span class="built_in">double</span> <span class="keyword">value</span>, <span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BitConverter.GetBytes(<span class="keyword">value</span>).CopyTo(bytes, index);</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">double</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteByte</span>(<span class="params"><span class="built_in">byte</span>[] bytes, <span class="built_in">byte</span> <span class="keyword">value</span>, <span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        bytes[index] = <span class="keyword">value</span>;</span><br><span class="line">        index += <span class="keyword">sizeof</span>(<span class="built_in">byte</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteString</span>(<span class="params"><span class="built_in">byte</span>[] bytes, <span class="built_in">string</span> <span class="keyword">value</span>, <span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] strBytes=Encoding.UTF8.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        WriteInt(bytes, strBytes.Length, <span class="keyword">ref</span> index);</span><br><span class="line">        strBytes.CopyTo(bytes, index);</span><br><span class="line">        index += strBytes.Length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">WriteData</span>(<span class="params"><span class="built_in">byte</span>[] bytes ,BaseData data,<span class="keyword">ref</span> <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> baseDataBytes = data.Writeing();</span><br><span class="line">        baseDataBytes.CopyTo(bytes, index);</span><br><span class="line">        index += baseDataBytes.Length;c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> 反序列化 : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//字节数组转化为非字符串</span></span><br><span class="line">        <span class="built_in">byte</span>[] bytes1=BitConverter.GetBytes(<span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> i=BitConverter.ToInt32(bytes1, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符数组转化为字符串</span></span><br><span class="line">        <span class="built_in">byte</span>[] bytes2 = Encoding.UTF8.GetBytes(<span class="string">&quot;1236sdf6asf&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> s=Encoding.UTF8.GetString(bytes2,<span class="number">0</span>,bytes2.Length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h2 id="Socket类的API"><a href="#Socket类的API" class="headerlink" title="Socket类的API"></a>Socket类的API</h2><p>Unity提供了Socket类来进行网络编程，该类封装了系统底层的套接字（socket）函数。可以通过该类的实例来建立网络连接、发送和接收数据等。下面是一些常用的Socket类的API：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#### Socket构造：</span><br><span class="line"></span><br><span class="line">Socket(AddressFamily, SocketType, ProtocolType)：</span><br><span class="line"></span><br><span class="line">构造函数，创建一个新的 Socket 对象。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#### AddressFamily</span><br><span class="line"></span><br><span class="line">在C#中，`AddressFamily`是一个枚举类型，用于表示套接字的地址族，也就是用于表示IP地址的协议族。</span><br><span class="line"></span><br><span class="line">常用的几个值包括：</span><br><span class="line"></span><br><span class="line">`AddressFamily.InterNetwork`：表示IP版本4协议（IPv4）</span><br><span class="line"></span><br><span class="line">`AddressFamily.InterNetworkV6`：表示IP版本6协议（IPv6）</span><br><span class="line"></span><br><span class="line">`AddressFamily.Unix`：表示UNIX本地域套接字（Unix Domain Socket）</span><br><span class="line"></span><br><span class="line">`AddressFamily.IPX`：表示IPX协议</span><br><span class="line"></span><br><span class="line">`AddressFamily.NetBios`：表示NetBios协议</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#### SocketType</span><br><span class="line"></span><br><span class="line">在Socket编程中，SocketType是用于指定Socket实例的套接字类型，它通常用于创建Socket实例时的参数。SocketType常用的类型有：</span><br><span class="line"></span><br><span class="line">1. Stream：流套接字，提供面向连接、可靠的、基于字节流的传输，支持TCP协议。</span><br><span class="line">2. Dgram：数据报套接字，提供无连接、不可靠的、固定长度的消息传输，支持UDP协议。</span><br><span class="line">3. Raw：原始套接字，提供对原始网络协议的访问。</span><br><span class="line">4. Rdm：提供可靠的、面向连接的、固定长度的数据包传输。</span><br><span class="line">5. Seqpacket：提供可靠的、面向连接的、带序号的数据包传输。</span><br><span class="line"></span><br><span class="line">不同的SocketType类型适用于不同的网络通信场景，根据需要进行选择。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#### ProtocolType</span><br><span class="line"></span><br><span class="line">在Socket编程中，ProtocolType表示所使用的协议类型。它是一个枚举类型，包含了许多协议类型的值，例如TCP、UDP、ICMP等。</span><br><span class="line"></span><br><span class="line">下面是一些常用的ProtocolType值：</span><br><span class="line"></span><br><span class="line">- TCP：TCP协议，提供面向连接的可靠数据传输。</span><br><span class="line">- UDP：UDP协议，提供无连接的不可靠数据传输。</span><br><span class="line">- ICMP：ICMP协议，用于控制IP数据报的发送和接收。常用于网络诊断和故障排除。</span><br><span class="line">- IGMP：IGMP协议，用于管理IP组播传输的成员关系。</span><br><span class="line">- IP：IP协议，是互联网协议族的核心协议之一，提供分组交换、寻址等基本功能。</span><br><span class="line"></span><br><span class="line">在使用Socket类时，需要根据具体的需求选择合适的ProtocolType值。例如，如果需要进行可靠的面向连接的数据传输，应该选择TCP协议；如果需要进行实时性要求不高的数据传输，可以选择UDP协议。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Connect(IPAddress, int) 或Connect(string, int)：</span><br><span class="line"></span><br><span class="line">连接到指定的远程主机和端口号。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Bind(EndPoint)：</span><br><span class="line">用于服务端</span><br><span class="line">将套接字绑定到本地 IP 地址和端口号。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Listen(int)：</span><br><span class="line">设置最大连接数</span><br><span class="line">开始侦听传入的连接请求。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Accept()：</span><br><span class="line"></span><br><span class="line">接受传入的连接请求。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">### SocketFlags</span><br><span class="line"></span><br><span class="line">在Socket编程中，SocketFlags是一个枚举类型，用于指定Socket操作的一些选项和标志，例如：</span><br><span class="line"></span><br><span class="line">- None：不指定任何标志。</span><br><span class="line">- OutOfBand：用于发送或接收带外数据。</span><br><span class="line">- Peek：接收数据但不从接收队列中删除。</span><br><span class="line">- DontRoute：不通过路由发送数据。</span><br><span class="line">- Truncated：表示接收的数据被截断。</span><br><span class="line">- ControlDataTruncated：表示接收的控制数据被截断。</span><br><span class="line"></span><br><span class="line">使用Socket.Send和Socket.Receive方法时，可以通过最后一个参数flags来指定SocketFlags中的一个或多个选项和标志。例如：</span><br><span class="line"></span><br><span class="line">```c#</span><br><span class="line">csharpCopy codebyte[] data = Encoding.UTF8.GetBytes(&quot;Hello, world!&quot;);</span><br><span class="line">int sent = socket.Send(data, SocketFlags.None);</span><br><span class="line">csharpCopy codebyte[] buffer = new byte[1024];</span><br><span class="line">int received = socket.Receive(buffer, SocketFlags.None);</span><br><span class="line">string message = Encoding.UTF8.GetString(buffer, 0, received);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">这里的SocketFlags被设置为None，表示没有指定任何标志。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Receive(byte[]) 或 Receive(byte[], SocketFlags)：</span><br><span class="line"></span><br><span class="line">从套接字接收数据。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Send(byte[]) 或 Send(byte[], SocketFlags)：</span><br><span class="line"></span><br><span class="line">发送数据到远程主机。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">### Close()：</span><br><span class="line"></span><br><span class="line">关闭套接字连接。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">### Shutdown()：</span><br><span class="line">Unity中的Socket.Shutdown()方法用于禁用Socket对象的发送和接收，允许当前连接的一方（客户端或服务器端）单方面终止连接。</span><br><span class="line"></span><br><span class="line">该方法有一个参数，表示需要禁用的Socket对象的通信方式，其可能的取值如下：</span><br><span class="line"></span><br><span class="line">SocketShutdown.Send：禁用Socket对象的发送。</span><br><span class="line">SocketShutdown.Receive：禁用Socket对象的接收。</span><br><span class="line">SocketShutdown.Both：同时禁用Socket对象的发送和接收。</span><br><span class="line"></span><br><span class="line">该方法的使用示例：</span><br><span class="line">// 禁用Socket对象的发送和接收</span><br><span class="line">clientSocket.Shutdown(SocketShutdown.Both);</span><br><span class="line"></span><br><span class="line">// 关闭Socket连接</span><br><span class="line">clientSocket.Close();</span><br></pre></td></tr></table></figure><h2 id="创建Socket的TCP和UDP套接字"><a href="#创建Socket的TCP和UDP套接字" class="headerlink" title="创建Socket的TCP和UDP套接字"></a>创建Socket的TCP和UDP套接字</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Socket socket_TCP=<span class="keyword">new</span> Socket(AddressFamily.InterNetwork,</span><br><span class="line">           SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">       Socket socket_UDP=<span class="keyword">new</span> Socket(AddressFamily.InterNetwork,</span><br><span class="line">           SocketType.Dgram, ProtocolType.Udp);</span><br></pre></td></tr></table></figure><h2 id="客户端和服务端常用方法"><a href="#客户端和服务端常用方法" class="headerlink" title="客户端和服务端常用方法"></a>客户端和服务端常用方法</h2><p>以下是 Socket 客户端和服务端常用的一些方法：</p><p><strong>客户端：</strong></p><ol><li><code>Socket(IPAddress address, int port)</code>：创建一个套接字对象，用于连接指定的 IP 地址和端口。</li><li><code>Connect(IPAddress address, int port)</code>：连接到指定的 IP 地址和端口。</li><li><code>Send(byte[] buffer)</code>：将字节数组发送给服务器。</li><li><code>Receive(byte[] buffer)</code>：从服务器接收数据到指定的字节数组中。</li><li><code>Close()</code>：关闭套接字连接。</li></ol><p><strong>服务端：</strong></p><ol><li><code>Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)</code>：创建一个套接字对象，用于监听指定的地址族、套接字类型和协议类型。</li><li><code>Bind(IPEndPoint localEP)</code>：将套接字绑定到指定的本地 IP 地址和端口。</li><li><code>Listen(int backlog)</code>：开始监听传入的连接请求。</li><li><code>Accept()</code>：接受一个传入的连接请求，并返回一个新的套接字对象，用于与客户端通信。</li><li><code>Send(byte[] buffer)</code>：将字节数组发送给客户端。</li><li><code>Receive(byte[] buffer)</code>：从客户端接收数据到指定的字节数组中。</li><li><code>Close()</code>：关闭套接字连接。</li></ol><p>这些方法是 Socket 编程中常用的一些方法，但是实际上 Socket 类提供的方法非常多，可以根据具体的需求选择合适的方法。同时需要注意的是，在使用 Socket 类的过程中需要注意线程安全和异常处理等问题，以保证程序的可靠性和稳定性。</p><h3 id="客户端方法："><a href="#客户端方法：" class="headerlink" title="客户端方法："></a>客户端方法：</h3><ol><li><code>Socket(IPAddress addressFamily, SocketType socketType, ProtocolType protocolType)</code>：创建一个新的Socket实例，并指定其AddressFamily、SocketType和ProtocolType。</li><li><code>Socket.Connect(IPEndPoint remoteEP)</code>：使用指定的远程终结点连接Socket。</li><li><code>Socket.Connect(IPAddress address, int port)</code>：使用指定的IP地址和端口号连接Socket。</li><li><code>Socket.BeginConnect(IPEndPoint remoteEP, AsyncCallback callback, object state)</code>：异步连接到远程终结点。</li><li><code>Socket.BeginConnect(IPAddress address, int port, AsyncCallback callback, object state)</code>：异步连接到指定的IP地址和端口。</li><li><code>Socket.Send(byte[] buffer, int offset, int size, SocketFlags socketFlags)</code>：将数据发送到已连接的Socket。</li><li><code>Socket.BeginSend(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state)</code>：异步将数据发送到已连接的Socket。</li><li><code>Socket.Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags)</code>：从已连接的Socket接收数据。</li><li><code>Socket.BeginReceive(byte[] buffer, int offset, int size, SocketFlags socketFlags, AsyncCallback callback, object state)</code>：异步从已连接的Socket接收数据。</li><li><code>Socket.Close()</code>：关闭Socket连接并释放所有相关资源。</li><li><code>Socket.Shutdown(SocketShutdown how)</code>：禁用指定的Socket上的发送和&#x2F;或接收，并关闭连接。</li><li><code>Socket.Disconnect(bool reuseSocket)</code>：断开与远程主机的连接。</li><li><code>Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue)</code>：设置Socket选项的布尔值。</li><li><code>Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue)</code>：设置Socket选项的整数值。</li><li><code>Socket.SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue)</code>：设置Socket选项的字节数组值。</li><li><code>Socket.GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName)</code>：获取Socket选项的值。</li><li><code>Socket.Available</code>：获取已经被接收但还没有被读取的数据的字节数。</li><li><code>Socket.RemoteEndPoint</code>：获取远程终结点的信息。</li><li><code>Socket.LocalEndPoint</code>：获取本地终结点的信息。</li></ol><h3 id="服务端方法："><a href="#服务端方法：" class="headerlink" title="服务端方法："></a>服务端方法：</h3><ul><li><code>Socket(AddressFamily, SocketType, ProtocolType)</code>：创建新的 <code>Socket</code> 对象，其中 <code>AddressFamily</code> 指定地址族（如 <code>AddressFamily.InterNetwork</code> 表示 IPv4），<code>SocketType</code> 指定套接字类型（如 <code>SocketType.Stream</code> 表示流式套接字），<code>ProtocolType</code> 指定协议类型（如 <code>ProtocolType.Tcp</code> 表示使用 TCP 协议）。</li><li><code>Bind(EndPoint)</code>：将套接字绑定到指定的本地端点（如 <code>IPEndPoint</code> 对象）。</li><li><code>Listen(int)</code>：开始在套接字上侦听传入的连接请求，并指定等待队列的最大长度。</li><li><code>Accept()</code>：接受一个传入的连接请求，返回一个新的 <code>Socket</code> 对象来表示与客户端的通信。</li><li><code>AcceptAsync(SocketAsyncEventArgs)</code>：异步接受一个传入的连接请求，当操作完成时调用指定的 <code>SocketAsyncEventArgs</code> 对象的完成回调。</li><li><code>Receive(byte[])</code>：接收指定字节数的数据，返回实际接收到的字节数。</li><li><code>Receive(byte[], SocketFlags)</code>：接收指定字节数的数据，可以指定附加的 <code>SocketFlags</code> 参数，返回实际接收到的字节数。</li><li><code>Receive(byte[], int, int, SocketFlags)</code>：接收指定数量的数据，可以指定接收数据的偏移量和附加的 <code>SocketFlags</code> 参数，返回实际接收到的字节数。</li><li><code>ReceiveAsync(SocketAsyncEventArgs)</code>：异步接收数据，当操作完成时调用指定的 <code>SocketAsyncEventArgs</code> 对象的完成回调。</li><li><code>Send(byte[])</code>：发送指定的字节数组，返回实际发送的字节数。</li><li><code>Send(byte[], SocketFlags)</code>：发送指定的字节数组，可以指定附加的 <code>SocketFlags</code> 参数，返回实际发送的字节数。</li><li><code>Send(byte[], int, int, SocketFlags)</code>：发送指定数量的数据，可以指定发送数据的偏移量和附加的 <code>SocketFlags</code> 参数，返回实际发送的字节数。</li><li><code>SendAsync(SocketAsyncEventArgs)</code>：异步发送数据，当操作完成时调用指定的 <code>SocketAsyncEventArgs</code> 对象的完成回调。</li><li><code>Close()</code>：关闭套接字连接。</li></ul><h2 id="Socket编程客户端和服务端需要做什么"><a href="#Socket编程客户端和服务端需要做什么" class="headerlink" title="Socket编程客户端和服务端需要做什么"></a>Socket编程客户端和服务端需要做什么</h2><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>1.创建套接字Socket</p><p>2.使用Connect方法与服务端相连</p><p>3.使用Send和Receive相关方法收发数据</p><p>4.使用Shutdown方法释放连接</p><p>5.关闭套接字</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>1.创建套接字Socket</p><p>2.使用Bind方法将套接字和本地地址绑定</p><p>3.使用Listen方法进行监听</p><p>4.使用Accept方法等待客户端连接</p><p>5.建立连接，Accept返回新的套接字</p><p>6.使用Send和Receive相关方法收发数据</p><p>7.使用Shutdown方法释放连接</p><p>8.关闭套接字</p><h2 id="TCP协议的三次握手在Scoket编程中的体现"><a href="#TCP协议的三次握手在Scoket编程中的体现" class="headerlink" title="TCP协议的三次握手在Scoket编程中的体现"></a>TCP协议的三次握手在Scoket编程中的体现</h2><p>在 Socket 编程中，TCP 协议三次握手是在客户端与服务端建立连接时的一个过程，可以通过以下步骤来体现：</p><ol><li>客户端调用 <code>Socket.Connect()</code> 方法向服务端发起连接请求，向服务端发送 SYN 包（同步包）；</li><li>服务端接收到客户端的 SYN 包后，调用 <code>Socket.Accept()</code> 方法接受客户端的连接请求，并回复 SYN+ACK 包（同步+确认包）给客户端；</li><li>客户端接收到服务端的 SYN+ACK 包后，回复 ACK 包（确认包）给服务端，建立起连接。</li></ol><p>这样，客户端与服务端之间就建立了一条可靠的 TCP 连接，并可以进行数据的传输。三次握手过程的目的是为了确保客户端和服务端都能够接收到对方的请求和回应，并建立起可靠的连接。</p><h2 id="TCP协议四次挥手在Socket编程中的具体体现"><a href="#TCP协议四次挥手在Socket编程中的具体体现" class="headerlink" title="TCP协议四次挥手在Socket编程中的具体体现"></a>TCP协议四次挥手在Socket编程中的具体体现</h2><p>TCP协议四次挥手是指TCP连接的关闭过程，它的具体体现如下：</p><ol><li>客户端发送FIN包。客户端调用<code>Socket.Shutdown</code>方法，发送FIN包给服务端，表示客户端已经没有数据需要发送了。</li><li>服务端收到FIN包。服务端收到客户端的FIN包后，返回一个ACK确认包，表示已经收到了客户端的FIN包。</li><li>服务端发送FIN包。服务端发送FIN包给客户端，表示服务端已经没有数据需要发送了。</li><li>客户端收到FIN包。客户端收到服务端的FIN包后，返回一个ACK确认包，表示已经收到了服务端的FIN包。此时客户端和服务端的连接关闭。</li></ol><p>在Socket编程中，客户端和服务端的关闭流程如下：</p><p>客户端关闭：</p><ol><li>调用<code>Socket.Shutdown(SocketShutdown.Both)</code>方法，表示客户端已经没有数据需要发送了。</li><li>调用<code>Socket.Close()</code>方法，关闭客户端连接。</li></ol><p>服务端关闭：</p><ol><li>调用<code>Socket.Shutdown(SocketShutdown.Both)</code>方法，表示服务端已经没有数据需要发送了。</li><li>调用<code>Socket.Close()</code>方法，关闭服务端连接。</li></ol><p>在关闭连接的过程中，调用<code>Shutdown</code>方法是可选的，但是建议在关闭连接之前调用<code>Shutdown</code>方法发送FIN包，以保证连接的正确关闭。</p><h1 id="Socket编程客户端服务端代码"><a href="#Socket编程客户端服务端代码" class="headerlink" title="Socket编程客户端服务端代码"></a>Socket编程客户端服务端代码</h1><h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Server.Sockets</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SocketTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoTest</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1.创建套接字</span></span><br><span class="line">            Socket socketTcp = <span class="keyword">new</span> Socket</span><br><span class="line">               (AddressFamily.InterNetwork, SocketType.Stream</span><br><span class="line">                , ProtocolType.Tcp);</span><br><span class="line">            <span class="comment">//2.用Bind方法将套接字与本地地址进行绑定</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                IPEndPoint iPEndPoint =<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8080</span>);</span><br><span class="line">                socketTcp.Bind(iPEndPoint);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;绑定错误&quot;</span>+e.Message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.用Listen方法进行监听</span></span><br><span class="line">            socketTcp.Listen(<span class="number">1024</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;服务端绑定监听结束，等待客户端接入&quot;</span>);</span><br><span class="line">            <span class="comment">//4.用Accept方法等待客户端进行连接</span></span><br><span class="line">            <span class="comment">//5.建立连接Accept返回新的套接字</span></span><br><span class="line">            Socket socketClien=socketTcp.Accept();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;有客户端接入了&quot;</span>);</span><br><span class="line">            <span class="comment">//6.使用Send方法和Receive方法收发数据</span></span><br><span class="line">            <span class="comment">//发送</span></span><br><span class="line">            socketClien.Send(Encoding.UTF8.GetBytes(<span class="string">&quot;欢迎接入服务器&quot;</span>));</span><br><span class="line">            <span class="comment">//接受信息</span></span><br><span class="line">            <span class="built_in">byte</span>[] result = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//接受信息会返回信息的长度</span></span><br><span class="line">            <span class="built_in">int</span> resceiveNum=socketClien.Receive(result);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接收到客户端<span class="subst">&#123;socketClien.RemoteEndPoint&#125;</span>&quot;</span> +</span><br><span class="line">                <span class="string">$&quot;发送的信息<span class="subst">&#123;Encoding.UTF8.GetString(result,<span class="number">0</span>,resceiveNum)&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="comment">//7.使用Shutdown方法释放连接</span></span><br><span class="line">            socketClien.Shutdown(SocketShutdown.Both);</span><br><span class="line">            <span class="comment">//8.关闭套接字</span></span><br><span class="line">            socketClien.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Server.Sockets</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SocketTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.创建套接字Socket</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            2.使用Bind方法将套接字和本地地址绑定</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            3.使用Listen方法进行监听</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            4.使用Accept方法等待客户端连接(会进行阻塞等待)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            5.建立连接，Accept返回新的套接字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            6.使用Send和Receive相关方法收发数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            7.使用Shutdown方法释放连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            8.关闭套接字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoTest</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1.创建套接字</span></span><br><span class="line">            Socket socketTcp = <span class="keyword">new</span> Socket</span><br><span class="line">               (AddressFamily.InterNetwork, SocketType.Stream</span><br><span class="line">                , ProtocolType.Tcp);</span><br><span class="line">            <span class="comment">//2.用Bind方法将套接字与本地地址进行绑定</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                IPEndPoint iPEndPoint =<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8080</span>);</span><br><span class="line">                socketTcp.Bind(iPEndPoint);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;绑定错误&quot;</span>+e.Message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.用Listen方法进行监听</span></span><br><span class="line">            socketTcp.Listen(<span class="number">1024</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;服务端绑定监听结束，等待客户端接入&quot;</span>);</span><br><span class="line">            <span class="comment">//4.用Accept方法等待客户端进行连接</span></span><br><span class="line">            <span class="comment">//5.建立连接Accept返回新的套接字</span></span><br><span class="line">            Socket socketClien=socketTcp.Accept();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;有客户端接入了&quot;</span>);</span><br><span class="line">            <span class="comment">//6.使用Send方法和Receive方法收发数据</span></span><br><span class="line">            <span class="comment">//发送</span></span><br><span class="line">            socketClien.Send(Encoding.UTF8.GetBytes(<span class="string">&quot;欢迎接入服务器&quot;</span>));</span><br><span class="line">            <span class="comment">//接受信息</span></span><br><span class="line">            <span class="built_in">byte</span>[] result = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">//接受信息会返回信息的长度</span></span><br><span class="line">            <span class="built_in">int</span> resceiveNum=socketClien.Receive(result);</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;接收到客户端<span class="subst">&#123;socketClien.RemoteEndPoint&#125;</span>&quot;</span> +</span><br><span class="line">                <span class="string">$&quot;发送的信息<span class="subst">&#123;Encoding.UTF8.GetString(result,<span class="number">0</span>,resceiveNum)&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="comment">//7.使用Shutdown方法释放连接</span></span><br><span class="line">            socketClien.Shutdown(SocketShutdown.Both);</span><br><span class="line">            <span class="comment">//8.关闭套接字</span></span><br><span class="line">            socketClien.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="服务端实现多客户端接入"><a href="#服务端实现多客户端接入" class="headerlink" title="服务端实现多客户端接入"></a>服务端实现多客户端接入</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Reflection.Metadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Server.Sockets</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SocketTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.创建套接字Socket</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            2.使用Bind方法将套接字和本地地址绑定</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            3.使用Listen方法进行监听</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            4.使用Accept方法等待客户端连接(会进行阻塞等待)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            5.建立连接，Accept返回新的套接字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            6.使用Send和Receive相关方法收发数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            7.使用Shutdown方法释放连接</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            8.关闭套接字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">public</span> List&lt;Socket&gt; clientSocket = <span class="keyword">new</span> List&lt;Socket&gt;();</span><br><span class="line">        <span class="comment">//声明Socket</span></span><br><span class="line">        Socket Serversocket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">        <span class="built_in">bool</span> isColse = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//使用多线程进行多连接</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoTest2</span>()</span></span><br><span class="line">        &#123; </span><br><span class="line">            <span class="comment">//绑定本地地址</span></span><br><span class="line">            IPEndPoint endPoint = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">            Serversocket.Bind(endPoint);</span><br><span class="line">            <span class="comment">//监听</span></span><br><span class="line">            Serversocket.Listen(<span class="number">1024</span>);</span><br><span class="line">            <span class="comment">//连接</span></span><br><span class="line">            Thread Acceptthread = <span class="keyword">new</span> Thread(AcceptThread);</span><br><span class="line">            Acceptthread.Start();</span><br><span class="line">            <span class="comment">//收发信息</span></span><br><span class="line">            Thread Receivethread = <span class="keyword">new</span> Thread(ReceiveThread);</span><br><span class="line">            Receivethread.Start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> input = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                 input=Console.ReadLine();</span><br><span class="line">                <span class="keyword">if</span>(input.Equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.isColse = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;clientSocket.Count;i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        clientSocket[i].Shutdown(SocketShutdown.Both);</span><br><span class="line">                        clientSocket[i].Close();</span><br><span class="line">                    &#125;</span><br><span class="line">                    clientSocket.Clear();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AcceptThread</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(!isColse) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> socket = Serversocket.Accept();</span><br><span class="line">                <span class="keyword">this</span>.clientSocket.Add(socket);</span><br><span class="line">                socket.Send(Encoding.UTF8.GetBytes(<span class="string">&quot;欢迎你来连入服务端&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceiveThread</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] result = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="built_in">int</span> i;</span><br><span class="line">            Socket socket;</span><br><span class="line">            <span class="built_in">int</span> receiveNum;</span><br><span class="line">            <span class="keyword">while</span>(!isColse) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;clientSocket.Count;i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    socket = clientSocket[i];</span><br><span class="line">                    <span class="keyword">if</span>(socket.Available!=<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        receiveNum=socket.Receive(result);</span><br><span class="line">                        ThreadPool.QueueUserWorkItem(HandleReceive,(socket,Encoding.UTF8.GetString(result,<span class="number">0</span>, receiveNum)));</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleReceive</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            (Socket s,<span class="built_in">string</span> receive) info = ((Socket,<span class="built_in">string</span>))obj;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;收到客户端：<span class="subst">&#123;info.s.RemoteEndPoint&#125;</span>的信息：<span class="subst">&#123;info.receive&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="http://example.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络编程" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>医药问答环境配置</title>
    <link href="http://example.com/2023/04/03/%E5%8C%BB%E8%8D%AF%E9%97%AE%E7%AD%94%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2023/04/03/%E5%8C%BB%E8%8D%AF%E9%97%AE%E7%AD%94%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2023-04-03T07:32:41.000Z</published>
    <updated>2023-04-03T07:33:13.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://example.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经02</title>
    <link href="http://example.com/2023/03/22/%E9%9D%A2%E7%BB%8F02/"/>
    <id>http://example.com/2023/03/22/%E9%9D%A2%E7%BB%8F02/</id>
    <published>2023-03-22T08:45:11.000Z</published>
    <updated>2023-03-28T11:54:20.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="混合树"><a href="#混合树" class="headerlink" title="混合树"></a>混合树</h1><p>原文链接：<a href="https://blog.csdn.net/zhenghongzhi6/article/details/106749398">https://blog.csdn.net/zhenghongzhi6/article/details/106749398</a></p><p>2D混合树有三个选项，分别是：</p><p><img src="/../images/image-20230322211043241.png" alt="image-20230322211043241"></p><p>2D Simple Directional（2D简单方向）：当你的运动代表不同的方向，如“向前走”，“向后走”，“向左走”，“向右走”，或“向上瞄准”，“向下瞄准”，“左瞄“和”右瞄“。当然了，可以在(0,0)处包含一个默认动作类似“空闲站立”或“直线瞄准”。与1D混合树不同的是，2D Simple Directional不是在同一个方向上的多个动作，比如“走”和“跑”。</p><p>2D Freeform Directional（2D自由方向）：动画运用有不同的方向时，也可以使用这种混合类型：可以在同一个方向上有多个运动，例如“走”和“跑”。在Freeform Directional类型中，(0，0)位置必须包含一个默认动作，如“空闲站立”。</p><p>2D Freeform Cartesian（2D自由笛卡儿）：当混合的2个参数不代表不同的方向时使用。使用Freeform Cartesian，参数X和Y可以表示不同的概念类型，例如角速度和线速度。举个例子：“向前走不转向”，“向前跑不转向”，“向前走并右转”，“向前跑并右转”等动作。</p><p>如果角色动画包含站立、走、跑和转向，非常符合2D Freeform Cartesian这种类型。后面以2D Freeform Cartesian举例说明。</p><p>将Blend Type设置为2D Freeform Cartesian</p><p>设置Blend Type之后，首先需要两个参数控制这个Blend Tree。</p><p>在Animator中添加两个float参数：Turn和Forward分别代表转向速度和向前行进速度，然后将这两个值设置为混合树的参数（注意顺序）</p><p><img src="/../images/image-20230322213130302.png" alt="image-20230322213130302"></p><p><img src="/../images/image-20230322213145954.png" alt="image-20230322213145954"></p><p><img src="/../images/image-20230322213159742.png" alt="image-20230322213159742"></p><h1 id="动画层级"><a href="#动画层级" class="headerlink" title="动画层级"></a>动画层级</h1><p>Layer<br>Unity 使用“Layer”（动画层）来管理身体不同部位的复杂状态机。比如用户可以使用下半身动画层来管理走动 、 跑动动作；使用上半身动画层来控制投掷 、射击动作。</p><p>动画层面板各项参数说明如下：</p><p><img src="/../images/image-20230322212049728.png" alt="image-20230322212049728"></p><h1 id="IK动画"><a href="#IK动画" class="headerlink" title="IK动画"></a>IK动画</h1><p><img src="/../images/image-20230322213003249.png" alt="image-20230322213003249"></p><h1 id="MatchTarget"><a href="#MatchTarget" class="headerlink" title="MatchTarget"></a>MatchTarget</h1><p><img src="/../images/image-20230322213050149.png" alt="image-20230322213050149"></p><h1 id="C-List的底层实现"><a href="#C-List的底层实现" class="headerlink" title="C#List的底层实现"></a>C#List的底层实现</h1><p>List为可变长数组，没有元素时长度为1，初始长度为4，之后每次空间不足时会创建一个新的List，长度为原List的二倍，原List被丢弃等待GC，所以如果知道List要使用的长度，创建时初始化长度可以提高性能</p><p>List Add o1</p><p>insert，remove操作会进行移位的处理，为o（n）</p><h1 id="C-Dictionary实现原理"><a href="#C-Dictionary实现原理" class="headerlink" title="C# Dictionary实现原理"></a>C# Dictionary实现原理</h1><p>key-value是通过哈希算法（如Md5算法）来确定的</p><p>为了节省哈希表的空间使用哈希桶算法</p><p>使用拉链法处理冲突</p><p>当数组满或碰撞次数过多时直接申请两倍两倍大小空间的哈希桶和entity数组，并将现有元素拷贝到现有数组中</p><h1 id="C-string的底层实现"><a href="#C-string的底层实现" class="headerlink" title="C#string的底层实现"></a>C#string的底层实现</h1><p>在C#中，string是一种不可变的引用类型，它表示一个字符串对象。在底层实现上，string是由.NET Framework提供的一个封装了字符数组的对象，这个字符数组包含了字符串的实际内容。</p><p>每个string对象都具有一个固定的长度和内容。当需要修改字符串时，由于string是不可变的，所以不能在原有的string对象上直接进行修改，而是需要创建一个新的string对象来存储修改后的字符串内容。</p><p>由于字符串不可变，所以在进行字符串拼接、替换等操作时，C#编译器会在底层自动创建一个新的string对象来存储结果。这种不可变性保证了字符串在多线程环境下的安全性，同时也避免了由于字符串的修改导致的内存泄漏等问题。</p><p>需要注意的是，由于string对象是不可变的，因此如果需要频繁进行字符串拼接等操作，会产生大量的临时string对象，从而导致内存分配和垃圾回收开销增加。为了避免这种问题，可以使用StringBuilder类来创建可变的字符串缓冲区，从而避免频繁的内存分配和垃圾回收。</p><h1 id="C-StringBuilder的底层实现"><a href="#C-StringBuilder的底层实现" class="headerlink" title="C#StringBuilder的底层实现"></a>C#StringBuilder的底层实现</h1><p>C#中的StringBuilder类是用于创建可变字符串的类，其底层实现是由.NET Framework提供的。StringBuilder类实现可变字符串的方式是通过维护一个字符数组来存储字符串内容。当需要对字符串进行修改时，StringBuilder会在字符数组上直接修改字符串内容，而不是创建新的字符串对象。这样就避免了频繁创建和销毁字符串对象所产生的性能开销。</p><p>StringBuilder类中主要包含以下几个成员变量和方法：</p><ol><li>char[] m_ChunkChars：用于存储字符串内容的字符数组。</li><li>int m_ChunkLength：表示字符数组中已使用的长度。</li><li>int m_MaxCapacity：表示字符数组的最大长度。</li><li>void ExpandByABlock(int minBlockCharCount)：用于在字符数组末尾添加一个新块，以扩展字符数组的长度。</li><li>void ReplaceBufferInternal(char[] newBuffer)：用于替换字符数组。</li></ol><p>StringBuilder类中主要的方法包括：</p><ol><li>Append：用于在字符串的末尾添加新的内容。</li><li>Insert：用于在字符串的指定位置插入新的内容。</li><li>Remove：用于从字符串中移除指定位置开始的指定长度的内容。</li><li>Replace：用于替换字符串中的指定内容。</li></ol><p>需要注意的是，在C#中使用StringBuilder类进行字符串操作时，由于StringBuilder类是可变字符串，因此可以避免频繁创建和销毁字符串对象所产生的性能开销。因此，在需要频繁进行字符串拼接等操作时，建议使用StringBuilder类来提高程序的性能表现。</p><h1 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h1><p>hash函数算法：hash桶算法，平方取中算法，随机数算法</p><p>发生hash冲突算法：开放地址法，拉链法，再哈希法</p><h1 id="程序集"><a href="#程序集" class="headerlink" title="程序集"></a>程序集</h1><p>为unity2017.3发布的新功能</p><p>下面文中我们就简称<strong>ADF</strong>。<br>得益于此功能，开发者可以在一个文件夹中自定义程序集。定义明晰的依赖关系，可以确保脚本更改后，只会重新生成必需的程序集，减少编译时间。<br>项目越大脚本越多，编译时间必然会越长。在进行项目迭代时，这很容易制约效率，因此设置好程序集定义文件可以提高工作效率，减少脚本编译的时间。</p><h2 id="使用程序集优点："><a href="#使用程序集优点：" class="headerlink" title="使用程序集优点："></a>使用程序集优点：</h2><p>1.减少修改脚本时的编译时间</p><p>2.可以方便进行代码的复用</p><p>3.可以在unity中使用C++编写的脚本</p><h2 id="自定义程序集"><a href="#自定义程序集" class="headerlink" title="自定义程序集"></a>自定义程序集</h2><p><img src="/../images/image-20230323170335414.png" alt="image-20230323170335414"></p><p><img src="/../images/image-20230323170352429.png" alt="image-20230323170352429"></p><p><img src="/../images/image-20230323170448727.png" alt="image-20230323170448727"></p><h1 id="Mono和IL2CPP的区别"><a href="#Mono和IL2CPP的区别" class="headerlink" title="Mono和IL2CPP的区别"></a>Mono和IL2CPP的区别</h1><p>C#是微软推出的基于.NET的高级面向对象语言，开始只能运行于window，后来引用mono，在各个平台实现了mono虚拟机，这个C#实现了跨平台</p><p>mono的核心原理为将C#代码转化为IL（公共中间代码），然后通过各个平台的虚拟机解释执行，在运行解释过程中，转化为机器码</p><p>il2cpp在各个平台，将C#转化为C++的代码，在各个平台的C++编辑器直接转化为机器码</p><p>mono和il2cpp生成机器码的时机一个比较慢一个比较快，所以一个性能好一个性能差</p><p>il2cpp生成的项目是不可以反编译的，mono是可以反编译出来的</p><p>Mono 使用即时 (JIT) 编译，在运行时按需编译代码。执行慢，安装快，空间小</p><p>IL2CPP 使用提前 (AOT) 编译，在运行之前编译整个应用程序。 执行快，安装慢，空间大</p><h1 id="unity图集"><a href="#unity图集" class="headerlink" title="unity图集"></a>unity图集</h1><p>原文链接：<a href="https://blog.csdn.net/z2014z/article/details/119654256">https://blog.csdn.net/z2014z/article/details/119654256</a></p><h2 id="Unity图集简介及使用"><a href="#Unity图集简介及使用" class="headerlink" title="Unity图集简介及使用"></a>Unity图集简介及使用</h2><p>定义<br>图集是将很多零碎的2D小图整合成一张大图，方便unity渲染合批，降低渲染消耗。</p><p>优势<br>1.UI的合批处理，减少DrawCall</p><p>多张图片需要多次DrawCall，合并成一张大图只需要调用一次DrawCall</p><p>2.减少对内存的占用</p><p>OpenGL每张贴图都需要设置为2的N次方才能使用，假设有宽高分别为100x100、10x10的两张图片，如果不合成大贴图，那么就需要分别使用128x128和16x16的图片，会浪费一部分内存空间。</p><p>如果是使用一张大图的话，就可以将两张图片打到128x128的图集，进而减少内存的占用。</p><p>3.提升效率</p><p>图片尺寸为2的次幂时，GPU处理起来会快很多，小图不可能做不到每张图都是2的次幂的，但打成一张大图就可以。</p><h2 id="图集的建立"><a href="#图集的建立" class="headerlink" title="图集的建立"></a>图集的建立</h2><p>在Unity中，可以使用Sprite Packer（精灵图集打包工具）来建立图集。Sprite Packer可以将多个小图片打包成一张大图，以减少内存占用和提高游戏性能。下面是使用Sprite Packer建立图集的步骤：</p><ol><li>将多个小图片导入到Unity中，并设置它们的Texture Type为Sprite（2D and UI）。</li><li>在Unity菜单栏中选择Window &gt; 2D &gt; Sprite Packer，打开Sprite Packer窗口。</li><li>在Sprite Packer窗口中，点击Add button，将需要打包的小图片添加到打包列表中。</li><li>选择打包算法：在Sprite Packer窗口中，可以选择不同的打包算法，例如Max Rects和Basic等。可以根据实际需求来选择打包算法。</li><li>点击打包按钮：在Sprite Packer窗口中，点击Pack按钮，Unity将会自动将小图片打包成一张大图。</li><li>设置Sprite的Packing Tag：在小图片的Sprite Importer中，可以设置Packing Tag，将它们打包到同一个图集中。</li><li>使用图集：在代码中，可以使用Resources.Load方法或AssetBundle来加载图集，并通过Sprite的名称来访问具体的Sprite。</li></ol><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul><li>在打包小图片之前，可以对它们进行一些优化处理，例如调整大小、压缩格式等，以减少内存占用。</li><li>打包算法的选择会影响图集的质量和效率，需要根据实际需求进行选择。</li><li>图集的大小和数量应该适度，避免过大或过多导致内存占用过高。</li><li>图集的命名应该有意义，便于识别和管理。</li></ul><p><img src="/../images/image-20230324153301653.png" alt="image-20230324153301653"></p><h1 id="DrawCall"><a href="#DrawCall" class="headerlink" title="DrawCall"></a>DrawCall</h1><p>每次cpu准备数据并通知Gpu的过程为Drawcall</p><p>DrawCall为什么会影响运行效率：工作原理，为了CPU和GPU可以进行并行工作，就需要一个命令缓冲区，就是由CPU向其中添加命令，然后又GPU从中读取命令，这样就实现了通过CPU准备数据，通知GPU进行渲染。</p><p>在每次调用DrawCall之前，CPU需要向GPU发送很多内容，主要是包括数据，渲染状态（就是设置对象需要的材质纹理等），命令等。</p><h2 id="减少drawCall"><a href="#减少drawCall" class="headerlink" title="减少drawCall"></a>减少drawCall</h2><p>1.合批（Batching）</p><p>合批是将多个网格或者物体合并成一个单独的网格或物体，从而减少Draw Call的数量。Unity支持两种类型的合批：静态合批和动态合批。静态合批适用于静态网格或物体，动态合批适用于动态或运行时生成的网格或物体。</p><p>2.减少材质数量</p><p>每个材质都需要一个Draw Call来进行渲染，因此减少材质的数量可以减少Draw Call的数量。如果一个物体有多个材质，可以将它们合并成一个材质来减少Draw Call。</p><p>3.合并纹理</p><p>如果多个物体使用的纹理相同，可以将它们合并成一个大的纹理来减少Draw Call的数量。</p><p>4.减少使用透明度</p><p>使用透明度的物体需要进行排序和混合，因此会增加Draw Call的数量。如果可以不使用透明度，尽量减少使用透明度的物体数量。</p><p>5.减少动态光源</p><p>动态光源需要计算阴影，因此会增加Draw Call的数量。如果可以，尽量减少动态光源的数量。</p><p>6.使用LOD（Level of Detail）</p><p>在远处的物体可以使用较低分辨率的模型来代替高分辨率的模型，从而减少Draw Call的数量。这个方法可以通过使用Unity的LOD功能来实现。</p><h1 id="任务系统的实现"><a href="#任务系统的实现" class="headerlink" title="任务系统的实现"></a>任务系统的实现</h1><p>我的任务系统是根据MVC的设计思想来进行设计的；</p><p>数据层：</p><p>任务数据来源于服务器和配置表的数据。由服务器的任务数据，驱动客户端任务面板的显示，这块是通过观察者实现的。而对于其他UI业务系统，比如NPC头顶的任务状态的显示，也是通过观察者进行事件广播的，从而更新其他UI业务系统的显示。</p><p>显示层和控制层：</p><p>通过一个主任务面板，获取数据层的数据来显示当前任务明细，并且通过订阅任务数据层的事件，来对任务状态进行更新。界面的逻辑也是写在此处的。</p><p>外设了个任务管理器：</p><p>是该任务系统的入口，比如显示和关闭任务系统等；还有任务与对应NPC的绑定；以及提供一些公共的接口供外部访问，比如获取某任务的状态，任务的获取和交付等。</p><h1 id="协程的底层实现"><a href="#协程的底层实现" class="headerlink" title="协程的底层实现"></a>协程的底层实现</h1><p><img src="/../images/image-20230324153239628.png" alt="image-20230324153239628"></p><h1 id="awake和start的区别"><a href="#awake和start的区别" class="headerlink" title="awake和start的区别"></a>awake和start的区别</h1><p>awake用于处理组件的引用关系，或挂载组件，</p><p>start在OnEnable之后执行</p><p>awake、enable、start依照次顺序执行，awake会在一开始的时候就会执行，但start则是在被激活之后才会调用，因此在编写代码的时候在给脚本挂载的物体做初始化，就用awake，用于挂载组件或者处理引用关系，start是物体“可见”之后才会被调用即setActive(“true”)之后才会调用（当然一开始就是非隐藏的话会按照顺序执行），面试的时候有问过一个如果物体被遮挡了那么还会执行对应的脚本嘛？（答案是会执行，毕竟遮蔽不是不激活</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://example.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>极世界总结</title>
    <link href="http://example.com/2023/03/09/%E6%9E%81%E4%B8%96%E7%95%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2023/03/09/%E6%9E%81%E4%B8%96%E7%95%8C%E6%80%BB%E7%BB%93/</id>
    <published>2023-03-09T04:43:52.000Z</published>
    <updated>2023-03-20T11:45:04.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据库使用EF  EntityFrameworkCore</span><br><span class="line">json使用JsonDotNet</span><br><span class="line">协议使用protobuf</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="EF数据库EntityFrameworkCore"><a href="#EF数据库EntityFrameworkCore" class="headerlink" title="EF数据库EntityFrameworkCore"></a><code>EF</code>数据库<code>EntityFrameworkCore</code></h1><p><a href="https://blog.csdn.net/qq_43024228/article/details/108568621">(12条消息) EntityFrameworkCore生成数据库方法_entity生成数据库_Danny_hi的博客-CSDN博客</a></p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>使用<code>protobuf</code> 协议 使用Socket编程</p><p>进行了粘包处理 </p><p>消息分发器</p><p><img src="/../images/image-20230309164609843.png" alt="image-20230309164609843"></p><p>服务器分发线程池多线程服务器的分发</p><h1 id="用户系统"><a href="#用户系统" class="headerlink" title="用户系统"></a>用户系统</h1><p><img src="/../images/image-20230309173927503.png" alt="image-20230309173927503"></p><h2 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">从 UI 读取出注册/登录信息，由 UserService 进行信息发送，由于用户登录为第一次向服务器发送信息，并且向服务端的连接是异步的，所以需要判断是否已经连接，如果没有连接先进行连接在进行信息发送.</span><br><span class="line"></span><br><span class="line">当服务器收到信息时，进行信息校验。</span><br><span class="line"></span><br><span class="line">登录判断用户名密码是否正确，判断玩家是否已经登录，如正确则初始化玩家信息，并将玩家信息返回给客户端；</span><br><span class="line"></span><br><span class="line">注册则判断该用户名是否已经注册，校验完成则初始化玩家信息，并将玩家信息读入数据库；</span><br><span class="line"></span><br><span class="line">注册时客户端向服务端发送密码信息之前可以进行一次加密，保证信息安全</span><br></pre></td></tr></table></figure><h1 id="角色选择"><a href="#角色选择" class="headerlink" title="角色选择"></a>角色选择</h1><p>角色创建流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">角色创建</span><br><span class="line"></span><br><span class="line">选择要创建的角色类型，输入角色名，向服务端发送信息进行创建，服务端进行校验，校验成功将新创建的角色信息读入数据库中，并返回新的当前User的角色列表，客户端接受到新的角色列表后进行角色列表的更新</span><br></pre></td></tr></table></figure><h2 id="Render-Texture"><a href="#Render-Texture" class="headerlink" title="Render Texture"></a>Render Texture</h2><p>创建Render Texture。</p><p><img src="/../images/image-20230309193730446.png" alt="image-20230309193730446"></p><p>Render Texture赋值给顶视角摄像机的Target Texture。</p><p><img src="/../images/image-20230309193806915.png" alt="image-20230309193806915"></p><p>3、使用Raw Image显示<br>创建一个RawImage</p><p>将RenderTexture赋值给RawImage的Texture属性</p><p><img src="/../images/image-20230309193822003.png" alt="image-20230309193822003">原文链接：<a href="https://blog.csdn.net/linxinfa/article/details/108865127">https://blog.csdn.net/linxinfa/article/details/108865127</a></p><h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><p><img src="/../images/image-20230309214508125.png" alt="image-20230309214508125"></p><p>通过配置获取Port</p><p><img src="/../images/image-20230309214534406.png" alt="image-20230309214534406"></p><p><img src="/../images/image-20230309214610229.png" alt="image-20230309214610229"></p><h1 id="进入主城"><a href="#进入主城" class="headerlink" title="进入主城"></a>进入主城</h1><h2 id="进入主城流程"><a href="#进入主城流程" class="headerlink" title="进入主城流程"></a>进入主城流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">选择角色进入主城时，传入的角色Id为当前玩家角色列表的Id，因为服务器中存了与只对应的列表，可以确定哪个角色进入地图，服务端 Mapserver 传递给地图将玩家进入信息传递给当前地图中的所有玩家</span><br><span class="line"></span><br><span class="line">角色进入信息传递到客户端MapServer中，判断是否为当前角色，是的话更新当前地图Id，将角色添加到CharacterManager中，添加到字典，并通过GameObjectManager创建角色实体，判断角色是否为当前角色，来确定是否添加CharacterInputControler 和 CameraControl </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在客户端和服务端之间使用自定义vector进行传输，可以在一定程度上减少浮点数运算产生的误差</span><br><span class="line"></span><br><span class="line">Character继承自Entity实体，Entity负责位置 速度 NEntity 数据用于信息传递</span><br><span class="line">Character设置 name NCharacterInfo</span><br><span class="line">EntityControler 控制角色实体的状态更新</span><br><span class="line"></span><br><span class="line">左上角角色信息更新：当User当前角色更新时，更新左上角角色信息</span><br><span class="line"></span><br><span class="line">角色血条：创建世界空间的UI</span><br></pre></td></tr></table></figure><h2 id="离开游戏流程"><a href="#离开游戏流程" class="headerlink" title="离开游戏流程"></a>离开游戏流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">向服务端发送角色离开信息，服务端在CharacterManager去除角色，MapManager去除角色，并通知角色所在地图中的所有玩家角色离开的信息，发送到客户端；客户端接收到信息，判断是否为当前角色，不为当前角色，将离开的角色在CharacterManager中删除，并删除角色实体，否则删除所有角色，并返回选择角色界面</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230310104415170.png" alt="image-20230310104415170"></p><h2 id="对象关系"><a href="#对象关系" class="headerlink" title="对象关系"></a>对象关系</h2><p>Entity ： 位置方向速度 NEntity 用于信息传递</p><p>CharacterBase ： characterDefine 存放配置表中的信息， NCharacterInfo用于信息传递，角色类型</p><p>Character： DCharacter 存放数据库中的信息  和当前角色的背包信息，队伍信息等</p><p><img src="/../images/image-20230309215104920.png" alt="image-20230309215104920"></p><p><img src="/../images/image-20230309215304550.png" alt="image-20230309215304550"></p><h2 id="this索引器"><a href="#this索引器" class="headerlink" title="this索引器"></a>this索引器</h2><p>MapManager   This索引器</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">get</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">set</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230310094618412.png" alt="image-20230310094618412"></p><h2 id="血条面向摄像机"><a href="#血条面向摄像机" class="headerlink" title="血条面向摄像机"></a>血条面向摄像机</h2><p>lookAt</p><p><img src="/../images/image-20230310124801702.png" alt="image-20230310124801702"></p><p>forword</p><p><img src="/../images/image-20230310125242134.png" alt="image-20230310125242134"></p><h1 id="小地图"><a href="#小地图" class="headerlink" title="小地图"></a>小地图</h1><h2 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入一个新地图时，更新User中的CurrentMap，当角色创建时，更新MinMapManager中的玩家实体，当进入新的场景的时候，更新地图的包围盒，并更新当前的地图图片；当玩家移动时，计算出玩家的位置，将玩家的位置设为小地图图片的中心位置，当玩家转动时，更新小地图上的指针方向为玩家的朝向</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新朝向</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.arrow.transform.eulerAngles = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, -playerTransform.eulerAngles.y);</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230310162913414.png" alt="image-20230310162913414"></p><p><img src="/../images/image-20230310154623187.png" alt="image-20230310154623187"></p><h2 id="地图制作方案"><a href="#地图制作方案" class="headerlink" title="地图制作方案"></a>地图制作方案</h2><p><img src="/../images/image-20230310154733951.png" alt="image-20230310154733951"></p><h1 id="移动同步"><a href="#移动同步" class="headerlink" title="移动同步"></a>移动同步</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用Entity进行角色的状态同步，CharacterInputController接受玩家输入发生Entity状态改变 ，向服务端发送EntitySync信息，服务端接受后传到MapServer中玩家对应Map对Entity进行更新，并发送消息给地图中的其他玩家，其他玩家客户端收到同步信息后，在EntityManager中找到对应EntityController同步Entity信息，并更新角色实体的状态</span><br></pre></td></tr></table></figure><p>定义NEntiy和同步事件</p><p><img src="/../images/image-20230310203937011.png" alt="image-20230310203937011"></p><p><img src="/../images/image-20230310204013376.png" alt="image-20230310204013376"></p><p>同步请求和响应</p><p><img src="/../images/image-20230310204123047.png" alt="image-20230310204123047"></p><p><img src="/../images/image-20230310175947702.png" alt="image-20230310175947702"></p><p><img src="/../images/image-20230310184912202.png" alt="image-20230310184912202"></p><p>同步的变量</p><p><img src="/../images/image-20230310171652229.png" alt="image-20230310171652229"></p><h2 id="状态同步和帧同步"><a href="#状态同步和帧同步" class="headerlink" title="状态同步和帧同步"></a>状态同步和帧同步</h2><p><img src="/../images/image-20230310170736984.png" alt="image-20230310170736984"></p><h1 id="地图传送"><a href="#地图传送" class="headerlink" title="地图传送"></a>地图传送</h1><h1 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在配置表中配置传送点，传送点Id和传入的地方，在地图中设置传送Object，通过编译器拓展方法像配置表中读入传送点的位置和朝向信息，用于设置玩家传入地图时的位置和朝向，使用触发器进行触发，，当有物体进行触发时，判断对象身上是否带有Charactercontroller，当带有是说明对象为当前玩家，向服务端发送地图传送信息，服务端进行校验：传送点是否存在，传送到地点是否存在等，然后再MapManager中退出现在所在地图，设置玩家位置为传送点配置中的位置和宣战后加入传送到的地图，并通知地图中的其他玩家完成地图传送，并更新小地图资源</span><br></pre></td></tr></table></figure><h2 id="画模型边界"><a href="#画模型边界" class="headerlink" title="画模型边界"></a>画模型边界</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmos</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Gizmos.color = Color.blue;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.mesh!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Gizmos.DrawWireMesh(<span class="keyword">this</span>.mesh, </span><br><span class="line">                <span class="keyword">this</span>.transform.position + Vector3.up * <span class="keyword">this</span>.transform.localPosition.y * <span class="number">.5</span>f, </span><br><span class="line">                <span class="keyword">this</span>.transform.rotation, <span class="keyword">this</span>.transform.localScale);</span><br><span class="line">        &#125;</span><br><span class="line">        UnityEditor.Handles.color = Color.red;</span><br><span class="line">        UnityEditor.Handles.ArrowHandleCap(<span class="number">0</span>, <span class="keyword">this</span>.transform.position, <span class="keyword">this</span>.transform.rotation, <span class="number">1f</span>, EventType.Repaint);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="导出传送点"><a href="#导出传送点" class="headerlink" title="导出传送点"></a>导出传送点</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">MenuItem(<span class="string">&quot;Map Tools/Export Teleporters&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ExportTeleporters</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        DataManager.Instance.Load();</span><br><span class="line"></span><br><span class="line">        Scene scene = EditorSceneManager.GetActiveScene();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> currentScene = scene.name;</span><br><span class="line">        <span class="keyword">if</span>(scene.isDirty)</span><br><span class="line">        &#123;</span><br><span class="line">            EditorUtility.DisplayDialog(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;请先保存当前场景&quot;</span>, <span class="string">&quot;确定&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;TeleportObject&gt; allteleportObjects = <span class="keyword">new</span> List&lt;TeleportObject&gt;();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> map <span class="keyword">in</span> DataManager.Instance.Maps)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取地图所在位置</span></span><br><span class="line">            <span class="built_in">string</span> sceneFile = <span class="string">&quot;Assets/Scenes/&quot;</span> + map.Value.Resource + <span class="string">&quot;.unity&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span>(!System.IO.File.Exists(sceneFile))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogErrorFormat(<span class="string">&quot;Scene :&#123;0&#125; not existed!&quot;</span>, sceneFile);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            EditorSceneManager.OpenScene(sceneFile, OpenSceneMode.Single);</span><br><span class="line"></span><br><span class="line">            TeleportObject[] teleports = FindObjectsOfType&lt;TeleportObject&gt;();</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> teleporter <span class="keyword">in</span> teleports)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!DataManager.Instance.Teleporters.ContainsKey(teleporter.ID))</span><br><span class="line">                &#123;</span><br><span class="line">                    EditorUtility.DisplayDialog(<span class="string">&quot;错误&quot;</span>,</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;地图：&#123;0&#125;中配置的 TeleportID：&#123;1&#125;不存在！&quot;</span>, map.Value.ID, teleporter.ID),</span><br><span class="line">                        <span class="string">&quot; 确定&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                TeleporterDefine teleporter_Define = DataManager.Instance.Teleporters[teleporter.ID];</span><br><span class="line">                <span class="keyword">if</span>(teleporter_Define.MapID!=map.Value.ID)</span><br><span class="line">                &#123;</span><br><span class="line">                    EditorUtility.DisplayDialog(<span class="string">&quot;错误&quot;</span>,</span><br><span class="line">                        <span class="built_in">string</span>.Format(<span class="string">&quot;地图：&#123;0&#125;中不应存在的 TeleportID：&#123;1&#125;！&quot;</span>, map.Value.ID, teleporter.ID),</span><br><span class="line">                          <span class="string">&quot;确定&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                teleporter_Define.Position = GameObjectTool.WorldToLogicN(teleporter.transform.position);</span><br><span class="line">                teleporter_Define.Direction = GameObjectTool.WorldToLogicN(teleporter.transform.forward);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DataManager.Instance.SaveTeleporters();</span><br><span class="line">        EditorSceneManager.OpenScene(<span class="string">&quot;Assets/Scenes/&quot;</span> + currentScene + <span class="string">&quot;.unity&quot;</span>);</span><br><span class="line">        EditorUtility.DisplayDialog(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;传送点导出完毕&quot;</span>, <span class="string">&quot;确定&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>保存json</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveTeleporters</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> json = JsonConvert.SerializeObject(<span class="keyword">this</span>.Teleporters, Formatting.Indented);</span><br><span class="line">        File.WriteAllText(<span class="keyword">this</span>.DataPath + <span class="string">&quot;TeleporterDefine.txt&quot;</span>, json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveSpawnPoints</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> json = JsonConvert.SerializeObject(<span class="keyword">this</span>.SpawnPoints, Formatting.Indented);</span><br><span class="line">        File.WriteAllText(<span class="keyword">this</span>.DataPath + <span class="string">&quot;SpawnPointDefine.txt&quot;</span>, json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230311155530000.png" alt="image-20230311155530000"></p><h1 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UI先在UIMain中进行UI注册，包括UI所需要的资源，是否为全局变量等，UIMain提供注册和关闭函数；</span><br><span class="line">所有的UI继承自UIWindow，UIWindow提供关闭带有关闭类型的关闭函数，和关闭事件</span><br></pre></td></tr></table></figure><p>UIManager</p><figure class="highlight cc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> Assets.Scripts.UI.Set;</span><br><span class="line"><span class="keyword">using</span> Assets.Scripts.UI.UIQuest;</span><br><span class="line"><span class="keyword">using</span> Models;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UIManager</span> : Singleton&lt;UIManager&gt;&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UIElement</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//资源所在地</span></span><br><span class="line">        <span class="keyword">public</span> string Resources;</span><br><span class="line">        <span class="comment">//是否全局</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">bool</span> Cache;</span><br><span class="line">        <span class="comment">//对象实例</span></span><br><span class="line">        <span class="keyword">public</span> GameObject Instance;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">bool</span> is_shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> UIcnt;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;Type, UIElement&gt; UIResources = <span class="keyword">new</span> <span class="built_in">Dictionary</span>&lt;Type, UIElement&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UIManager</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.UIResources.<span class="built_in">Add</span>(<span class="built_in">typeof</span>(UITest), <span class="keyword">new</span> <span class="built_in">UIElement</span>() &#123; Resources = <span class="string">&quot;UI/UITest&quot;</span>, Cache = <span class="literal">true</span>, is_shop=<span class="literal">true</span>&#125;);</span><br><span class="line">        User.Instance.CurrentCharacter_Set_Action += () =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">this</span>.UIcnt = <span class="number">0</span>;</span><br><span class="line">          &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="built_in">Show</span>&lt;T&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//SoundManager.Instance.PlaySound(&quot;ui_open&quot;);</span></span><br><span class="line">        Type type = <span class="built_in">typeof</span>(T);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.UIResources.<span class="built_in">ContainsKey</span>(type))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (UIResources[type].is_shop)</span><br><span class="line">                UIcnt++;</span><br><span class="line">            UIElement info = <span class="keyword">this</span>.UIResources[type];</span><br><span class="line">            <span class="keyword">if</span>(info.Instance!=null)</span><br><span class="line">            &#123;</span><br><span class="line">                info.Instance.<span class="built_in">SetActive</span>(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                UnityEngine.Object prefab = Resources.<span class="built_in">Load</span>(info.Resources);</span><br><span class="line">                <span class="keyword">if</span>(prefab==null)</span><br><span class="line">                &#123;</span><br><span class="line">                    Debug.<span class="built_in">LogErrorFormat</span>(<span class="string">&quot;UIManager-&gt;Show&lt;T&gt; Type:&#123;0&#125; Resources:&#123;1&#125; not exist&quot;</span>, type.Name,info.Resources);</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">default</span>(T);</span><br><span class="line">                &#125;</span><br><span class="line">                info.Instance = (GameObject)GameObject.<span class="built_in">Instantiate</span>(prefab);</span><br><span class="line">            &#125;</span><br><span class="line">            SoundManager.Instance.<span class="built_in">PlayerSound</span>(SoundDefine.UI_Win_Open);</span><br><span class="line">            <span class="keyword">return</span> info.Instance.<span class="built_in">GetComponent</span>&lt;T&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        Debug.<span class="built_in">LogErrorFormat</span>(<span class="string">&quot;UIManager-&gt;Show&lt;T&gt; Type:&#123;0&#125; not exist&quot;</span>, type.Name);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Close</span><span class="params">(Type type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (UIResources[type].is_shop)</span><br><span class="line">            UIcnt--;</span><br><span class="line">        <span class="comment">//SoundManager.Instance.PlaySound(&quot;ui_close&quot;);</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.UIResources.<span class="built_in">ContainsKey</span>(type))</span><br><span class="line">        &#123;</span><br><span class="line">            SoundManager.Instance.<span class="built_in">PlayerSound</span>(SoundDefine.UI_Win_Close);</span><br><span class="line">            UIElement info = <span class="keyword">this</span>.UIResources[type];</span><br><span class="line">            <span class="keyword">if</span>(info.Cache)</span><br><span class="line">            &#123;</span><br><span class="line">                info.Instance.<span class="built_in">SetActive</span>(<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                GameObject.<span class="built_in">Destroy</span>(info.Instance);</span><br><span class="line">                info.Instance = null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UIWindow</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Assets.Scripts.Managers;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">UIWindow</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">CloseHandler</span>(<span class="params">UIWindow sender, WindowResult result</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> CloseHandler Onclose;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根节点</span></span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> GameObject Root;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">virtual</span> System.Type Type &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>.GetType()</span><br><span class="line">; &#125; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> WindowResult</span><br><span class="line">    &#123;</span><br><span class="line">        None,Yes,No</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Close</span> (<span class="params">WindowResult result= WindowResult.None</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        UIManager.Instance.Close(<span class="keyword">this</span>.Type);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Onclose != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.Onclose(<span class="keyword">this</span>,result);</span><br><span class="line">        <span class="keyword">this</span>.Onclose = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnClick_Close</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnClick_Yes</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Close(WindowResult.Yes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnClick_No</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Close(WindowResult.No);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        InDisable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UI分类"><a href="#UI分类" class="headerlink" title="UI分类"></a>UI分类</h2><p><img src="/../images/image-20230311165630218.png" alt="image-20230311165630218"></p><p><img src="/../images/image-20230311165758292.png" alt="image-20230311165758292"></p><h2 id="粒子特效"><a href="#粒子特效" class="headerlink" title="粒子特效"></a>粒子特效</h2><p><img src="/../images/image-20230311172807240.png" alt="image-20230311172807240"></p><p>特效类型不应该为UI</p><p><img src="/../images/image-20230311172906272.png" alt="image-20230311172906272"></p><h1 id="Npc系统"><a href="#Npc系统" class="headerlink" title="Npc系统"></a>Npc系统</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置表：Npc配置Npc类型，功能和参数</span><br><span class="line">Npc分类：分为任务型Npc和功能型Npc，再NpcManager中设置事件字典，用于其他模块注册功能型Npc的功能</span><br><span class="line">启动Npc：再Npc身上添加碰撞器，使用回调 OnMouseDown() 等</span><br><span class="line">当玩家点击时，先让Npc面向玩家，然后转到NPcManager调用对用Npc的功能</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseDown</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (!MouseManager.Instance.Mouse_Is_Display) <span class="keyword">return</span>;</span><br><span class="line">      Interactive();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseOver</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">      Highlight(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseEnter</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">      Highlight(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseExit</span>()</span></span><br><span class="line">  &#123;</span><br><span class="line">      Highlight(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230311185440220.png" alt="image-20230311185440220"></p><p>Npc配置表</p><p><img src="/../images/image-20230311190121581.png" alt="image-20230311190121581"></p><h1 id="道具系统"><a href="#道具系统" class="headerlink" title="道具系统"></a>道具系统</h1><h2 id="流程-2"><a href="#流程-2" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置表：需要类型类别，出售价格，功能和一些参数</span><br><span class="line">数据库方面：建立玩家-道具表，为一对多关系</span><br><span class="line">每当角色进入游戏时，将对应角色的道具信息再服务端进行初始化返回客户端进行初始化</span><br><span class="line">客户端通过IteamManager管理所有道具，ItemManager存储实体Item，当道具增加，减少使用时，对背包进行更新，向服务端发送信息，交由服务端对应玩家的ItemManager进行处理，并更新数据库</span><br></pre></td></tr></table></figure><p>配置表</p><p><img src="/../images/image-20230311205905929.png" alt="image-20230311205905929"></p><p><img src="/../images/image-20230311205202000.png" alt="image-20230311205202000"></p><p><img src="/../images/image-20230311205214351.png" alt="image-20230311205214351"></p><p><img src="/../images/image-20230311205444873.png" alt="image-20230311205444873"></p><h1 id="背包系统"><a href="#背包系统" class="headerlink" title="背包系统"></a>背包系统</h1><h2 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数据库：数据库建立背包表，背包和玩家的关系为一对一，背包表中存储背包信息为Binary（二进制）类型</span><br><span class="line">背包的数据结结构：DB中存储二进制文件，背包物体的数据结构为结构体，方便对背包中的物体进行交换，也方便解析二进制文件</span><br><span class="line">玩家进行注册时初始化数据库中的玩家背包表</span><br><span class="line">当玩家登录时，将数据库中的数据读入服务端玩家中，传回客户端，客户端判断背包是否为空，为空则根据玩家物品重新配置背包，否则根据数据库数据进行读取背包，分析获取背包和读取背包都使用在unsafe下运行的指针操作进行</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> 分析获取背包</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">   <span class="function"><span class="keyword">unsafe</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Analyze</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">fixed</span> (<span class="built_in">byte</span>* pt = data)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.Unlocked;i++)</span><br><span class="line">           &#123;</span><br><span class="line">               BagItem* item = (BagItem*)(pt + (i * <span class="keyword">sizeof</span>(BagItem)));</span><br><span class="line">               <span class="keyword">this</span>.items[i] = *item;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取背包信息</span></span><br><span class="line">   <span class="function"><span class="keyword">unsafe</span> <span class="keyword">public</span> NBagInfo <span class="title">GetBagInfo</span>()</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">//Debug.LogError(&quot;BagManager-&gt;NBagInfo&quot;);</span></span><br><span class="line">       <span class="keyword">fixed</span> (<span class="built_in">byte</span>* pt = info.Items)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.Unlocked; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               BagItem* item = (BagItem*)(pt + (i * <span class="keyword">sizeof</span>(BagItem)));</span><br><span class="line">               *item = items[i];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.info;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="TabView-TabButton"><a href="#TabView-TabButton" class="headerlink" title="TabView  TabButton"></a>TabView  TabButton</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Assets.Scripts.UI.Set;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TabButton</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Sprite activeImage;</span><br><span class="line">    <span class="keyword">private</span> Sprite normalImage;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> TabView tabView;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> tabIndex = <span class="number">0</span>;</span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> selected = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Image tabImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this for initialization</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> &#123;</span><br><span class="line">        tabImage = <span class="keyword">this</span>.GetComponent&lt;Image&gt;();</span><br><span class="line">        normalImage = tabImage.sprite;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.GetComponent&lt;Button&gt;().onClick.AddListener(OnClick);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Select</span>(<span class="params"><span class="built_in">bool</span> <span class="keyword">select</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        tabImage.overrideSprite = <span class="keyword">select</span> ? activeImage : normalImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SoundManager.Instance.PlayerSound(SoundDefine.UI_Click);</span><br><span class="line">        <span class="keyword">this</span>.tabView.SelectTab(<span class="keyword">this</span>.tabIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Assets.Scripts.UI.Set;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TabView</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TabButton[] tabButtons;</span><br><span class="line">    <span class="keyword">public</span> GameObject[] tabPages;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UnityAction&lt;<span class="built_in">int</span>&gt; OnTabSelect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tabButtons.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tabButtons[i].tabView = <span class="keyword">this</span>;</span><br><span class="line">            tabButtons[i].tabIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br><span class="line">        SelectTab(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> selected_Idx = <span class="number">-1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectTab</span>(<span class="params"><span class="built_in">int</span> index, <span class="built_in">bool</span> action = <span class="literal">true</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.index != index)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            selected_Idx = index;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tabButtons.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                tabButtons[i].Select(i == index);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.tabPages.Length == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">this</span>.tabPages[<span class="number">0</span>].SetActive(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">if</span> (i &lt; tabPages.Length)</span><br><span class="line">                    tabPages[i].SetActive(i == index);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (action)</span><br><span class="line">                <span class="keyword">if</span> (OnTabSelect != <span class="literal">null</span>)</span><br><span class="line">                    OnTabSelect(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230313094940506.png" alt="image-20230313094940506"></p><h1 id="商店系统"><a href="#商店系统" class="headerlink" title="商店系统"></a>商店系统</h1><h2 id="设计流程-1"><a href="#设计流程-1" class="headerlink" title="设计流程"></a>设计流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置表：商店表，商店道具表</span><br><span class="line">UI实现点击：添加组件Selected，脚本继承 ISelectHandler 实现  public void OnSelect(BaseEventData eventData)</span><br><span class="line"></span><br><span class="line">通过NPC系统调用商店，在npc系统上注册事件，当点击对应Npc时展示通过Npc的参数，读取对应商店信息，展示商店UI，点击购买向服务端发送物品购买信息，服务端进行校验，id和价格是否正确，金币是否足够等，如购买成功在IteamManager上进行添加物品，并同步状态同步信息返回；</span><br><span class="line">状态同步：状态行为（增加删除还是更新），更新状态的类型，更新的id和值</span><br><span class="line">每当发送信息时，判断状态同步信息是否为空，不为空则一并发送</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230312203326499.png" alt="image-20230312203326499"></p><p>状态同步</p><p><img src="/../images/image-20230312214154467.png" alt="image-20230312214154467"></p><p><img src="/../images/image-20230312201736476.png" alt="image-20230312201736476"></p><p><img src="/../images/image-20230312202532473.png" alt="image-20230312202532473"></p><p><img src="/../images/image-20230312202635646.png" alt="image-20230312202635646"></p><h1 id="装备系统"><a href="#装备系统" class="headerlink" title="装备系统"></a>装备系统</h1><h2 id="设计流程-2"><a href="#设计流程-2" class="headerlink" title="设计流程"></a>设计流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置：配置表 ：在物品表中添加装备，物品类型为装备，并添加装备表来存储装备的具体信息</span><br><span class="line">数据库中使用二进制文件来存储装备信息</span><br><span class="line">玩家创建时初始化数据库中的装备信息，玩家进入时服务端传入装备信息，客户端接收后在EquipManager中初始化装备信息，当打开装备UI时，根据EquipManager中的装备信息进行初始化，当发出穿戴/脱下请求，并记录下穿/脱和对哪件装备进行的操作；服务端进行一系列校验，装备是否存在等，校验成功返回成功并更新玩家数据库中的装备信息，返回客户端客户端根据提前记录的数据和服务器返回的结果进行操作</span><br><span class="line"></span><br><span class="line">UI的点击使用IPointerClickHandler</span><br><span class="line"> public void O nPointerClick(PointerEventData eventData)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 根据装备数据更新装备</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span>装备数据<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">unsafe</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ParseEquipData</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">fixed</span>(<span class="built_in">byte</span>* pt =<span class="keyword">this</span>.Data)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.Equips.Length;i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">int</span> itemId = *(<span class="built_in">int</span>*)(pt + (i * <span class="keyword">sizeof</span>(<span class="built_in">int</span>)));</span><br><span class="line">             <span class="keyword">if</span> (itemId &gt; <span class="number">0</span>)</span><br><span class="line">                 <span class="keyword">this</span>.Equips[i] = ItemManager.Instance.Items[itemId];</span><br><span class="line">             <span class="keyword">else</span> <span class="keyword">this</span>.Equips[i] = <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> 获取装备数据</span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"> <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"> <span class="function"><span class="keyword">unsafe</span> <span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">GetEquipData</span>()</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">fixed</span> (<span class="built_in">byte</span>* pt = Data)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; (<span class="built_in">int</span>)EquipSlot.SlotMax; i++)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="built_in">int</span>* itemId = (<span class="built_in">int</span>*)(pt + i * <span class="keyword">sizeof</span>(<span class="built_in">int</span>));</span><br><span class="line">             <span class="keyword">if</span> (<span class="keyword">this</span>.Equips[i] == <span class="literal">null</span>)</span><br><span class="line">                 *itemId = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">else</span> *itemId = <span class="keyword">this</span>.Equips[i].id;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.Data;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230313115022480.png" alt="image-20230313115022480"></p><p>协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">装备为道具的一种类型，并定义装备的位置</span><br><span class="line">客户端与服务端通信使用槽位+Id加 穿还是脱</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230313115133549.png" alt="image-20230313115133549"></p><p><img src="/../images/image-20230313115744519.png" alt="image-20230313115744519"></p><h1 id="任务系统"><a href="#任务系统" class="headerlink" title="任务系统"></a>任务系统</h1><h2 id="设计流程-3"><a href="#设计流程-3" class="headerlink" title="设计流程"></a>设计流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">任务的分类：分为主线任务，直线任务等；每种任务又分为 对话任务，杀怪任务，送信任务等</span><br><span class="line"></span><br><span class="line">数据库表：需要任务ID 目标 和 当前状态</span><br><span class="line"></span><br><span class="line">配置表：任务需要任务Id，任务名，任务类型，等级限制，职业限制，任务领取NPC，任务提交NPC，任务描述，任务对话，任务目标，任务奖励等</span><br><span class="line"></span><br><span class="line">Quest Modle：存储Define信息和NQuest信息</span><br><span class="line">任务没有接收时，在数据库中建立对应玩 家-任务数据</span><br><span class="line">QuestManager设定 某个NPC具有某种类型的任务的 Dictionary</span><br><span class="line">当玩家进入游戏时，初始化玩家任务并将任务信息返回客户端，客户端根据服务端返回信息和配置信息初始化某种Npc具有某种类型的任务，当玩家点击Npc时，判断Npc是否有可接受的任务/ 可完成的任务/已接受未完成的任务，显示相应的UI，当玩家接受/提交任务时，向服务端发送信息，服务端进行校验（提交任务判断任务是否已经完成，已完成则发放奖励；接受任务则判断此任务是否可以接受，都需要判断任务是否存在，等级限制，职业限制等）客户端如接到成功回复，如任务成功完成，则调用事件，判断哪些任务可以接受了等</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ListView-列表组件"><a href="#ListView-列表组件" class="headerlink" title="ListView 列表组件"></a>ListView 列表组件</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Assets.Scripts.UI.Set;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Events;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListView</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> UnityAction&lt;ListViewItem&gt; onItemSelected;</span><br><span class="line">    List&lt;ListViewItem&gt; items = <span class="keyword">new</span> List&lt;ListViewItem&gt;();</span><br><span class="line">    <span class="keyword">private</span> ListViewItem selectedItem = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> ListViewItem SelectedItem</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> selectedItem; &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (selectedItem!=<span class="literal">null</span> &amp;&amp; selectedItem != <span class="keyword">value</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                selectedItem.Selected = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SoundManager.Instance.PlayerSound(SoundDefine.UI_Click);</span><br><span class="line">            selectedItem = <span class="keyword">value</span>;</span><br><span class="line">            <span class="keyword">if</span> (onItemSelected != <span class="literal">null</span>)</span><br><span class="line">                onItemSelected.Invoke((ListViewItem)<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddItem</span>(<span class="params">ListViewItem item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        item.owner = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.items.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveAll</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> it <span class="keyword">in</span> items)</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(it.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">        items.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.selectedItem = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ListViewItem</span> : <span class="title">MonoBehaviour</span>, <span class="title">IPointerClickHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> selected;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> Selected</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> selected; &#125;</span><br><span class="line">            <span class="keyword">set</span></span><br><span class="line">            &#123;</span><br><span class="line">                selected = <span class="keyword">value</span>;</span><br><span class="line">                onSelected(selected);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onSelected</span>(<span class="params"><span class="built_in">bool</span> selected</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">HideInInspector</span>]</span><br><span class="line">        <span class="keyword">public</span> ListView owner;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerClick</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.selected)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Selected = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (owner != <span class="literal">null</span> &amp;&amp; owner.SelectedItem != <span class="keyword">this</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                owner.SelectedItem = <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>协议</p><p><img src="/../images/image-20230313181043980.png" alt="image-20230313181043980"></p><p><img src="/../images/image-20230313181212353.png" alt="image-20230313181212353"></p><p><img src="/../images/image-20230313174130021.png" alt="image-20230313174130021"></p><p><img src="/../images/image-20230313174424756.png" alt="image-20230313174424756"></p><p><img src="/../images/image-20230313175450086.png" alt="image-20230313175450086"></p><p><img src="/../images/image-20230313180036397.png" alt="image-20230313180036397"></p><p><img src="/../images/image-20230313180616625.png" alt="image-20230313180616625"></p><p>强制布局</p><p><img src="/../images/image-20230313205806928.png" alt="image-20230313205806928"></p><h1 id="刷怪系统"><a href="#刷怪系统" class="headerlink" title="刷怪系统"></a>刷怪系统</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">配置表：定义刷怪地图，怪物id，怪物等级属性等</span><br><span class="line">客户端：配置刷怪点 使用工具生成传送点</span><br><span class="line">服务端Map上添加刷怪管理器和怪物管理器</span><br><span class="line">服务端开一个新的线程，模拟进行Updata操作，每帧调用MapManager中的Updata，MapManager调用每个Map的Updata，Map调用每个刷怪点的Updata，每个刷怪点记录刷怪间隔和上个怪的死亡时间在Updata中判断是否应该刷怪，当可以刷怪时返回对应Map中的MouseManager，MouseManager进行创建怪物，加入怪物管理器，并通知地图中的玩家怪物的进入</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流程-3"><a href="#流程-3" class="headerlink" title="流程"></a>流程</h2><p><img src="/../images/image-20230314162215619.png" alt="image-20230314162215619"></p><p><img src="/../images/image-20230314162843877.png" alt="image-20230314162843877"></p><p><img src="/../images/image-20230314163426434.png" alt="image-20230314163426434"></p><h1 id="服务端后处理机制"><a href="#服务端后处理机制" class="headerlink" title="服务端后处理机制"></a>服务端后处理机制</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务端为了减少向客户端发送信息的次数，在一些不太要求实时性的信息需要发送时，先不进行发送，当有信息发送时，启动后处理信息处理系统，将需要后处理的信息一并添加到发送到信息中，一并发出，减少发包频度，这样可以减少服务端的压力，使服务器承载更多的玩家</span><br></pre></td></tr></table></figure><h1 id="好友系统"><a href="#好友系统" class="headerlink" title="好友系统"></a>好友系统</h1><h2 id="设计流程-4"><a href="#设计流程-4" class="headerlink" title="设计流程"></a>设计流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数据库：数据库建立好友表，存放好友的id，姓名，职业，等级等</span><br><span class="line">协议：建立添加好友请求响应协议，好友列表请求响应协议，好友删除请求响应协议，因为好友的添加想要两个玩家之间的交互，所有在添加好友的响应中加入添加好友的请求响应，用于存储在整个好友添加流程中的信息</span><br><span class="line"></span><br><span class="line">当玩家进入游戏时，服务端在Characrer上建立FriendManager用于管理服务端好友信息，并将玩家的好友信息返回客户端，客户端将玩家的好友信息存储在FriendManager中；</span><br><span class="line">客户端通过玩家的id添加好友，向客户端发送好友请求响应，协议信息请求者Id，接受者Id；信息到达服务端判断请求方和接受方是否存在，判断接受方是否在线（判断方式为服务端设置SeeionManager保存客户端和服务端之间的连接，用字典（玩家Id）（session）的方式，当玩家上线时将信息加入，玩家退出时将信息切出），如果在线则将信息直接发送给接收者，接收者选择是否同意添加好友，并向服务端发送好友响应，如果同意添加好友则在服务端进行双向添加好友；删除好友同理；</span><br><span class="line">当玩家进入或退出时，在所有在线好友中，将自己的在线状态修改为在线或不在线</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230314211144432.png" alt="image-20230314211144432"></p><p><img src="/../images/image-20230314210142590.png" alt="image-20230314210142590"></p><h1 id="生成事件"><a href="#生成事件" class="headerlink" title="生成事件"></a>生成事件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当项目生成时做的事情</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230315153701033.png" alt="image-20230315153701033"></p><h1 id="组队系统"><a href="#组队系统" class="headerlink" title="组队系统"></a>组队系统</h1><h2 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UIMain设置显示或隐藏TeamUI</span><br><span class="line">协议：协议定义邀请玩家进入队伍请求和响应，为了在响应的时知道哪个玩家请求进入队伍，在响应中加入请求协议，玩家退出队伍请求响应，玩家队伍信息请求响应</span><br><span class="line">队伍信息为游戏过程中产生的数据，不进行数据库存储</span><br><span class="line">服务端维护所有的队伍信息</span><br><span class="line"></span><br><span class="line">当玩家进入时，默认此玩家没有队伍，玩家可以通过好友系统和聊天系统邀请其他玩家加入队伍，服务端判断响应玩家是否存在，是否处于在线状态，是否已经加入队伍等校验，校验成功向响应方发送请求，是否同意加入队伍，并向服务端发送加入队伍响应，不同意则向请求方发送不同意加入信息，同意加入则在TeamManager中请求一个空的Team对象，将请求方和响应方加入Team中，并将角色上的Team设置为Team，并发送信息到双方的客户端，Team可以使用后处理机制，当Team被修改时，改变Team上的时间戳，当进行后处理时，判断玩家的上次次更新Team的时间是否小于更新Team的时间，如果小于则执行Team的后处理，将Team信息重新发包发送给客户端 ，当玩家退出时，退出玩家所在队伍</span><br></pre></td></tr></table></figure><p>协议</p><p><img src="/../images/image-20230315153435086.png" alt="image-20230315153435086"></p><p><img src="/../images/image-20230315152556664.png" alt="image-20230315152556664"></p><p><img src="/../images/image-20230315152847887.png" alt="image-20230315152847887"></p><h1 id="时间戳和获取当前时间"><a href="#时间戳和获取当前时间" class="headerlink" title="时间戳和获取当前时间"></a>时间戳和获取当前时间</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TimeUtil</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> timestamp</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> GetTimeStamp(DateTime.Now); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DateTime <span class="title">GetTime</span>(<span class="params"><span class="built_in">long</span> timeStamp</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DateTime dateTimeStart = TimeZone.CurrentTimeZone.ToLocalTime(<span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">            <span class="built_in">long</span> lTime = timeStamp * <span class="number">10000000</span>;</span><br><span class="line">            TimeSpan toNow = <span class="keyword">new</span> TimeSpan(lTime);</span><br><span class="line">            <span class="keyword">return</span> dateTimeStart.Add(toNow);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">double</span> <span class="title">GetTimeStamp</span>(<span class="params">DateTime now</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DateTime startTime = TimeZone.CurrentTimeZone.ToLocalTime(<span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> (now - startTime).TotalSeconds;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="公会系统"><a href="#公会系统" class="headerlink" title="公会系统"></a>公会系统</h1><h2 id="流程-4"><a href="#流程-4" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">数据库：数据库建立公会表：工会表和玩家表之间的关系为一对多；建立公会成员表，工会表和公会成员表之间的关系为一对多；建立公会申请信息表，公会表和公会申请信息表之间的关系为一对多；</span><br><span class="line">公会存放公会的名称，公会会长id，会长名，公会宣言等，</span><br><span class="line">公会成员表存放公会成员信息，职称，上次在线时间等</span><br><span class="line">公会申请信息表存放申请成员Id，等级，名称，申请时间等信息</span><br><span class="line"></span><br><span class="line">在公会中不同的职称有不同的权力，会长可以踢人，转让公会和处理玩家的公会申请，副会长可以处理玩家申请和踢人，普通玩家可以退出公会</span><br><span class="line">当客户端启动时，GulidManager进行初始化，从数据库中读取出所有公会信息，并进行存储；玩家进入游戏时，初始化玩家公会，并返回客户端， ，副会长和普通成员，当职称为会长和副会长时，才将玩家的申请信息传回客户端，否则不传入。客户端读取到公会信息后，读出自己在公会中的信息，根据职称在显示UI时会显示不同的功能按钮。</span><br><span class="line">当玩家没有加入公会时，可以选择创建公会和加入公会，创建公会输入公会的名称和宣言，向服务端发送创建公会请求，服务端在GulidManager中进行校验：请求方是否已经加入公共，请求方的金钱是否足够，公会是否有重名等，校验成功则创建信息公会实体，将请求方加入公会中，更新角色在服务端公会，并将新的公会写入数据库，请求方客户端收到创建公会响应更新UI；玩家还可以选择加入公会，从服务端请求公会列表，传回客户端，客户端向服务端发送请求加入公会请求，服务端进行校验：玩家公会是否存在，玩家是否已经向该公会提出过申请等，校验成功则将此条申请加入数据库中；</span><br><span class="line"></span><br><span class="line">当公会的管理者上线时，可以处理玩家申请，当同意玩家申请时，将该成员加入公会中，并加入数据库中，如果当前玩家在线，则向玩家发送信息，更新玩家客户端的公会信息</span><br><span class="line">当玩家离开时，则更新玩家在数据库和服务端中的上次上线时间，并更新状态为下线</span><br></pre></td></tr></table></figure><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><img src="/../images/image-20230315175047054.png" alt="image-20230315175047054"></p><p><img src="/../images/image-20230315175209025.png" alt="image-20230315175209025"></p><p><img src="/../images/image-20230315175234964.png" alt="image-20230315175234964"></p><p><img src="/../images/image-20230315175343856.png" alt="image-20230315175343856"></p><p><img src="/../images/image-20230315175425449.png" alt="image-20230315175425449"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="/../images/image-20230315183935421.png" alt="image-20230315183935421"></p><p><img src="/../images/image-20230315184002879.png" alt="image-20230315184002879"></p><p><img src="/../images/image-20230315173315084.png" alt="image-20230315173315084"></p><p><img src="/../images/image-20230315173830572.png" alt="image-20230315173830572"></p><p><img src="/../images/image-20230315173900559.png" alt="image-20230315173900559"></p><h1 id="聊天系统"><a href="#聊天系统" class="headerlink" title="聊天系统"></a>聊天系统</h1><h2 id="流程-5"><a href="#流程-5" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">聊天系统不涉及数据库操作和配置表</span><br><span class="line">服务端设立ChatManager用于存储 用户的聊天信息，当玩家进入游戏时，服务端可以进行定时清除时间过长的信息，从ChatManager中拉取此用户的聊天信息并返回客户端，客户端进行解析读取，显示在界面上，chat的后处理，读取最新的消息</span><br></pre></td></tr></table></figure><h2 id="协议-1"><a href="#协议-1" class="headerlink" title="协议"></a>协议</h2><p><img src="/../images/image-20230320122305079.png" alt="image-20230320122305079"></p><p><img src="/../images/image-20230320121833302.png" alt="image-20230320121833302"></p><p><img src="/../images/image-20230320103933751.png" alt="image-20230320103933751"></p><p><img src="/../images/image-20230320104347736.png" alt="image-20230320104347736"></p><p><img src="/../images/image-20230320104542292.png" alt="image-20230320104542292"></p><h2 id="不点击时关闭"><a href="#不点击时关闭" class="headerlink" title="不点击时关闭"></a>不点击时关闭</h2><p><img src="/../images/image-20230320105445339.png" alt="image-20230320105445339"></p><h1 id="声音系统"><a href="#声音系统" class="headerlink" title="声音系统"></a>声音系统</h1><h2 id="流程-6"><a href="#流程-6" class="headerlink" title="流程"></a>流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">声音分为音乐和音效</span><br><span class="line">设置混音器，两个音道Sound和Music，开放调节音量的变量</span><br><span class="line">设计UI，滑动条，滑动条滑动或设置开关时，设置混音器中的音量，并记录本地中 PlayerParfabs </span><br><span class="line">当调节音效时，播放音效以让玩家听到</span><br><span class="line">先定义音乐的路径String，以便于修改和使用</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230320181732684.png" alt="image-20230320181732684"></p><p><img src="/../images/image-20230320181217903.png" alt="image-20230320181217903"></p><p><img src="/../images/image-20230320181441122.png" alt="image-20230320181441122"></p><h2 id="混音器"><a href="#混音器" class="headerlink" title="混音器"></a>混音器</h2><p>可以给播放源设置通道，并开放向脚本开放变量</p><p><img src="/../images/image-20230320183050733.png" alt="image-20230320183050733"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;数据库使用EF  EntityFrameworkCore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;json使用JsonDotNet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;协议使用protobuf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>面经01</title>
    <link href="http://example.com/2023/02/22/%E9%9D%A2%E7%BB%8F01/"/>
    <id>http://example.com/2023/02/22/%E9%9D%A2%E7%BB%8F01/</id>
    <published>2023-02-22T13:33:56.000Z</published>
    <updated>2023-03-27T01:46:24.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unityGC</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zhangay1998/article/details/122626334?ops_request_misc=%7B%22request_id%22:%22167758686016800213026456%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167758686016800213026456&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122626334-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=unity%E9%9D%A2%E8%AF%95%E9%A2%98&spm=1018.2226.3001.4187">(49条消息) 2022年Unity 面试题 |五萬字 二佰道| Unity面试题大全，面试题总结【全网最全，收藏一篇足够面试】_呆呆敲代码的小Y的博客-CSDN博客</a></p><p>[TOC]</p><span id="more"></span><h1 id="泛型在unity的应用"><a href="#泛型在unity的应用" class="headerlink" title="泛型在unity的应用"></a>泛型在unity的应用</h1><p>1.单例模式</p><p>2.判断游戏物体体是否存在某个组件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">GetAndAddComponent</span>&lt;<span class="title">T</span>&gt;(<span class="params">GameObject obj</span>) <span class="keyword">where</span> T:Component</span> </span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (!obj.GetComponent&lt;T&gt;())<span class="comment">//检查该游戏物体是否还有T组件</span></span><br><span class="line">       &#123;</span><br><span class="line">           obj.AddComponent&lt;T&gt;();<span class="comment">//没有添加</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> obj.GetComponent&lt;T&gt;();<span class="comment">//本身就有或者是添加之后的返回</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">List</span>&lt;<span class="title">Component</span>&gt; <span class="title">GetAndAddComponens</span>&lt;<span class="title">T</span>, <span class="title">K</span>&gt;(<span class="params">GameObject obj</span>) <span class="keyword">where</span> T : Component <span class="keyword">where</span> K : Component</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (obj.GetComponent&lt;T&gt;() == <span class="literal">null</span>)<span class="comment">//检查该游戏物体是否还有T组件</span></span><br><span class="line">       &#123;</span><br><span class="line">           com.Add(obj.AddComponent&lt;T&gt;());<span class="comment">//添加并且添加到list</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (obj.GetComponent&lt;K&gt;() == <span class="literal">null</span>)<span class="comment">//检查该游戏物体是否还有T组件</span></span><br><span class="line">       &#123;</span><br><span class="line">           com.Add(obj.AddComponent&lt;K&gt;());<span class="comment">// 添加并且添加List中</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> com;<span class="comment">//返回list</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="关于Unity3D的四种常用灯光"><a href="#关于Unity3D的四种常用灯光" class="headerlink" title="关于Unity3D的四种常用灯光"></a>关于Unity3D的四种常用灯光</h1><h2 id="定向光"><a href="#定向光" class="headerlink" title="定向光"></a>定向光</h2><p>Directional Light发出的光没有距离的限制且相互平行，所以无论放在什么位置（无穷远\近）都能照射到指定方向的区域，投射出来的阴影也都是一样的。</p><h2 id="点光源"><a href="#点光源" class="headerlink" title="点光源"></a>点光源</h2><p>即空间中一个向所有方向均匀发光的点，类似于现实生活中的灯泡，光线强度和照射距离成反比（距离越远，光线越弱），阴影会随光源的位置而发生变化。</p><h2 id="聚光灯"><a href="#聚光灯" class="headerlink" title="聚光灯"></a>聚光灯</h2><p>效果类似于舞台的聚光灯，光线从一个点发出，向着某个方向按锥形的范围进行照射。与点光源一样，光线会随着距离的增加而逐渐衰弱，阴影也会随光源的位置而发生变化。<br>可以通过调节位置来改变投射出的光圈的大小，也可以通过调节Spot Angle的参数来改变（数值越大，投射出的光圈越大）。</p><h2 id="区域光"><a href="#区域光" class="headerlink" title="区域光"></a>区域光</h2><p>Area（baked only）区域光往Z方向照射且仅能用于光照贴图渲染，光线会随着距离的增加而逐渐衰弱，阴影也会随光源的位置而发生变化。</p><h1 id="unity动画"><a href="#unity动画" class="headerlink" title="unity动画"></a>unity动画</h1><h2 id="IK"><a href="#IK" class="headerlink" title="IK"></a>IK</h2><p>与MatchTarget实现的效果类似，但是可以用在任意层的动画上<br>IK全称反向运动学，也就是根据子节点的位置推算出父节点的关节变化，而根据父节点的位置推算出子节点的关节变化称作正向运动学<br>使用IK动画首先动画类型必须是Humanoid类型并在Animator窗口设置中打开IK Pass</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Transform trans1;</span><br><span class="line"><span class="keyword">public</span> Transform trans2;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnAnimatorIK</span>(<span class="params"><span class="built_in">int</span> layerIndex</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ani.GetCurrentAnimatorStateInfo(<span class="number">1</span>).IsName(<span class="string">&quot;AniName&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        ani.SetIKPosition(AvatarIKGoal.RightHand, trans1.position);</span><br><span class="line">        ani.SetIKPositionWeight(AvatarIKGoal.RightHand, <span class="number">1</span>);</span><br><span class="line">        ani.SetIKPosition(AvatarIKGoal.LeftHand, trans2.position);</span><br><span class="line">        ani.SetIKPositionWeight(AvatarIKGoal.LeftHand, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h1><p>值类型：int,bool,float,char,struct,enum</p><p>引用类型：string,object,委托,接口,类,数组</p><p>区别：</p><p>1.值类型直接存储在栈中，引用类型在栈中存储堆中数据的指针和引用，数据存储在堆中</p><p>2.值类型存取快，引用类型存取慢</p><p>3.值类型使用完自动释放，引用类型要等待GC来释放</p><p>4.值类型继承自System.ValueType,引用类型继承自Sysetm.Object</p><h1 id="C-修饰符"><a href="#C-修饰符" class="headerlink" title="C#修饰符"></a>C#修饰符</h1><p>public:无访问限制</p><p>private：仅对该类开放</p><p>protected：只对该类和其派生类公开</p><p>internal：只能在包含该类的程序集中访问</p><p>static ：静态类：无法实例化，只能通过 类名.访问</p><p>​               静态方法：与实例化无关，只能通过类名.访问</p><h1 id="ArrayList和List的区别"><a href="#ArrayList和List的区别" class="headerlink" title="ArrayList和List的区别"></a>ArrayList和List的区别</h1><p>1.ArrayList不带泛型，数据类型丢死，List带泛型数据类型不丢失</p><p>2.ArrayList需要进行装箱拆箱操作，将数据类型转化为Object，List不需要装箱拆箱操作</p><h1 id="简述GC产生的原因，如何避免GC"><a href="#简述GC产生的原因，如何避免GC" class="headerlink" title="简述GC产生的原因，如何避免GC"></a>简述GC产生的原因，如何避免GC</h1><p>GC是避免内存溢出二产生的垃圾回收机制</p><p>当实例化一个对象并且内存不足时，就会触发GC</p><h2 id="Unity的GC机制"><a href="#Unity的GC机制" class="headerlink" title="Unity的GC机制"></a>Unity的GC机制</h2><p>使用了Boehm GC算法（可以参考：<a href="https://en.wikipedia.org/wiki/Boehm_garbage_collector%EF%BC%89%EF%BC%8C%E6%98%AF%60%E9%9D%9E%E5%88%86%E4%BB%A3%60%EF%BC%88non-generational%EF%BC%89%E5%92%8C%60%E9%9D%9E%E5%8E%8B%E7%BC%A9%60%EF%BC%88non-compacting%EF%BC%89%E7%9A%84%E3%80%82">https://en.wikipedia.org/wiki/Boehm_garbage_collector），是`非分代`（non-generational）和`非压缩`（non-compacting）的。</a></p><p>“非分代”是指GC执行清理操作时，必须遍历整个内存，去标记哪些没有被引用并且删除，随着内存的增长，它的性能就会降低。 目前2019版本的unity在实验分代GC算法<br>“非压缩”意味着内存中的对象不会被重新定位，去减小对象之间的内存空隙</p><p>原文链接：<a href="https://blog.csdn.net/gghhb12/article/details/120782191">https://blog.csdn.net/gghhb12/article/details/120782191</a></p><h2 id="对象代龄"><a href="#对象代龄" class="headerlink" title="对象代龄"></a>对象代龄</h2><p>CLR初始化后第一批创建的对象列为0代对象，CLR会为0代区域设置一个内存限制，当创建对象的大小 超过这个内存限制时，GC开始工作，清理垃圾并释放内存，GC结束时，幸存的对象会被列为一代对象，并进入一代区域，一代区域起初也会设定一个容量限制，当超出这个容量限制时，GC扩大战场，对一代对象也进行回收，幸存的对象被列为二代对象进入二代区域</p><h2 id="避免GC"><a href="#避免GC" class="headerlink" title="避免GC"></a>避免GC</h2><p>1.减少new的使用</p><p>2.使用公共的对象或静态成员</p><p>3.在频繁操作字符串的场景中，使用stringBulider替换string，因为每次修改string时会新new一个string替换原来的string</p><p>4.使用对象池，减少对象的创建和销毁</p><p>5.减少foreach的使用</p><p>减少GC造成的卡顿：在载入新场景的时候进行GC减少游戏进行中进行的卡顿</p><h1 id="class和struct的区别"><a href="#class和struct的区别" class="headerlink" title="class和struct的区别"></a>class和struct的区别</h1><p>1.class为引用类型，struct为值类型</p><p>2.class在堆上创建实例，struct在栈上创建实例</p><p>3.class作为参数类型传递，传递为引用地址，struct传递的为值</p><p>4.class没有默认的无参构造函数，struct有默认的无参构造函数</p><p>5.class支持继承，struct不支持继承</p><p>6.class很容易赋初始值，struct不容易赋初值</p><p>7.class偏向与面向对象，用于复杂大型的数据，struct偏向于较为简单的数据</p><p>8.class实例只能通过new SomeClass来创建，struct既可以通过new SomeStruct进行创建也可以通过 SomeStruct myStruct 进行创建</p><h1 id="指针和引用的区别"><a href="#指针和引用的区别" class="headerlink" title="指针和引用的区别"></a>指针和引用的区别</h1><p>1.引用不能为空，不存在对空对象的引用，指针可以为空</p><p>2.引用必须初始化引用对象，指针可以不初始化</p><p>3.引用初始化后不能改变，指针可以改变</p><p>4.引用访问对象为直接访问，指针访问对象为间接访问</p><p>5.引用的大小为引用对象的大小，指针的大小为为指针本身，通常为四个字节</p><p>6.引用对象不需要分配内存空间，指针访问对象需要分配空间</p><h1 id="多态的意义"><a href="#多态的意义" class="headerlink" title="多态的意义"></a>多态的意义</h1><p>同一对象被造型为不同的类型时，有不同的功能</p><p>同一类型的引用指向不同的类型时有不同的实现</p><h1 id="不安全代码和非托管代码"><a href="#不安全代码和非托管代码" class="headerlink" title="不安全代码和非托管代码"></a>不安全代码和非托管代码</h1><p>托管代码：在公共语言运行时（CLR）控制下运行的代码</p><p>非托管代码：不在公共语言运行时（CLR）控制下运行的代码</p><p>不安全代码：不安全代码介于托管代码和非托管代码之间，不安全代码仍然在CLR控制下运行，但是但是允许直接通过指针访问内存</p><p>unsafe：非托管代码需要用到这个关键字一般用在带指针的操作场所</p><h1 id="Net和Mono的关系"><a href="#Net和Mono的关系" class="headerlink" title=".Net和Mono的关系"></a>.Net和Mono的关系</h1><p>.Net是一个语言平台，Mono为.Net提供了集成开发环境，集成并实现了.Net的编译器，CLR和基础类库，使Net既可以在windows上运行，也可以运行于 Linux 和 Os 等</p><h1 id="接口和委托"><a href="#接口和委托" class="headerlink" title="接口和委托"></a>接口和委托</h1><p>接口约束了类应该具备的功能的集合，约束了类应该具备哪些功能，使类从千变万化的逻辑中解脱出来，方便类的管理和拓展，同时解决了类的单继承问题；</p><h1 id="ref和out"><a href="#ref和out" class="headerlink" title="ref和out"></a>ref和out</h1><p>ref修饰引用参数，参数必须赋值，带返回值，又进又出</p><p>out修饰输出参数，参数可以不赋值，在返回之前必须明确赋值</p><h1 id="JIT和AOT的区别"><a href="#JIT和AOT的区别" class="headerlink" title="JIT和AOT的区别"></a>JIT和AOT的区别</h1><p>just-in-time 实时编译           执行慢安装快空间小</p><p>ahead-of-time 预先编译      执行快安装慢占用内存外存大</p><h1 id="委托和事件的区别"><a href="#委托和事件的区别" class="headerlink" title="委托和事件的区别"></a>委托和事件的区别</h1><p>1.委托为一个类，可以进行实例化，可以通过委托的构造函数把方法赋值给委托实例</p><p>2.事件为一个委托类型的变量</p><p>3.事件可以通过+&#x3D;注册委托实例或方法 ；可以通过-&#x3D;注销委托实例或方法</p><p>4.<code>EventHandler</code>就是一个委托</p><p>5.委托可以在类内部和外部进行触发，而事件只能在内部触发</p><p>6.观察者模式中被观察者可以在内部生成一个事件作为外部观察者注册的接口</p><h1 id="c-EventArgs的使用（事件参数）"><a href="#c-EventArgs的使用（事件参数）" class="headerlink" title="c#EventArgs的使用（事件参数）"></a>c#EventArgs的使用（事件参数）</h1><p>如果有多个类要打印信息，如Student类，Teacher类，School类…如下代码。各类统一继承于EventArgs的话，那么传参就很方便了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//把打印信息统一为一个函数，一个EventArgs参数。</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">ShowMessage</span>(<span class="params">EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">is</span> Student)               <span class="comment">//判断参数类型</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> student = e <span class="keyword">as</span> Student; <span class="comment">//把参数转换为Student类</span></span><br><span class="line">                <span class="keyword">return</span> student.Name + <span class="string">&quot;, address = &quot;</span> + student.Address;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">is</span> Teacher)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> teacher = e <span class="keyword">as</span> Teacher;</span><br><span class="line">                <span class="keyword">return</span> teacher.Name + <span class="string">&quot;, course = &quot;</span> + teacher.Course;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Not found&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"> </span><br><span class="line">            Console.WriteLine(ShowMessage(<span class="keyword">new</span> Student(<span class="string">&quot;James&quot;</span>,<span class="string">&quot;杭州&quot;</span>)));</span><br><span class="line">            Console.WriteLine(ShowMessage(<span class="keyword">new</span> Teacher(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;英语&quot;</span>)));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//继承于EventArgs，便于传参</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">EventArgs</span>    </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> address</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.Name = name;</span><br><span class="line">                <span class="keyword">this</span>.Address = address;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//继承于EventArgs，便于传参</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span> : <span class="title">EventArgs</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> ClassId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Course &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">string</span> course</span>)</span></span><br><span class="line">            &#123;<span class="number">0</span></span><br><span class="line">                <span class="keyword">this</span>.Name = name;</span><br><span class="line">                <span class="keyword">this</span>.Course = course;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">James, address = 杭州</span></span><br><span class="line"><span class="comment">Jack, course = 英语</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="string，stringBuilder，stringBuffer"><a href="#string，stringBuilder，stringBuffer" class="headerlink" title="string，stringBuilder，stringBuffer"></a>string，stringBuilder，stringBuffer</h1><p>String为不可变实体，当对String进行操作时，将开辟一个新的String实例并进行赋值，旧的String实例将等待GC在频繁修改字符串的场景下效能消耗比较大</p><p>stringBuilder当进行修改时，在原字符串上进行操作，不会生成新的实例对象，为非线程安全，所以性能比较好点</p><p>stringBuffer为线程安全，性能较差</p><p>性能比较stringBulider&gt; stringBuffer&gt;string</p><p>进行少量数据修改操作：string</p><p>单线程操作字符串缓冲区下操作大量数据：stringBulider</p><p>多线程操作字符串缓冲区下操作大量数据：stringBuffer</p><h1 id="哈希表和字典的区别"><a href="#哈希表和字典的区别" class="headerlink" title="哈希表和字典的区别"></a>哈希表和字典的区别</h1><p>字典当试图寻找一个不存在的键时会返回&#x2F;抛出异常   哈希表会返回null</p><p>字典的查找比哈希表快因为不需要进行装箱和拆箱的操作</p><p>字典只有公共静态变量为线程安全的，哈希表所有成员都为安全的</p><p>字典创建时必须指定键和值的类型，哈希表可以存放任何键值类型</p><p>字典的遍历顺序为存入的顺序，哈希表的遍历顺序是乱序的</p><h1 id="image和Rawimage"><a href="#image和Rawimage" class="headerlink" title="image和Rawimage"></a>image和Rawimage</h1><p>Image比<code>Rawimage</code>更消耗性能</p><p>image只能放Sprite属性的图片<code>RawImage</code>可以放任何类型的图片</p><p>Image适合放有操作的图片，<code>Rawimage</code>放单独展示的图片即可，性能较好</p><h1 id="碰撞器触发器"><a href="#碰撞器触发器" class="headerlink" title="碰撞器触发器"></a>碰撞器触发器</h1><p>物体发生碰撞的必要条件：</p><p>　　两个物体都必须带有碰撞器(Collider)，其中一个物体还必须带有Rigidbody刚体</p><p>（1）触发器没有碰撞效果</p><p>（2）IsTrigger&#x3D;true;</p><p>触发信息检测：</p><p>　　1.MonoBehaviour.OnTriggerEnter(Collider collider)当进入触发器</p><p>　　2.MonoBehaviour.OnTriggerExit(Collider collider)当退出触发器</p><p>　　3.MonoBehaviour.OnTriggerStay(Collider collider)当逗留触发器</p><p>（1）碰撞器有碰撞效果</p><p>（2）IsTrigger&#x3D;false</p><p>碰撞信息检测：</p><p>　　1.MonoBehaviour.OnCollisionEnter(Collision collision) 当进入碰撞器</p><p>　　2.MonoBehaviour.OnCollisionExit(Collision collision) 当退出碰撞器</p><p>　　3.MonoBehaviour.OnCollisionStay(Collision collision)  当逗留碰撞器</p><p>拓展：发生碰撞的必要条件是什么？<br>1：两个物体都必须带有碰撞盒。<br>2：至少有一个物体带有Rigidbody组件。<br>3：两个物体要发生相对位移。</p><h1 id="点乘叉乘"><a href="#点乘叉乘" class="headerlink" title="点乘叉乘"></a>点乘叉乘</h1><p><img src="/../images/image-20230301175833852.png" alt="image-20230301175833852"></p><p><img src="/../images/image-20230301175922382.png" alt="image-20230301175922382"></p><h1 id="什么是LightMap"><a href="#什么是LightMap" class="headerlink" title="什么是LightMap"></a>什么是LightMap</h1><p>LightMap就是在三维软件上打好光，然后渲染把场景各表面的光照输出到贴图上，然后通过引擎贴到贴图上，这样物体就有了光照的感觉</p><h1 id="四元数对欧拉角的优点"><a href="#四元数对欧拉角的优点" class="headerlink" title="四元数对欧拉角的优点"></a>四元数对欧拉角的优点</h1><p>1.四元数可用于增量旋转</p><p>2.可以避免万向锁</p><p>3.有两种表达方式（互为负）欧拉角有无数种表达方式</p><h1 id="Addcomponent后哪个生命周期函数会被调用"><a href="#Addcomponent后哪个生命周期函数会被调用" class="headerlink" title="Addcomponent后哪个生命周期函数会被调用"></a>Addcomponent后哪个生命周期函数会被调用</h1><h1 id="层剔除LayerMask（图层模板）"><a href="#层剔除LayerMask（图层模板）" class="headerlink" title="层剔除LayerMask（图层模板）"></a>层剔除LayerMask（图层模板）</h1><p>我们在使用Unity提供的物理系统的时候，经常需要发射射线或者检测碰撞体等等。<br>比如下面这个方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Collider[] <span class="title">OverlapBox</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">Vector3 center, Vector3 halfExtents, </span></span></span><br><span class="line"><span class="params"><span class="function">Quaternion orientation= Quaternion.identity, <span class="built_in">int</span> layerMask= AllLayers, </span></span></span><br><span class="line"><span class="params"><span class="function">QueryTriggerInteraction queryTriggerInteraction= QueryTriggerInteraction.UseGlobal</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>描述<br>查找与给定盒体接触或位于盒体内部的所有碰撞体。<br>创建一个您定义的不可见盒体，通过输出与该盒体发生接触的任何碰撞体来测试碰撞。</p><p>这个方法的第四个参数是layerMask，意思是<br>你指定一些图层，让你的OverlapBox只能对于指定的layerMask做检查，如果该碰撞体的图层是你指定的图层，那么就加入到返回结果中；反之即使这个碰撞体符合要求，也不会加入到返回结果中</p><h2 id="获取图层的方法"><a href="#获取图层的方法" class="headerlink" title="获取图层的方法"></a>获取图层的方法</h2><p>方法一<br>使用方法LayerMask.GetMask</p><p>public LayerMask m_LayerMask &#x3D; LayerMask.GetMask(new string[]{“Default”, “Hit”});</p><p>方法二<br>使用二进制位运算符按位或 : “|”</p><p>public LayerMask m_LayerMask &#x3D; LayerMask.GetMask(“Default”) | LayerMask.GetMask(“Hit”);</p><p>方法三<br>LayerMask.NameToLayer是获得该层的在列表中的索引，实际值通过GetMask获取，若想要把索引转换为实际值，可以通过移位操作获得</p><p>上面这句话的意思是：LayerMask.NameToLayer获取的是所有，也就是你点击任意游戏对象的Layer，有很多图层供你选择，左边的数字就是索引。</p><p>注意：但是实际的LayMask并不是按索引存储的，而是二进制存储。例如Hit的索引是2，那么它具体存的数值就是1 &lt;&lt; 2 &#x3D; 4，所以你LayerMask.NameToLayer(“Hit”)的值就是4而不是2 。所以在使用NameToLayer的时候需要移位。</p><p>public LayerMask m_LayerMask &#x3D;<br>            (1 &lt;&lt; LayerMask.NameToLayer(“Default”)) | (1 &lt;&lt; LayerMask.NameToLayer(“Hit”));</p><h2 id="层剔除"><a href="#层剔除" class="headerlink" title="层剔除"></a>层剔除</h2><p>int layer &#x3D; LayerMask.NameToLayer(“Ground”); &#x2F;&#x2F;假设&#x3D;10</p><p>LayerMask.GetMask((“Ground”); &#x2F;&#x2F;相当于 1 &lt;&lt; 10</p><p>其实很简单：</p><p>1 &lt;&lt; 10 打开第10的层。 等价于【1 &lt;&lt; LayerMask.NameToLayer(“Ground”);】 也等价于【 LayerMask.GetMask((“Ground”);】</p><p>~(1 &lt;&lt; 10) 打开除了第10之外的层。</p><p>~(1 &lt;&lt; 0) 打开所有的层。</p><p>(1 &lt;&lt; 10) | (1 &lt;&lt; 8) 打开第10和第8的层。等价于【 LayerMask.GetMask((“Ground”, “Wall”);】</p><p>在代码中使用时如何开启某个Layers？<br>LayerMask mask &#x3D; 1 &lt;&lt; 你需要开启的Layers层。<br>LayerMask mask &#x3D; 0 &lt;&lt; 你需要关闭的Layers层。<br>举几个个栗子：</p><p>LayerMask mask &#x3D; 1 &lt;&lt; 2; 表示开启Layer2。</p><p>LayerMask mask &#x3D; 0 &lt;&lt; 5;表示关闭Layer5。</p><p>LayerMask mask &#x3D; 1&lt;&lt;2|1&lt;&lt;8;表示开启Layer2和Layer8。</p><p>LayerMask mask &#x3D; 0&lt;&lt;3|0&lt;&lt;7;表示关闭Layer3和Layer7。</p><p>上面也可以写成：</p><p>LayerMask mask &#x3D; ~（1&lt;&lt;3|1&lt;&lt;7）;表示关闭Layer3和Layer7。</p><p>LayerMask mask &#x3D; 1&lt;&lt;2|0&lt;&lt;4;表示开启Layer2并且同时关闭Layer4.</p><h1 id="画布的三种模式"><a href="#画布的三种模式" class="headerlink" title="画布的三种模式"></a>画布的三种模式</h1><p>1.覆盖模式</p><p>创建画布之后的默认模式，画布占满整个屏幕该模式和摄像机无关，始终显示在3D物体的上面；屏幕空间为二维空间</p><p>2.摄像机模式</p><p>设置成该模式时需要指定摄像机游戏物体，画布也是占满整个屏幕</p><p>3.世界空间模式</p><p>设置为该模式后画布就变为二维的正方形模式，可以在场景内任意移动，一般作为血条显示，玩家名称等和AR开发</p><h1 id="CharacterController和ridebody的区别"><a href="#CharacterController和ridebody的区别" class="headerlink" title="CharacterController和ridebody的区别"></a>CharacterController和ridebody的区别</h1><h1 id="重写和重载的区别"><a href="#重写和重载的区别" class="headerlink" title="重写和重载的区别"></a>重写和重载的区别</h1><p>1.重载发生在同一类中，重写发生在不同类中</p><p>2.重载函数的参数不相同，重写的参数相同</p><p>3.重载调用时使用不同的参数，重写调用时参数相同</p><p>4.重载在编译时多态，重写在运行时多态</p><h1 id="unity常用的资源路径"><a href="#unity常用的资源路径" class="headerlink" title="unity常用的资源路径"></a>unity常用的资源路径</h1><p><code>Application.dataPath</code>                         Asset文件夹的绝对路径</p><p><code>Application.streamingAssetsPath</code>   <code>streamingAssetsPath</code>文件夹的绝对路径 只读目录</p><p><code>Application.persistentData</code>               可读写目录文件夹</p><h1 id="如何安全的在不同的工程之间安全地迁移asset数据"><a href="#如何安全的在不同的工程之间安全地迁移asset数据" class="headerlink" title="如何安全的在不同的工程之间安全地迁移asset数据"></a>如何安全的在不同的工程之间安全地迁移asset数据</h1><p>三种方法：</p><p>1.将Assets目录和library目录同时迁移</p><p>2.导出包</p><p>3.用unity自带的assets Server功能</p><h1 id="unity-数据保存类-PlayerPrefabs"><a href="#unity-数据保存类-PlayerPrefabs" class="headerlink" title="unity 数据保存类 PlayerPrefabs"></a>unity 数据保存类<code> PlayerPrefabs</code></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SetInt()      保存int类型</span><br><span class="line">GetInt()      获取int类型</span><br><span class="line">SetFloat()    保存float类型</span><br><span class="line">GetFloat()    获取float类型</span><br><span class="line">SetString()   保存string类型</span><br><span class="line">GetString()   获取string类型</span><br></pre></td></tr></table></figure><h1 id="动态加载资源的方式"><a href="#动态加载资源的方式" class="headerlink" title="动态加载资源的方式"></a>动态加载资源的方式</h1><p>instantiate：最简单的一种方式，以实例化的方式动态生成一个物体</p><p>Assetsbundle：将资源打成 AssetBundle 放在服务器或者本地磁盘 ，然后使用WWW模板get下来，</p><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>原文链接：<a href="https://blog.csdn.net/Sea3752/article/details/127605488">https://blog.csdn.net/Sea3752/article/details/127605488</a></p><h2 id="启动协程"><a href="#启动协程" class="headerlink" title="启动协程"></a>启动协程</h2><pre><code>    1. Startcoroutine (string methodName）:通过协程的方法名(字符串形式)启动。    2. StartCoroutine (string methodName，object values):带参数的通过方法名(字符串形式)进行调用。    3. Startcoroutine (IEnumerator routine）:通过调用方法的形式启动。</code></pre><h2 id="停止携程"><a href="#停止携程" class="headerlink" title="停止携程"></a>停止携程</h2><pre><code>    1.stopcoroutine (string methodName):通过方法名（字符串）来关闭协程。    2.stopCoroutine(IEnumerator routine):通过调用方法的形式来关闭协程。    3.stopCoroutine(Coroutine routine):通过指定的协程来关闭。    4.stopAllCoroutine() 的作用是停止所有该脚本中启动的协程。</code></pre><p>void StopTest()</p><pre><code>&#123;     //第一种方式：通过调用方法的形式来关闭协程     StopCoroutine(Test1());    //第二种方式：通过方法名（字符串）来关闭协程     StopCoroutine(&quot;Test1&quot;);    //第三种方式：通过指定的协程来关闭     Coroutine a = StartCoroutine(Test1());     StopCoroutine(a);    //关闭该脚本中启动的所有协程！     StopAllCoroutines(); &#125;</code></pre><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>协程是通过迭代器来实现功能的，通过关键字IEnumerator来定义一个迭代方法。</p><p>注意：提起IEnumerator就会想到IEnumerable，可千万不能搞混了!</p><p>StartCoroutine 接受到的是一个 IEnumerator ，这是个接口，并且是枚举器或迭代器的意思。</p><p>yield 是 C#的一个关键字，也是一个语法糖，背后的原理会生成一个类，并且也是一个枚举器，而且不同于 return，yield 可以出现多次。</p><p>yield 实际上就是返回一次结果，因为我们要一次一次枚举一个值出来，所以多个 yield 其实是个状态模式，第一个 yield 是状态 1，第二个 yield 是状态 2，每次访问时会基于状态知道当前应该执行哪一个 yield，取得哪一个值。</p><p>从程序的角度讲，协程的核心就是迭代器。想要定义一个协程方法有两个因素，第一：方法的返回值为 IEnumerator 。第二，方法中有 yield关键字。当代码满足以上两个条件时，此方法的执行就具有了迭代器的特质，其核心就是 MoveNext方法。方法内的内容将会被分成两部分：yield 之前的代码和 yield 之后的代码。yield之前的代码会在第一次执行MoveNext时执行， yield之后的代码会在第二次执行MoveNext方法时执行。而在Unity中，MoveNext的执行时机是以帧为单位的，无论你是设置了延迟时间，还是通过按钮调用MoveNext，亦或是根本没有设置执行条件，Unity都会在每一帧的生命周期中判断当前帧是否满足当前协程所定义的条件，一旦满足，当前帧就会抽出CPU时间执行你所定义的协程迭代器的MoveNext。注意，只要方法中有yield语句，那么方法的返回值就必须是 IEnumerator ，不然无法通过编译。</p><h1 id="yield-return"><a href="#yield-return" class="headerlink" title="yield return"></a>yield return</h1><p><img src="/../images/image-20230314122317605.png" alt="image-20230314122317605"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="Invoke与InvokeRepeating"><a href="#Invoke与InvokeRepeating" class="headerlink" title="Invoke与InvokeRepeating"></a>Invoke与InvokeRepeating</h1><ol><li><p>Invoke<br> Invoke() 方法是 Unity3D 的一种委托机制</p><p> 如： Invoke(“Test”, 5);   它的意思是：5 秒之后调用 Test() 方法；</p></li></ol><p> 使用 Invoke() 方法需要注意 3点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 ：它应该在 脚本的生命周期里的（Start、Update、OnGUI、FixedUpdate、LateUpdate）中被调用；</span><br><span class="line"></span><br><span class="line">2：Invoke(); 不能接受含有参数的方法；</span><br><span class="line"></span><br><span class="line">3：在 Time.ScaleTime = 0; 时， Invoke() 无效，因为它不会被调。</span><br></pre></td></tr></table></figure><ol start="2"><li><p>InvokeRepeating<br> InvokeRepeating(“Test”, 2 , 3); </p><p> 这个方法的意思是指：2 秒后调用 Test() 方法，并且之后每隔 3 秒调用一次 Test() 方法。</p><p> 被激活时设置了，但是此时将引擎对象设置为false,还会被执行。</p></li></ol><p>还有三个重要的方法：</p><p>IsInvoking：用来判断某方法是否被延时，即将执行。<br>CancelInvoke()  : 停止当前脚本中所有的Invoke和InvokeRepeating方法。<br>CancelInvoke(“MethodName”) ： 停止当前脚本某个Invoke和InvokeRepeating方法。<br>    3. Invoke与协程的区别<br>        Invoke方法：执行没有被挂起，相当于设置完被调用函数的执行时间后即时向下执行。应用到每隔一段时间执行某个函数很方便。</p><pre><code>    Coroutine方法：新开一条执行序列（跟新建线程差不多）并挂起，等待中断指令结束。开销不大。当需要挂起当前执行时使用。    协程的效率比Invoke高。4.  正在运行的脚本，隐藏物体与禁止脚本导致OnDisable，Invoke与coroutine是否正常运行？</code></pre><p>代码：</p><p><img src="/../images/image-20230314122923569.png" alt="image-20230314122923569"></p><p><img src="/../images/image-20230314122937078.png" alt="image-20230314122937078"></p><p>  原因：</p><p>​    因为游戏物体隐藏了，一切与游戏物体相关的脚本生命周期都会停止，协程自然也会停止 ；    </p><p>​    如果游戏对象没有隐藏，只是将脚本隐藏，游戏对象照样可以通过反射获取协程迭代器对象继续协程的执行。</p><h1 id="对象的移动方式"><a href="#对象的移动方式" class="headerlink" title="对象的移动方式"></a>对象的移动方式</h1><h2 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h2><h3 id="transform-position"><a href="#transform-position" class="headerlink" title="transform.position"></a>transform.position</h3><p>直接<code>transform.position</code>向量相加</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transform.position += transform.forward * Time.deltaTime * speed;  </span><br></pre></td></tr></table></figure><h3 id="Transform-Translate"><a href="#Transform-Translate" class="headerlink" title="Transform.Translate"></a>Transform.Translate</h3><p>每秒向某个方向移动多长距离，但当需要坐标转换时，使用此方法可省略转换步骤。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transform.Translate(Vector3.forward * Time.deltaTime * speed);</span><br><span class="line"></span><br><span class="line">transform.Translate(transform.forward*Time.deltaTime*mMoveSpeed, Space.World)</span><br></pre></td></tr></table></figure><h2 id="Vector3"><a href="#Vector3" class="headerlink" title="Vector3"></a>Vector3</h2><p> Vector3 类型可以存储物体的位置、方向。 V3 自带的类方法通过对位置的一些运算得到相对平滑的参数，其移动本质还是修改物体的 position。</p><h3 id="Vector3-Lerp-插值移动"><a href="#Vector3-Lerp-插值移动" class="headerlink" title="Vector3.Lerp 插值移动"></a>Vector3.Lerp 插值移动</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector3 lerp = Vector3.Lerp(transform.position, target.position, Time.deltaTime * speed);</span><br><span class="line"> </span><br><span class="line">transform.position = lerp;</span><br></pre></td></tr></table></figure><h3 id="vector3-slerp"><a href="#vector3-slerp" class="headerlink" title="vector3.slerp"></a>vector3.slerp</h3><p> 两个向量之间的球形（弧线）差值适用于从某点移动到某点（或跟随某物体），缓动效果，当前位置与目标位置距离越远，效果越明显。非匀速。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector3 slerp =  Vector3.Slerp(transform.position, target.position, Time.deltaTime * speed);</span><br><span class="line"> </span><br><span class="line">transform.position = slerp;</span><br></pre></td></tr></table></figure><h3 id="Vector3-MoveTowards"><a href="#Vector3-MoveTowards" class="headerlink" title="Vector3.MoveTowards"></a>Vector3.MoveTowards</h3><p>向某物体以某速度匀速移动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 movetowards = Vector3.MoveTowards(transform.position, target.position, Time.deltaTime * speed);</span><br><span class="line">transform.position = movetowards;</span><br></pre></td></tr></table></figure><h3 id="Vector3-SmoothDamp"><a href="#Vector3-SmoothDamp" class="headerlink" title="Vector3.SmoothDamp"></a>Vector3.SmoothDamp</h3><p>官方翻译为：“平滑阻尼”，无比丝滑的从 A 移动到 B 点，速度可控，比较适用于摄像机跟随，Lerp 也比较适用于摄像机跟随，这俩的区别在于</p><p>SmoothDamp(当前位置(V3)，目标位置(V3)，当前速度(ref:V3)，所需时间(float)，最大速度(float，可选)，Time.deltaTime(默认)(可选))<br>        当前速度：一开始赋值为 0，每次调用该方法自动修改此参数，注意设为全局变量，且为 ref</p><p>​    所需时间：该值越小，越快抵达目标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector3 smoothdamp = Vector3.SmoothDamp(transform.position, target.position, ref currentVelocity, smoothTime);</span><br><span class="line"> </span><br><span class="line">transform.position = smoothdamp;</span><br></pre></td></tr></table></figure><h2 id="Rigidbody"><a href="#Rigidbody" class="headerlink" title="Rigidbody"></a>Rigidbody</h2><p> Rigidbody 组件通过物理模拟来控制一个物体的位置，当使用此组件控制物体移动时，应在 FixedUpdate 函数中更新数据，该方法会在每一次执行物理模拟前被调用，这样要比 Update 函数更加精确。</p><h3 id="AddForce"><a href="#AddForce" class="headerlink" title="AddForce"></a>AddForce</h3><p> 添加一个方向的力到刚体，刚体将开始移动，这种方式适合模拟外力作用下的刚体运动，如子弹。但注意，此力是累加的，不适合重复施加力来模拟物体！</p><p>AddForce(有方向的力(V3)，力的模式(ForceMode,默认：ForceMode.Force))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ForceMode(力的模式):</span><br><span class="line">Force(可持续的力，受质量影响)</span><br><span class="line">Acceleration(可持续的加速度，不受质量影响)</span><br><span class="line">Impulse(一个瞬间冲击力，受质量影响)</span><br><span class="line">VelocityChange(一个瞬间速度变化，不受质量影响)</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector3 force = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, forceNumber);</span><br><span class="line"><span class="comment">//刚体组件添加力 </span></span><br><span class="line">rig.AddForce(force, ForceMode.Force);</span><br></pre></td></tr></table></figure><p>让addforce后的物体立即停下：velocity.zero &#x3D; 0</p><h3 id="MovePosition"><a href="#MovePosition" class="headerlink" title="MovePosition"></a>MovePosition</h3><p>将刚体移动到某个位置，受刚体的影响</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rig.MovePosition(transform.position + speed * Time.deltaTime);</span><br></pre></td></tr></table></figure><h3 id="Velocity"><a href="#Velocity" class="headerlink" title="Velocity"></a>Velocity</h3><p> 瞬间给一个物体恒定的速度，将该物体提升到这个速度，保持。相比较 AddForce 更加适合跳跃功能。每次跳跃都是恒定高度。做跳跃的话：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Vector3 high = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Rigidbody rig; <span class="comment">//获取当前物体的刚体组件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">    rig.velocity += high * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Character-Controller"><a href="#Character-Controller" class="headerlink" title="Character Controller"></a>Character Controller</h2><p>  角色控制器顾名思义，是 Unity 推出的特别用于角色移动的组件，使用角色控制器的物体有刚体的效果，但不会翻滚（意思是运动仅受限于碰撞体，不受其他因素影响），很适合角色移动。还可以设置斜坡参数，一定坡度自动抬升，本身也是个碰撞体。</p><h3 id="SimpleMove"><a href="#SimpleMove" class="headerlink" title="SimpleMove"></a>SimpleMove</h3><pre><code>以一定速度移动角色，以秒为单位，无需乘以时间，具备重力。</code></pre><p>SimpleMove(有方向的力(V3))<br> public float speed &#x3D; 5;</p><pre><code> public CharacterController cc; //获取当前物体的刚体组件  void Update() &#123;      cc.SimpleMove(transform.forward * speed);</code></pre><p>}</p><h3 id="Move"><a href="#Move" class="headerlink" title="Move"></a>Move</h3><pre><code>以一定速度移动角色,不具备重力，需要自行计算下落</code></pre><p>Move(有方向的力(V3))<br>public float speed &#x3D; 5;</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CharacterController cc; <span class="comment">//获取当前物体的刚体组件</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span> </span><br><span class="line">&#123;</span><br><span class="line">    cc.Move(transform.forward * speed * Time.deltaTime);</span><br><span class="line"><span class="comment">//按帧移动，用附加的CharacterController组件来提供游戏对象的移动。因为这里移动不受重力影响，所以加一个向下的移动来模拟重力。</span></span><br><span class="line"> mCharacterController.Move(-transform.up * Time.deltaTime *mMoveSpeed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="获取游戏对象的方法"><a href="#获取游戏对象的方法" class="headerlink" title="获取游戏对象的方法"></a>获取游戏对象的方法</h1><h2 id="用Find查询"><a href="#用Find查询" class="headerlink" title="用Find查询"></a>用Find查询</h2><p>​        GameObject.Find()通过对象名称(Find方法)</p><pre><code>    Transform.Find()通过对象名称(Find方法)    例子：</code></pre><p>GameObejct go &#x3D; GameObject.Find(“对象名”).GetComponent&lt;获取对象上面的组件&gt;();</p><h2 id="用标签-Tag"><a href="#用标签-Tag" class="headerlink" title="用标签 Tag"></a>用标签 Tag</h2><pre><code>    GameObject.FindWithTag 通过标签获取单个游戏对象(FindWithTag方法)。    GameObject.FindGameObjectWithTag()通过标签获取单个游戏对象（FindGameObjectWithTag方法)。    例子：</code></pre><p>GameObejct go &#x3D; GameObject.FindGameObjectWithTag(“对象设置的tag值”).GetComponent&lt;获取对象上面的组件或者脚本&gt;();</p><h2 id="用Type"><a href="#用Type" class="headerlink" title="用Type"></a>用Type</h2><pre><code>    GameObject.FindObjectOfType()通过类型获取单个游戏对象(FindObjectOfType方法)    GameObject.FindObjectsOfType()通过类型获取多个游戏对象(FindObjectsOfType方法)7. transform.GetChild()通过索引获取单个游戏对象    例子：</code></pre><p>m_Palyer &#x3D; GameObject.FindObjectOfType&lt;直接获取类：class&gt;();</p><h1 id="Ugui-x2F-Ngui渲染顺序"><a href="#Ugui-x2F-Ngui渲染顺序" class="headerlink" title="Ugui&#x2F;Ngui渲染顺序"></a>Ugui&#x2F;Ngui渲染顺序</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">不同的 Camera 的 Depth，值越大越后渲染</span><br><span class="line"></span><br><span class="line">相同 Camera 下的不同 SortingLayer</span><br><span class="line"></span><br><span class="line">相同 SortingLayer 下的不同 Z 轴/Order in Layer</span><br><span class="line"></span><br><span class="line">Camera 模式下渲染顺序：基于同 Layer 同 OrderInLayer，因为渲染顺序优先 级是：</span><br><span class="line"></span><br><span class="line">camera 的 depth&gt;Layer&gt;OrderInLayer&gt;Z 轴，注意 UI 的渲染顺序最后是OrderInLayer&gt;transform 的层级</span><br></pre></td></tr></table></figure><h1 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h1><h2 id="Mask的实现原理："><a href="#Mask的实现原理：" class="headerlink" title="Mask的实现原理："></a>Mask的实现原理：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mask会赋予Image一个特殊的材质，这个材质会给Image的每个像素点进行标记，将标记结果存放在一个缓存内（这个缓存叫做 Stencil Buffer）</span><br><span class="line">当子级UI进行渲染的时候会去检查这个 Stencil Buffer内的标记，如果当前覆盖的区域存在标记（即该区域在Image的覆盖范围内），进行渲染，否则不渲染。</span><br></pre></td></tr></table></figure><p>​        详细请看：<br>【Unity源码学习】遮罩：Mask与Mask2D - 知乎<br>前言UGUI的裁切分为Mask和Mask2D两种目录Mask原理分析RectMask2D原理分析RectMask2D和Mask的性能区分 一、Mask原理分析 Mask：IMaskable，IMaterialModifier我们先来看Mask。它可以给Mask指定一张裁切图裁切子元素…<br><a href="https://zhuanlan.zhihu.com/p/136505882">https://zhuanlan.zhihu.com/p/136505882</a></p><h1 id="动态加载资源的方式-1"><a href="#动态加载资源的方式-1" class="headerlink" title="动态加载资源的方式"></a>动态加载资源的方式</h1><h2 id="Assetsbundle"><a href="#Assetsbundle" class="headerlink" title="Assetsbundle"></a>Assetsbundle</h2><p>​    即将资源打成asset bundle放在服务器或本地磁盘，然后使用WWW模块get 下来，然后从这个bundle中load某个object,unity官方推荐也是绝大多数商业化项目使用的一种方式。</p><h2 id="Resource-Load"><a href="#Resource-Load" class="headerlink" title="Resource.Load"></a>Resource.Load</h2><p>​    可以直接load并返回某个类型的Object，前提是要把这个资源放在Resource命名的文件夹下，Unity不管有没有场景引用，都会将其全部打入到安装包中</p><h2 id="AssetDatabase-loadasset"><a href="#AssetDatabase-loadasset" class="headerlink" title="AssetDatabase.loadasset"></a>AssetDatabase.loadasset</h2><p>​    这种方式只在editor范围内有效，游戏运行时没有这个函数，它通常是在开发中调试用的。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unityGC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/zhangay1998/article/details/122626334?ops_request_misc=%7B%22request_id%22:%22167758686016800213026456%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=167758686016800213026456&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-122626334-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&amp;utm_term=unity%E9%9D%A2%E8%AF%95%E9%A2%98&amp;spm=1018.2226.3001.4187&quot;&gt;(49条消息) 2022年Unity 面试题 |五萬字 二佰道| Unity面试题大全，面试题总结【全网最全，收藏一篇足够面试】_呆呆敲代码的小Y的博客-CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    <category term="面经" scheme="http://example.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
    <category term="面经" scheme="http://example.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://example.com/2023/02/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://example.com/2023/02/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-02-19T14:20:58.109Z</published>
    <updated>2023-03-28T08:37:21.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设计模式六大原则：单一职责原则，开闭原则，里氏替换原则，依赖倒置原则，接口隔离原则，迪米特原则</span><br><span class="line"></span><br><span class="line">单例模式</span><br><span class="line">状态模式</span><br><span class="line">外观模式</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="设计模式六大原则"><a href="#设计模式六大原则" class="headerlink" title="设计模式六大原则"></a>设计模式六大原则</h1><p>原文：<a href="https://blog.csdn.net/m0_50180963/article/details/108812271">https://blog.csdn.net/m0_50180963/article/details/108812271</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">设计模式的六大原则是：</span><br><span class="line"></span><br><span class="line">单一职责原则（Single Responsibility Principle，SRP）：一个类应该只有一个引起它变化的原因。即一个类应该只负责一个职责，不应该承担过多的功能。</span><br><span class="line"></span><br><span class="line">开闭原则（Open-Closed Principle，OCP）：软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。即对于新增功能，应该通过扩展现有代码来实现，而不是直接修改现有代码。</span><br><span class="line"></span><br><span class="line">里氏替换原则（Liskov Substitution Principle，LSP）：子类应该能够替换掉它们的父类并且不影响程序的正确性。即子类可以扩展父类的功能，但不能改变父类原有的功能。</span><br><span class="line"></span><br><span class="line">依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖低层模块，两者都应该依赖其抽象。即面向接口编程，而不是面向实现编程。</span><br><span class="line"></span><br><span class="line">接口隔离原则（Interface Segregation Principle，ISP）：客户端不应该依赖于它不需要的接口。即将一个大接口拆分成多个小接口，客户端只需要依赖它需要的接口。</span><br><span class="line"></span><br><span class="line">迪米特法则（Law of Demeter，LoD）：一个对象应该对其他对象有最少的了解。即一个对象应该尽可能少地暴露它的内部细节，只与它的直接朋友（成员变量、方法参数、方法返回值）交互，不与非直接朋友交互。</span><br><span class="line"></span><br><span class="line">这些原则是软件开发中非常重要的基本原则，它们可以帮助我们设计出更加灵活、易于维护和扩展的代码，提高代码的可读性和可复用性，减少代码的错误和重构成本。</span><br><span class="line"></span><br><span class="line">以下是遵循六大原则的设计模式例子：</span><br><span class="line"></span><br><span class="line">单一职责原则：装饰器模式（Decorator Pattern）：将一个对象的功能动态地添加到另一个对象上，同时不改变其接口。</span><br><span class="line"></span><br><span class="line">开放封闭原则：观察者模式（Observer Pattern）：定义了对象之间一对多的依赖关系，使得当一个对象改变状态时，所有依赖于它的对象都能够得到通知并自动更新。</span><br><span class="line"></span><br><span class="line">里氏替换原则：工厂方法模式（Factory Method Pattern）：定义了一个用于创建对象的接口，让子类决定实例化哪一个类。这样可以使得子类在不改变父类的情况下，定义自己的行为。</span><br><span class="line"></span><br><span class="line">依赖倒置原则：依赖注入（Dependency Injection）：通过依赖注入的方式，将依赖的对象实例化过程从应用程序中移除，使得代码更容易被测试和维护。</span><br><span class="line"></span><br><span class="line">接口隔离原则：适配器模式（Adapter Pattern）：将一个类的接口转换成客户希望的另一个接口。这样可以让原本由于接口不兼容而不能一起工作的类能够协同工作。</span><br><span class="line"></span><br><span class="line">迪米特法则：门面模式（Facade Pattern）：为子系统中的一组接口提供一个</span><br></pre></td></tr></table></figure><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>（类和方法，接口）</p><p>单一职责原则（Single Responsibility Principle，SRP）又称单一功能原则。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分（There should never be more than one reason for a class to change）。</p><p>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</p><p>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力；</p><p>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费。</p><h3 id="单一职责原则的优点"><a href="#单一职责原则的优点" class="headerlink" title="单一职责原则的优点"></a>单一职责原则的优点</h3><p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。</p><p>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</p><p>提高类的可读性。复杂性降低，自然其可读性会提高。</p><p>提高系统的可维护性。可读性提高，那自然更容易维护了。</p><p>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>（扩展开放，修改关闭）</p><p>开闭原则的实现方法：可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>（基类和子类之间的关系）</p><p>里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>根据上述理解，对里氏替换原则的定义可以总结如下：</p><p>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</p><p>子类中可以增加自己特有的方法</p><p>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</p><p>当子类的方法实现父类的方法时（重写&#x2F;重载或实现抽象方法），方法的后置条件（即方法的的输出&#x2F;返回值）要比父类的方法更严格或相等</p><p>通过重写父类的方法来完成新的功能写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。</p><p>这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系。</p><p>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等。</p><p>对于正方形和长方形最好的做法是再添加一个父类，他们同时继承自这个父类。</p><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>（依赖抽象接口，而不是具体对象）</p><p>依赖倒置原则的主要作用如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">依赖倒置原则可以降低类间的耦合性。</span><br><span class="line"></span><br><span class="line">依赖倒置原则可以提高系统的稳定性。</span><br><span class="line"></span><br><span class="line">依赖倒置原则可以减少并行开发引起的风险。</span><br><span class="line"></span><br><span class="line">依赖倒置原则可以提高代码的可读性和可维护性。</span><br></pre></td></tr></table></figure><p>依赖倒置原则的实现方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</span><br><span class="line"></span><br><span class="line">每个类尽量提供接口或抽象类，或者两者都具备。</span><br><span class="line"></span><br><span class="line">变量的声明类型尽量是接口或者是抽象类。</span><br><span class="line"></span><br><span class="line">任何类都不应该从具体类派生。</span><br><span class="line"></span><br><span class="line">使用继承时尽量遵循里氏替换原则。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> principle;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DIPtest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Customer wang=<span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;顾客购买以下商品：&quot;</span>); </span><br><span class="line">        wang.shopping(<span class="keyword">new</span> <span class="title class_">ShaoguanShop</span>()); </span><br><span class="line">        wang.shopping(<span class="keyword">new</span> <span class="title class_">WuyuanShop</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商店</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Shop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sell</span><span class="params">()</span>; <span class="comment">//卖</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承接口实现抽象方法</span></span><br><span class="line"><span class="comment">//韶关网店</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShaoguanShop</span> <span class="keyword">implements</span> <span class="title class_">Shop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sell</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;韶关土特产：香菇、木耳……&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//婺源网店</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WuyuanShop</span> <span class="keyword">implements</span> <span class="title class_">Shop</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sell</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;婺源土特产：绿茶、酒糟鱼……&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//顾客</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shopping</span><span class="params">(Shop shop)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//购物</span></span><br><span class="line">        System.out.println(shop.sell()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>（接口按照功能细分）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接口要实现的功能应该尽量单一</span><br></pre></td></tr></table></figure><h3 id="接口隔离原则的优点"><a href="#接口隔离原则的优点" class="headerlink" title="接口隔离原则的优点"></a>接口隔离原则的优点</h3><p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。</p><p>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p><p>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</p><p>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</p><p>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</p><p>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</p><h3 id="接口隔离原则的实现方法"><a href="#接口隔离原则的实现方法" class="headerlink" title="接口隔离原则的实现方法"></a>接口隔离原则的实现方法</h3><p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p><p>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</p><p>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</p><p>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</p><p>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</p><p>对于接口隔离，大家还是可以参考单一职责提到的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String email, String username, String password)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logError</span><span class="params">(String msg)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">(String email)</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这时候，应该就能理解拆分的好处了。</p><h2 id="迪米特法则-（最小知识原则）"><a href="#迪米特法则-（最小知识原则）" class="headerlink" title="迪米特法则 （最小知识原则）"></a>迪米特法则 （最小知识原则）</h2><p>（类与类之间的亲疏关系）</p><h3 id="迪米特法则的定义"><a href="#迪米特法则的定义" class="headerlink" title="迪米特法则的定义"></a>迪米特法则的定义</h3><p>只与你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><h3 id="迪米特法则的优点"><a href="#迪米特法则的优点" class="headerlink" title="迪米特法则的优点"></a>迪米特法则的优点</h3><p>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。</p><p>降低了类之间的耦合度，提高了模块的相对独立性。</p><p>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</p><p>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p><h3 id="迪米特法则的实现方法"><a href="#迪米特法则的实现方法" class="headerlink" title="迪米特法则的实现方法"></a>迪米特法则的实现方法</h3><p>从迪米特法则的定义和特点可知，它强调以下两点：</p><p>从依赖者的角度来说，只依赖应该依赖的对象。</p><p>从被依赖者的角度说，只暴露应该暴露的方法。</p><p>所以，在运用迪米特法则时要注意以下 6 点。</p><p>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</p><p>在类的结构设计上，尽量降低类成员的访问权限。</p><p>在类的设计上，优先考虑将一个类设置成不变类。</p><p>在对其他类的引用上，将引用其他对象的次数降到最低。</p><p>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</p><p>谨慎使用序列化（Serializable）功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> principle;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoDtest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Agent agent=<span class="keyword">new</span> <span class="title class_">Agent</span>();</span><br><span class="line">        agent.setStar(<span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;林心如&quot;</span>));</span><br><span class="line">        agent.setFans(<span class="keyword">new</span> <span class="title class_">Fans</span>(<span class="string">&quot;粉丝韩丞&quot;</span>));</span><br><span class="line">        agent.setCompany(<span class="keyword">new</span> <span class="title class_">Company</span>(<span class="string">&quot;中国传媒有限公司&quot;</span>));</span><br><span class="line">        agent.meeting();</span><br><span class="line">        agent.business();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//经纪人</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Agent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Star myStar;</span><br><span class="line">    <span class="keyword">private</span> Fans myFans;</span><br><span class="line">    <span class="keyword">private</span> Company myCompany;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStar</span><span class="params">(Star myStar)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.myStar=myStar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFans</span><span class="params">(Fans myFans)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.myFans=myFans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(Company myCompany)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.myCompany=myCompany;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meeting</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(myFans.getName()+<span class="string">&quot;与明星&quot;</span>+myStar.getName()+<span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(myCompany.getName()+<span class="string">&quot;与明星&quot;</span>+myStar.getName()+<span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//明星</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Star</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Star(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//粉丝</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fans</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Fans(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//媒体公司</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Company(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    程序的运行结果如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    粉丝韩丞与明星林心如见面了。</span></span><br><span class="line"><span class="comment">    中国传媒有限公司与明星林心如洽淡业务。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> Equals(instance, <span class="literal">default</span>(T)) ? (instance = <span class="keyword">new</span> T()) : instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span>Mono单例</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MonoSingleton</span>&lt;<span class="title">T</span>&gt; : <span class="title">MonoBehaviour</span> <span class="keyword">where</span> <span class="title">T</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> <span class="keyword">global</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">static</span> T instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                instance =(T)FindObjectOfType&lt;T&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">global</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance!=<span class="literal">null</span> &amp;&amp; instance!=<span class="keyword">this</span>.GetComponent&lt;T&gt;())</span><br><span class="line">            &#123;</span><br><span class="line">                Destroy(<span class="keyword">this</span>.gameObject);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">this</span>.GetComponent&lt;T&gt;();</span><br><span class="line">            DontDestroyOnLoad(<span class="keyword">this</span>.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.OnAwake();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.OnStart();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnStart</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnAwake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.1&gt;、定义</span><br><span class="line"></span><br><span class="line">状态模式的核心思想是允许一个对象在它的内部状态改变时改变它的行为，即不同的状态对应不同的行为。</span><br><span class="line"></span><br><span class="line">状态模式的针对性很强，当有状态变化的时候可以选择状态模式。</span><br></pre></td></tr></table></figure><p>状态模式效果：</p><p>1&gt;、状态模式的本质是将条件语句的各个分支封装起来，从而实现了状态逻辑与动作的分离。当分支很多时，状态模式可以给代码的维护带来很大的便利。</p><p>2&gt;、多态性的实现。</p><p>3&gt;、状态转换的显示化。状态模式将状态的切换逻辑存放到状态对象中，可以实现状态的自动切换，使各个状态界限分明，相互独立。</p><p>4&gt;、采用分支结构时，Context对象需要关心所有状态的切换逻辑，当分支越来越多时，复杂度也会越来越大。而状态模式中Context无需关心状态的切换逻辑，每个状态对象也只需关心状态的下一个可能状态的切换逻辑。</p><p>状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑表示不同状态的一系列类中，可以把复杂的判断逻辑简化。状态模式的目的是为了将状态与不同状态下的行为进行分离，从而简化复杂的条件判断。</p><p>状态模式主要适用场景：</p><p>◊ 一个对象的行为取决于它的状态，并且必须在运行时刻根据状态改变其行为；</p><p>◊ 一个操作中包含庞大的分支结构，并且这些分支决定于对象的状态。</p><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>外观模式（Facade Pattern）是一种结构型设计模式， 能为复杂系统、 程序库或框架提供一个简单 （但有限） 的接口。</p><p>外观定义了一个高层接口，让子系统更容易使用。使用外观模式时，我们创建了一个统一的类，用来包装子系统中一个或多个复杂的类，客户端可以直接通过外观类来调用内部子系统中方法，从而外观模式让客户和子系统之间避免了紧耦合。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p><strong>外观角色（Facade）</strong>：在客户端可以调用它的方法，在外观角色中可以知道相关的（一个或者多个）子系统的功能和责任；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理。<br><strong>子系统角色（SubSystem Classes）</strong>：在软件系统中可以有一个或者多个子系统角色，每一个子系统可以不是一个单独的类，而是一个类的集合，它实现子系统的功能；每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的请求；子系统并不知道外观的存在，对于子系统而言，外观角色仅仅是另外一个客户端而已。</p><h1 id="中介系统"><a href="#中介系统" class="headerlink" title="中介系统"></a>中介系统</h1><h2 id="中介者模式的优点："><a href="#中介者模式的优点：" class="headerlink" title="中介者模式的优点："></a>中介者模式的优点：</h2><p>中介者模式简化了对象之间的交互，他用中介者和同事之间的一对多的关系代替了原本同事对象之间的多对多的关系。<br>将各个同事对象解耦，我们可以独立地改变每一个同事对象和中介者。</p><h2 id="中介者模式的缺点："><a href="#中介者模式的缺点：" class="headerlink" title="中介者模式的缺点："></a>中介者模式的缺点：</h2><p>在具体的中介类中包含了大量的同事之间的交互细节，这可能导致具体中介类非常复杂，当然我们可以通过命令模式来改造中介者模式。</p><h1 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问者模式是封装一些施加于某种数据结构之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构则可以保存不变。访问者模式适用于数据结构相对稳定的系统， 它把数据结构和作用于数据结构之上的操作之间的耦合度降低，使得操作集合可以相对自由地改变。</span><br><span class="line"></span><br><span class="line">　数据结构的每一个节点都可以接受一个访问者的调用，此节点向访问者对象传入节点对象，而访问者对象则反过来执行节点对象的操作。这样的过程叫做“双重分派”。节点调用访问者，将它自己传入，访问者则将某算法针对此节点执行。</span><br></pre></td></tr></table></figure><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><p>在Unity中实现命令模式，首先需要定义命令接口（Command），并在其中定义命令的执行方法（Execute），然后再定义具体命令类（ConcreteCommand），并实现其执行方法，最后定义命令的接收者（Receiver），并将具体命令类与接收者关联。以下是一个简单的代码示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Command</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体命令类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteCommand</span> : <span class="title">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span>(<span class="params">Receiver receiver</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span> &#123;</span><br><span class="line">        receiver.Action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义命令接收者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Receiver</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span>()</span> &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Receiver Action&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用时，可以将具体命令类与命令接收者进行关联，并将命令对象存储在一个命令队列中，等待执行。以下是一个示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建命令接收者</span></span><br><span class="line">Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建具体命令类</span></span><br><span class="line">Command command = <span class="keyword">new</span> ConcreteCommand(receiver);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建命令队列</span></span><br><span class="line">Queue&lt;Command&gt; commandQueue = <span class="keyword">new</span> Queue&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将命令对象加入队列</span></span><br><span class="line">commandQueue.Enqueue(command);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令队列中的命令</span></span><br><span class="line"><span class="keyword">foreach</span>(Command cmd <span class="keyword">in</span> commandQueue) &#123;</span><br><span class="line">    cmd.Execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在实际开发中，命令模式通常与撤销&#x2F;重做、历史记录等功能一起使用，可以在执行命令时将命令对象存储在历史记录中，以便实现撤销&#x2F;重做等功能。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>在Unity中，命令模式通常用于实现撤销和重做功能，或者在游戏中使用命令对象控制对象的行为。以下是Unity中使用命令模式的一些常见用例：</p><ol><li>撤销和重做：使用命令模式可以将用户操作封装为命令对象，并将这些命令对象存储在历史记录中，以便用户可以撤销和重做操作。</li><li>游戏中的命令：使用命令模式可以将玩家的输入封装为命令对象，以便在游戏中控制对象的行为，比如移动、攻击等。</li></ol><p>在使用命令模式时，通常需要定义一个命令接口，该接口包含执行和撤销方法，然后定义一个具体命令类，实现命令接口中的方法。最后，在客户端代码中创建命令对象，并将其传递给调用者对象，以便在运行时执行命令。在Unity中，可以使用C#语言实现命令模式。例如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICommand</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>()</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Undo</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体命令类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveCommand</span> : <span class="title">ICommand</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Vector3 _direction;</span><br><span class="line">    <span class="keyword">private</span> Transform _transform;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MoveCommand</span>(<span class="params">Transform transform, Vector3 direction</span>)</span> &#123;</span><br><span class="line">        _transform = transform;</span><br><span class="line">        _direction = direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span> &#123;</span><br><span class="line">        _transform.Translate(_direction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Undo</span>()</span> &#123;</span><br><span class="line">        _transform.Translate(-_direction);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建命令对象，并执行命令</span></span><br><span class="line"><span class="keyword">var</span> moveCommand = <span class="keyword">new</span> MoveCommand(transform, Vector3.forward);</span><br><span class="line">moveCommand.Execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销命令</span></span><br><span class="line">moveCommand.Undo();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>在Unity中实现策略模式，首先需要定义一个策略接口（Strategy），并在其中定义一个策略方法（Execute），然后再定义具体的策略类（ConcreteStrategyA、ConcreteStrategyB等），并实现其策略方法。接下来，定义一个环境类（Context），并将具体策略类与环境类关联。最后，在需要使用策略的地方调用环境类的策略方法即可。以下是一个简单的代码示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义策略接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Strategy</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Execute</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体策略类A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> : <span class="title">Strategy</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span> &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;ConcreteStrategyA.Execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体策略类B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> : <span class="title">Strategy</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span> &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;ConcreteStrategyB.Execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义环境类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span>(<span class="params">Strategy strategy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExecuteStrategy</span>()</span> &#123;</span><br><span class="line">        strategy.Execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用时，可以根据需要选择具体的策略类并创建对应的环境对象，然后调用环境对象的策略方法即可。以下是一个示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建具体策略类A和B</span></span><br><span class="line">ConcreteStrategyA strategyA = <span class="keyword">new</span> ConcreteStrategyA();</span><br><span class="line">ConcreteStrategyB strategyB = <span class="keyword">new</span> ConcreteStrategyB();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建环境对象并关联具体策略类A</span></span><br><span class="line">Context context = <span class="keyword">new</span> Context(strategyA);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用环境对象的策略方法</span></span><br><span class="line">context.ExecuteStrategy(); <span class="comment">// 输出 &quot;ConcreteStrategyA.Execute&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换环境对象的策略为具体策略类B</span></span><br><span class="line">context = <span class="keyword">new</span> Context(strategyB);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次调用环境对象的策略方法</span></span><br><span class="line">context.ExecuteStrategy(); <span class="comment">// 输出 &quot;ConcreteStrategyB.Execute&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>策略模式可以使得程序更加灵活，能够动态地切换不同的策略，适用于一些需要根据不同条件采取不同策略的场景。</p><h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><p>在Unity中，策略模式通常用于在不同情况下应用不同的算法，同时使这些算法易于扩展和修改。以下是Unity中使用策略模式的一些常见用例：</p><ol><li>游戏AI：使用策略模式可以让游戏AI根据不同的情况采用不同的策略，比如选择最佳的攻击方式、躲避障碍物等。</li><li>游戏玩法：使用策略模式可以让游戏在不同的情况下应用不同的玩法规则，比如不同的难度级别、不同的游戏模式等。</li><li>UI设计：使用策略模式可以让UI界面根据不同的情况采用不同的布局、颜色、字体等，以适应不同的用户需求。</li></ol><p>在使用策略模式时，通常需要定义一个策略接口，该接口包含所有的算法方法，然后定义一个具体策略类，实现策略接口中的算法方法。最后，在客户端代码中创建策略对象，并将其传递给上下文对象，以便在运行时根据需要切换不同的策略。在Unity中，可以使用C#语言实现策略模式。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;设计模式六大原则：单一职责原则，开闭原则，里氏替换原则，依赖倒置原则，接口隔离原则，迪米特原则&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;单例模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;状态模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;外观模式&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="http://example.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Xlua01</title>
    <link href="http://example.com/2023/02/13/Xlua01/"/>
    <id>http://example.com/2023/02/13/Xlua01/</id>
    <published>2023-02-13T13:47:04.000Z</published>
    <updated>2023-03-08T10:06:24.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">整包分包</span><br><span class="line">资源加载</span><br><span class="line">Lua管理</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="整包分包"><a href="#整包分包" class="headerlink" title="整包分包"></a>整包分包</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">整包：第一次下载时下载所有资源</span><br><span class="line">优点：首次更新少，直接启动</span><br><span class="line">缺点：安装包下载时间长</span><br><span class="line">分包：第一次下载下载少量资源，进入游戏在进行补充</span><br><span class="line">优点：安装包小，下载时间短，安装快</span><br><span class="line">缺点：首次更新时间长</span><br><span class="line"></span><br><span class="line">整包时，将只读目录考培到可读写目录  </span><br><span class="line">只读目录：Application.streamingAssetsPath</span><br><span class="line">可读写目录：Application.persistentDataPath</span><br><span class="line"></span><br><span class="line">// 全局查找lua函数</span><br><span class="line">XLua.LuaFunction function = Manager.Lua.luaEnv.Global.Get&lt;XLua.LuaFunction&gt;(&quot;Main&quot;);</span><br><span class="line">            function.Call();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h1><p><img src="/../images/image-20230216103247984.png" alt="image-20230216103247984"></p><p><img src="/../images/image-20230216103309991.png" alt="image-20230216103309991"></p><p><img src="/../images/image-20230216103729533.png" alt="image-20230216103729533"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最后写入防止下载到一半退出</span><br></pre></td></tr></table></figure><h1 id="Lua管理"><a href="#Lua管理" class="headerlink" title="Lua管理"></a>Lua管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异步加载 同步使用 预加载</span><br></pre></td></tr></table></figure><h2 id="Lua文件加载"><a href="#Lua文件加载" class="headerlink" title="Lua文件加载"></a>Lua文件加载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在编辑器模式下，直接读取编辑器中的文件进行更新，写入脚本字典</span><br><span class="line">非编辑器模式，在解析bundle时将Lua脚本读出，并进行预加载，写入脚本字典</span><br><span class="line">注意资源加载为协程加载，只有当Lua脚本文件加载完毕时在执行Lua相关函数</span><br></pre></td></tr></table></figure><h1 id="LuaBehaviour"><a href="#LuaBehaviour" class="headerlink" title="LuaBehaviour"></a>LuaBehaviour</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LuaBehaviour</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> LuaEnv m_LuaEnv = Manager.Lua.luaEnv;</span><br><span class="line">    <span class="keyword">protected</span> LuaTable m_ScriptEnv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Action m_LuaUpdate;</span><br><span class="line">    <span class="keyword">private</span> Action m_LuaInit;</span><br><span class="line">    <span class="keyword">private</span> Action m_LuaOnDestory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> luaName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_ScriptEnv = m_LuaEnv.NewTable();</span><br><span class="line">        <span class="comment">//为每个脚本设置一个独立的环境，</span></span><br><span class="line">        <span class="comment">//可在一定程度防止脚本之间全局变量函数冲突</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> meta = m_LuaEnv.NewTable();</span><br><span class="line">        meta.Set(<span class="string">&quot;__index&quot;</span>, m_LuaEnv.Global);</span><br><span class="line">        m_ScriptEnv.SetMetaTable(meta);</span><br><span class="line">        meta.Dispose();</span><br><span class="line"></span><br><span class="line">        m_ScriptEnv.Set(<span class="string">&quot;self&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"><span class="built_in">string</span> LuaName</span>)</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">this</span>.luaName= LuaName;</span><br><span class="line">        m_LuaEnv.DoString(Manager.Lua.GetLuaScript(luaName), luaName, m_ScriptEnv);</span><br><span class="line">        <span class="comment">//m_ScriptEnv.Get(&quot;Awake&quot;, out m_LuaAwake);</span></span><br><span class="line">        <span class="comment">//m_ScriptEnv.Get(&quot;Start&quot;, out m_LuaStart);</span></span><br><span class="line">        m_ScriptEnv.Get(<span class="string">&quot;Update&quot;</span>, <span class="keyword">out</span> m_LuaUpdate);</span><br><span class="line">        m_ScriptEnv.Get(<span class="string">&quot;Init&quot;</span>, <span class="keyword">out</span> m_LuaInit);</span><br><span class="line">        m_ScriptEnv.Get(<span class="string">&quot;OnDestroy&quot;</span>, <span class="keyword">out</span> m_LuaOnDestory);</span><br><span class="line">        m_LuaInit?.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_LuaUpdate?.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Clear</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_LuaOnDestory = <span class="literal">null</span>;</span><br><span class="line">        m_LuaInit = <span class="literal">null</span>;</span><br><span class="line">        m_ScriptEnv?.Dispose();</span><br><span class="line">        m_ScriptEnv= <span class="literal">null</span>;</span><br><span class="line">        m_LuaUpdate = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_LuaOnDestory?.Invoke();</span><br><span class="line">        Clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnApplicationQuit</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, GameObject&gt; m_UI = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, GameObject&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OpenUI</span>(<span class="params"><span class="built_in">string</span> uiName,<span class="built_in">string</span> luaName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Debug.Log(&quot;打开UI&quot;);</span></span><br><span class="line">        GameObject ui = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(m_UI.TryGetValue(uiName,<span class="keyword">out</span> ui))</span><br><span class="line">        &#123;</span><br><span class="line">            UILogic uILogic=ui.GetComponent&lt;UILogic&gt;();</span><br><span class="line">            uILogic.OnOpen();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Manager.Resource.LoadUIPrefab(uiName, (Object obj) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            ui=Instantiate(obj) <span class="keyword">as</span> GameObject;</span><br><span class="line">            m_UI.Add(uiName, ui);</span><br><span class="line">            UILogic uILogic=ui.AddComponent&lt;UILogic&gt;();</span><br><span class="line">            uILogic.Init(luaName);</span><br><span class="line">            uILogic.OnOpen();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="xlua引用C-接口"><a href="#xlua引用C-接口" class="headerlink" title="xlua引用C#接口"></a>xlua引用C#接口</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Manager = CS.Manager;</span><br><span class="line">PathUtil = CS.PathUtil</span><br><span class="line">Vector3= CS.UnityEngine.Vector3</span><br><span class="line">Input = CS.UnityEngine.Input</span><br><span class="line">KeyCode = CS.UnityEngine.KeyCode</span><br><span class="line">Time = CS.UnityEngine.Time</span><br><span class="line"><span class="keyword">local</span> ui_group =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;Main&quot;</span>,</span><br><span class="line"><span class="string">&quot;UI&quot;</span>,</span><br><span class="line"><span class="string">&quot;Box&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">local</span> entity_group =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;Player&quot;</span>,</span><br><span class="line"><span class="string">&quot;Monster&quot;</span>,</span><br><span class="line"><span class="string">&quot;Effect&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--设置UI分组</span></span><br><span class="line">Manager.UI:SetUIGroup(ui_group)</span><br><span class="line">Manager.Entity:SetEntityGroup(entity_group)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Main</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello Word&quot;</span>)</span><br><span class="line"><span class="comment">--Manager.UI:OpenUI(&quot;TestButton 1&quot;,&quot;UI&quot;,&quot;ui.TestUI&quot;)</span></span><br><span class="line">Manager.Scene:ChangeScene(<span class="string">&quot;Scene1&quot;</span>,<span class="string">&quot;scene.Scene01&quot;</span>)</span><br><span class="line"><span class="comment">--Manager.UI:OpenUI(&quot;TestButton&quot;,&quot;Main&quot;,&quot;ui.TestUI&quot;)</span></span><br><span class="line"><span class="comment">--Manager.UI:OpenUI(&quot;TestButton 2&quot;,&quot;UI&quot;,&quot;ui.TestUI&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--Main()</span></span><br></pre></td></tr></table></figure><h1 id="场景管理"><a href="#场景管理" class="headerlink" title="场景管理"></a>场景管理</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MySceneManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> m_LocalName = <span class="string">&quot;[SceneLogic]&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        SceneManager.activeSceneChanged += OnActiveSceneChange;</span><br><span class="line">        <span class="comment">//ChangeScene(&quot;Scene1&quot;, &quot;scene.Scene01&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnActiveSceneChange</span>(<span class="params">Scene s1, Scene s2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!s1.isLoaded || !s2.isLoaded)</span><br><span class="line">        &#123;</span><br><span class="line">            UnityEngine.Debug.LogWarning</span><br><span class="line">                (s1.path + <span class="string">&quot;:&quot;</span> +s1.isLoaded + <span class="string">&quot;  &quot;</span> + s2.path + <span class="string">&quot;:&quot;</span> +s2.isLoaded);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//SceneLogic logic1 = GetSceneLogic(s1);</span></span><br><span class="line">        SceneLogic logic2 = GetSceneLogic(s2);</span><br><span class="line">        <span class="comment">//logic1?.OnInActive();</span></span><br><span class="line">        logic2?.OnActive();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetActive</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Scene scene = SceneManager.GetSceneByName(sceneName);</span><br><span class="line">        SceneManager.SetActiveScene(scene);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判断场景是否已经加载</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">IsLoadedScene</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Scene scene = SceneManager.GetSceneByName(sceneName);</span><br><span class="line">        <span class="keyword">return</span> scene.isLoaded;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 加载新场景</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadScene</span>(<span class="params"><span class="built_in">string</span> sceneName, <span class="built_in">string</span> luaName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Manager.Resource.LoadScene(sceneName, (UnityEngine.Object obj) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            StartCoroutine(StartLoadScene(sceneName, luaName, LoadSceneMode.Additive));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>切换场景</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChangeScene</span>(<span class="params"><span class="built_in">string</span> sceneName, <span class="built_in">string</span> luaName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Manager.Resource.LoadScene(sceneName, (UnityEngine.Object obj) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            StartCoroutine(StartLoadScene(sceneName, luaName, LoadSceneMode.Single));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 卸载场景</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnloadSceneAsync</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(UnLoadScene(sceneName));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">StartLoadScene</span>(<span class="params"><span class="built_in">string</span> sceneName, <span class="built_in">string</span> luaName, LoadSceneMode mode</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (IsLoadedScene(sceneName))</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line">        AsyncOperation <span class="keyword">async</span> = SceneManager.LoadSceneAsync(sceneName, mode);</span><br><span class="line">        <span class="keyword">async</span>.allowSceneActivation = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">async</span>;</span><br><span class="line">        Scene scene = SceneManager.GetSceneByName(sceneName);</span><br><span class="line">        GameObject go = <span class="keyword">new</span> GameObject(m_LocalName);</span><br><span class="line">        SceneManager.MoveGameObjectToScene(go, scene);</span><br><span class="line">        SceneLogic logic = go.AddComponent&lt;SceneLogic&gt;();</span><br><span class="line">        logic.SceneName = sceneName;</span><br><span class="line">        logic.Init(luaName);</span><br><span class="line">        logic.OnEnter();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">UnLoadScene</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Scene scene = SceneManager.GetSceneByName(sceneName);</span><br><span class="line">        <span class="keyword">if</span> (!scene.isLoaded)</span><br><span class="line">        &#123;</span><br><span class="line">            UnityEngine.Debug.LogErrorFormat(<span class="string">&quot;Scene:&#123;0&#125; Is Not Load&quot;</span>, sceneName);</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        SceneLogic logic = GetSceneLogic(scene);</span><br><span class="line">        logic?.OnQuit();</span><br><span class="line">        AsyncOperation <span class="keyword">async</span> = SceneManager.UnloadSceneAsync(sceneName);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">async</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SceneLogic <span class="title">GetSceneLogic</span>(<span class="params">Scene scene</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        GameObject[] gameObjects = scene.GetRootGameObjects();</span><br><span class="line">        <span class="keyword">foreach</span> (GameObject gameObject <span class="keyword">in</span> gameObjects)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (gameObject.name.CompareTo(m_LocalName) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                SceneLogic logic = gameObject.GetComponent&lt;SceneLogic&gt;();</span><br><span class="line">                <span class="keyword">return</span> logic;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="声音管理"><a href="#声音管理" class="headerlink" title="声音管理"></a>声音管理</h1><p><img src="/../images/image-20230304161627209.png" alt="image-20230304161627209"></p><p><img src="/../images/image-20230304195439637.png" alt="image-20230304195439637"></p><p>没有可以绑定float为参数的配置需要进行添加</p><p><img src="/../images/image-20230304195828033.png" alt="image-20230304195828033"></p><p><img src="/../images/image-20230304200039601.png" alt="image-20230304200039601"></p><h1 id="Callback名单"><a href="#Callback名单" class="headerlink" title="Callback名单"></a>Callback名单</h1><p><img src="/../images/image-20230304203553452.png" alt="image-20230304203553452"></p><h1 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h1><p><img src="/../images/image-20230306101358204.png" alt="image-20230306101358204"></p><p>C#首先dispose但是Lua还在监听C#的事件，会报错</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnChickSet</span>(<span class="params"><span class="keyword">this</span> Button button, <span class="built_in">object</span> callback</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       LuaFunction function=callback <span class="keyword">as</span> LuaFunction;</span><br><span class="line">       button.onClick.RemoveAllListeners();</span><br><span class="line">       button.onClick.AddListener(() =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           function?.Call();</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnValueChangeSet</span>(<span class="params"><span class="keyword">this</span> Slider slider, <span class="built_in">object</span> callback</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       LuaFunction function=callback <span class="keyword">as</span> LuaFunction;</span><br><span class="line">       slider.onValueChanged.RemoveAllListeners();</span><br><span class="line">       slider.onValueChanged.AddListener((<span class="built_in">float</span> <span class="keyword">value</span>) =&gt;</span><br><span class="line">       &#123;</span><br><span class="line">           function?.Call(<span class="keyword">value</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>修改为这样使用的就是lua中的方法</p><p>调用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">play_Music:OnChickSet(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">Manager.Sound:PlayMusic(<span class="string">&quot;kiss.mp3&quot;</span>);</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">pause_Music:OnChickSet(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">Manager.Sound:OnPauseMusic();</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">unpause_Music:OnChickSet(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">Manager.Sound:OnUnPauseMusic();</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">stop_Music:OnChickSet(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">Manager.Sound:StopMusic();</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">play_Sound:OnChickSet(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">Manager.Sound:PlaySound(<span class="string">&quot;ui_touch.wav&quot;</span>);</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">music_V:OnValueChangeSet(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(volume)</span></span></span><br><span class="line">Manager.Sound:SetMusicVolue(volume)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line">sound_V:OnValueChangeSet(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(volume)</span></span></span><br><span class="line">Manager.Sound:SetSoundVolue(volume)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230306102904772.png" alt="image-20230306102904772"></p><p>对于拓展方法必须加上<code>LuaCallCSharp</code>才能使用</p><h1 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h1><p><img src="/../images/image-20230306103612103.png" alt="image-20230306103612103"></p><p>可存放多种物品</p><p><img src="/../images/image-20230306103623397.png" alt="image-20230306103623397"></p><p>对象池对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PoolObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Object Object;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="comment">//最后一次使用时间,用于销毁</span></span><br><span class="line">    <span class="keyword">public</span> System.DateTime LastUseTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PoolObject</span>(<span class="params"><span class="built_in">string</span> name, Object obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        Object= obj;</span><br><span class="line">        LastUseTime =System.DateTime.Now;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>针对有两种不同的对象：游戏对象和Bundle1对象，需要抽象父类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PoolBase</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//自动释放时间/秒</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">float</span> m_ReleaseTime;</span><br><span class="line">    <span class="comment">//上次释放资源的时间/毫微秒 1s=1e7毫微秒</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">long</span> m_LastReleaseTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;PoolObject&gt; m_Objects;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_LastReleaseTime = System.DateTime.Now.Ticks;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;time&quot;&gt;</span>初始化时间<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"><span class="built_in">float</span> ReleaseTime</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_ReleaseTime = ReleaseTime;</span><br><span class="line">        m_Objects = <span class="keyword">new</span> List&lt;PoolObject&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 取出对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>对象名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Object <span class="title">Spwan</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (PoolObject obj <span class="keyword">in</span> m_Objects)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.Name == name)</span><br><span class="line">            &#123;</span><br><span class="line">                m_Objects.Remove(obj);</span><br><span class="line">                <span class="keyword">return</span> (Object)obj.Object;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 回收对象</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>对象名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;obj&quot;&gt;</span>对象实体<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">UnSpwan</span>(<span class="params"><span class="built_in">string</span> name,Object obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PoolObject o=<span class="keyword">new</span> PoolObject(name,obj);</span><br><span class="line">        m_Objects.Add(o)  ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放资源</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Release</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(System.DateTime.Now.Ticks-m_LastReleaseTime&gt;=m_ReleaseTime*<span class="number">1e7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_LastReleaseTime=System.DateTime.Now.Ticks; </span><br><span class="line">            Release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对象池功能：存取释放销毁</p><p>游戏对象对象池类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameObjectPool</span> : <span class="title">PoolBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Object <span class="title">Spwan</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">object</span> obj = <span class="keyword">base</span>.Spwan(name);</span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        GameObject go=obj <span class="keyword">as</span> GameObject;</span><br><span class="line">        go.SetActive(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> go;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UnSpwan</span>(<span class="params"><span class="built_in">string</span> name, Object obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        GameObject go = obj <span class="keyword">as</span> GameObject;</span><br><span class="line">        go.SetActive(<span class="literal">false</span>);</span><br><span class="line">        go.transform.SetParent(<span class="keyword">this</span>.transform, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">base</span>.UnSpwan(name, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Release</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Release();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> m_Objects)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(System.DateTime.Now.Ticks - item.LastUseTime.Ticks&gt;=m_ReleaseTime*<span class="number">1e7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogFormat(<span class="string">&quot;GameObjectPoo Release Obj:&#123;0&#125;&quot;</span>,item.Name);</span><br><span class="line">                Destroy((Object)item.Object);</span><br><span class="line">                m_Objects.Remove(item);</span><br><span class="line">                Release();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他文件对象池类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssetPool</span> : <span class="title">PoolBase</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Object <span class="title">Spwan</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.Spwan(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">UnSpwan</span>(<span class="params"><span class="built_in">string</span> name, Object obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.UnSpwan(name, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Release</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.Release();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> m_Objects)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (System.DateTime.Now.Ticks - item.LastUseTime.Ticks &gt;= m_ReleaseTime * <span class="number">1e7</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogFormat(<span class="string">&quot;AssetPool Release Obj:&#123;0&#125;&quot;</span>, item.Name);</span><br><span class="line">                Manager.Resource.UnLoadBundle(name);</span><br><span class="line">                m_Objects.Remove(item);</span><br><span class="line">                Release();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="资源卸载"><a href="#资源卸载" class="headerlink" title="资源卸载"></a>资源卸载</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有当使用此资源的对象都被销毁时才能进行资源卸载</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230306172633604.png" alt="image-20230306172633604"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当bundle被使用时，放入Asset Bundles，AssetBundle存放正在使用的Bundle，当引用对象小于等于0时，放入AssetPool，经过一段时间进行销毁或继续被使用</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20230306173107250.png" alt="image-20230306173107250"></p><p>加载资源：首先在AssetBundles字典中寻找，不存在则在对象池中寻找，对象池中不存在则进行加载</p><p>卸载资源：当游戏对象被销毁时将所使用的资源，和其依赖资源，加到对象池中，在对象池中经过销毁时间后卸载bundle</p><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><p><img src="/../images/image-20230306212237748.png" alt="image-20230306212237748"></p><h2 id="编译Xlua第三方库"><a href="#编译Xlua第三方库" class="headerlink" title="编译Xlua第三方库"></a>编译Xlua第三方库</h2><p>将</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DllImport(LUADLL, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">luaopen_rapidjson</span>(<span class="params">System.IntPtr L</span>)</span>;</span><br><span class="line"></span><br><span class="line">       [<span class="meta">MonoPInvokeCallback(typeof(LuaDLL.lua_CSFunction))</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">LoadRapidJson</span>(<span class="params">System.IntPtr L</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">return</span> luaopen_rapidjson(L);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>加到LuaDLL.cs上</p><p><img src="/../images/image-20230306213301201.png" alt="image-20230306213301201"></p><p>为Lua虚拟机添加<code>luaEnv.AddBuildin(&quot;rapidjson&quot;, XLua.LuaDLL.Lua.LoadRapidJson);</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> rapidjson = <span class="built_in">require</span>(<span class="string">&#x27;rapidjson&#x27;</span>)  </span><br><span class="line"><span class="keyword">local</span> t = rapidjson.decode(<span class="string">&#x27;&#123;&quot;a&quot;:123&#125;&#x27;</span>) <span class="comment">--将json转为Lua可识别的信息</span></span><br><span class="line"><span class="built_in">print</span>(t.a)</span><br><span class="line">t.a = <span class="number">456</span></span><br><span class="line"><span class="keyword">local</span> s = rapidjson.encode(t)        <span class="comment">--将信息转回Lua</span></span><br></pre></td></tr></table></figure><h2 id="网络客户端C-部分"><a href="#网络客户端C-部分" class="headerlink" title="网络客户端C#部分"></a>网络客户端C#部分</h2><h3 id="NetClient"><a href="#NetClient" class="headerlink" title="NetClient"></a>NetClient</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NetClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Tcp给客户端使用的</span></span><br><span class="line">    <span class="keyword">private</span> TcpClient m_Client;</span><br><span class="line">    <span class="comment">//从TcpClient能够获取到的网路流，用于传输数据，只能用于TCP-IP</span></span><br><span class="line">    <span class="comment">//不能用于UDP</span></span><br><span class="line">    <span class="keyword">private</span> NetworkStream m_TcpStream;</span><br><span class="line">    <span class="comment">//接受数据的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> BufferSize = <span class="number">1024</span> * <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">byte</span>[] m_Buffer=<span class="keyword">new</span> <span class="built_in">byte</span>[BufferSize];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于解析接收到的数据</span></span><br><span class="line">    <span class="keyword">private</span> MemoryStream m_MemStream;</span><br><span class="line">    <span class="keyword">private</span> BinaryReader m_BinaryReader;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetClient</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_MemStream=<span class="keyword">new</span> MemoryStream();</span><br><span class="line">        m_BinaryReader=<span class="keyword">new</span> BinaryReader(m_MemStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnConnectServer</span>(<span class="params"><span class="built_in">string</span> host,<span class="built_in">int</span> port</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Dns.GetHostAddresses:返回指定主机的Internet协议（IP）地址</span></span><br><span class="line">            IPAddress[] addresses = Dns.GetHostAddresses(host);</span><br><span class="line">            <span class="keyword">if</span>(addresses.Length == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogErrorFormat(<span class="string">&quot;host:&#123;0&#125;  Invalid&quot;</span>, host);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (addresses[<span class="number">0</span>].AddressFamily== AddressFamily.InterNetworkV6)</span><br><span class="line">            &#123;</span><br><span class="line">                m_Client=<span class="keyword">new</span> TcpClient(AddressFamily.InterNetworkV6);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                m_Client = <span class="keyword">new</span> TcpClient(AddressFamily.InterNetwork);</span><br><span class="line">            m_Client.SendTimeout = <span class="number">1000</span>;</span><br><span class="line">            m_Client.ReceiveTimeout = <span class="number">1000</span>;</span><br><span class="line">            m_Client.NoDelay= <span class="literal">true</span>;</span><br><span class="line">            m_Client.BeginConnect(host,port,OnConnet,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnConnet</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_Client==<span class="literal">null</span>||!m_Client.Connected)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;connect server error!!!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Manager.Net.OnNetConnected();</span><br><span class="line">        m_TcpStream = m_Client.GetStream();</span><br><span class="line">        m_TcpStream.BeginRead(m_Buffer, <span class="number">0</span>, BufferSize, OnRead, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnRead</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_Client == <span class="literal">null</span> || m_TcpStream == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//收到的消息长度</span></span><br><span class="line">            <span class="built_in">int</span> length=m_TcpStream.EndRead(ar);</span><br><span class="line">            <span class="comment">//判断长度和连接是否正常</span></span><br><span class="line">            <span class="keyword">if</span>(length &lt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                OnDisConnected();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ReceiveData(length);</span><br><span class="line">            <span class="keyword">lock</span>(m_TcpStream)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将m_Buffer清空，并继续读取</span></span><br><span class="line">                Array.Clear(m_Buffer,<span class="number">0</span>,m_Buffer.Length);</span><br><span class="line">                <span class="comment">//重新读取新的数据</span></span><br><span class="line">                m_TcpStream.BeginRead(m_Buffer,<span class="number">0</span>,BufferSize,OnRead,<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(e);</span><br><span class="line">            OnDisConnected();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 断开连接</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisConnected</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_Client!=<span class="literal">null</span> &amp;&amp; m_Client.Connected)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Client.Close();</span><br><span class="line">            m_Client = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            m_TcpStream.Close();</span><br><span class="line">            m_TcpStream = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Manager.Net.OnDisConnected();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 解析数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReceiveData</span>(<span class="params"><span class="built_in">int</span> length</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先移动到最后</span></span><br><span class="line">        m_MemStream.Seek(<span class="number">0</span>, SeekOrigin.End);</span><br><span class="line">        <span class="comment">//添加数据</span></span><br><span class="line">        m_MemStream.Write(m_Buffer, <span class="number">0</span>, length);</span><br><span class="line">        <span class="comment">//在移动回去</span></span><br><span class="line">        m_MemStream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">        <span class="comment">//剩余字节数&gt;=8说明消息是完整的</span></span><br><span class="line">        <span class="keyword">while</span>(RemainingBytesLength()&gt;=<span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> msgId=m_BinaryReader.ReadInt32();</span><br><span class="line">            <span class="built_in">int</span> msgLen = m_BinaryReader.ReadInt32();</span><br><span class="line">            <span class="keyword">if</span>(RemainingBytesLength()&gt;=msgLen) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[]data = m_BinaryReader.ReadBytes(msgLen);</span><br><span class="line">                <span class="comment">//从服务器传递过来的信息为json</span></span><br><span class="line">                <span class="built_in">string</span> message=System.Text.Encoding.UTF8.GetString(data);</span><br><span class="line">                <span class="comment">//转到Lua</span></span><br><span class="line">                Manager.Net.Receive(msgId, message);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将8个字节还回，信息不完整</span></span><br><span class="line">                m_MemStream.Position = m_MemStream.Position - <span class="number">8</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">byte</span>[] leftover = m_BinaryReader.ReadBytes(RemainingBytesLength());</span><br><span class="line">        m_MemStream.SetLength(<span class="number">0</span>);</span><br><span class="line">        m_MemStream.Write(leftover, <span class="number">0</span>, leftover.Length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 剩余字节数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">RemainingBytesLength</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">int</span>)(m_MemStream.Length - m_MemStream.Position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span>(<span class="params"><span class="built_in">int</span> msgId,<span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream ms=<span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            ms.Position = <span class="number">0</span>;</span><br><span class="line">            BinaryWriter bw=<span class="keyword">new</span> BinaryWriter(ms);</span><br><span class="line">            <span class="built_in">byte</span>[] data=System.Text.Encoding.UTF8.GetBytes(message);</span><br><span class="line">            <span class="comment">//协议Id</span></span><br><span class="line">            bw.Write(msgId);</span><br><span class="line">            <span class="comment">//消息长度</span></span><br><span class="line">            bw.Write((<span class="built_in">int</span>)data.Length);</span><br><span class="line">            <span class="comment">//消息内容</span></span><br><span class="line">            bw.Write(data);</span><br><span class="line">            bw.Flush();</span><br><span class="line">            <span class="keyword">if</span> (m_Client != <span class="literal">null</span> &amp;&amp; m_Client.Connected)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] sendData=ms.ToArray();</span><br><span class="line">                <span class="comment">//BeginWrite相当于Send 发送成功调用OnEndSend回调</span></span><br><span class="line">                m_TcpStream.BeginWrite(sendData, <span class="number">0</span>, sendData.Length, OnEndSend, <span class="literal">null</span>); ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(<span class="string">&quot;服务器未连接&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEndSend</span>(<span class="params">IAsyncResult ar</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_TcpStream.EndWrite(ar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            OnDisConnected();</span><br><span class="line">            Debug.LogException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LuaManager"><a href="#LuaManager" class="headerlink" title="LuaManager"></a>LuaManager</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UObject = UnityEngine.Object;</span><br><span class="line"><span class="keyword">using</span> XLua;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LuaManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 所有Lua文件文件名</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; LuaNames = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt; m_LuaScripts = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LuaEnv luaEnv;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        luaEnv = <span class="keyword">new</span> LuaEnv();</span><br><span class="line"></span><br><span class="line">        luaEnv.AddBuildin(<span class="string">&quot;rapidjson&quot;</span>, XLua.LuaDLL.Lua.LoadRapidJson);</span><br><span class="line"></span><br><span class="line">        luaEnv.AddLoader(<span class="keyword">this</span>.loader);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="keyword">if</span> (AppConst.gameMode == GameMode.EditorMode)</span><br><span class="line">            <span class="keyword">this</span>.EditorLoadLuaScript();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">this</span>.LoadLuaScript();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartLua</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.luaEnv.DoString(<span class="built_in">string</span>.Format(<span class="string">&quot;require &#x27;&#123;0&#125;&#x27;&quot;</span>, name));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.luaEnv != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">this</span>.luaEnv.Tick();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.luaEnv != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.luaEnv.Dispose();</span><br><span class="line">            <span class="keyword">this</span>.luaEnv = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">byte</span>[]loader(<span class="keyword">ref</span> <span class="built_in">string</span> name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.GetLuaScript(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">GetLuaScript</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = name.Replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="built_in">string</span> fileName = PathUtil.GetLuaPath(name);</span><br><span class="line">        <span class="built_in">byte</span>[] luaScript = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.m_LuaScripts.TryGetValue(fileName, <span class="keyword">out</span> luaScript))</span><br><span class="line">            Debug.LogErrorFormat(<span class="string">&quot;LuaManager-&gt;GetLuaScript fileName:&#123;0&#125; Not Exist&quot;</span>, fileName);</span><br><span class="line">        <span class="keyword">return</span> luaScript;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 编辑器模式下加载Lua文件</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">EditorLoadLuaScript</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span>[] luaFiles = Directory.GetFiles(PathUtil.LuaPath, <span class="string">&quot;*.bytes&quot;</span>, SearchOption.AllDirectories);</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;luaFiles.Length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fileName = PathUtil.GetStandardPath(luaFiles[i]);</span><br><span class="line">            <span class="built_in">byte</span>[] file = File.ReadAllBytes(fileName);</span><br><span class="line">            AddLuaScript(PathUtil.GetUnityPath(fileName), file);</span><br><span class="line">        &#125;</span><br><span class="line">        Manager.Event.Fire(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddLuaScript</span>(<span class="params"><span class="built_in">string</span> assetsName, <span class="built_in">byte</span>[] file</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.m_LuaScripts[assetsName] = file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LoadLuaScript</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="built_in">string</span> name <span class="keyword">in</span> <span class="keyword">this</span>.LuaNames)</span><br><span class="line">        &#123;</span><br><span class="line">            Manager.Resource.LoadLua(name, </span><br><span class="line">                (UObject obj) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.AddLuaScript(name, (obj <span class="keyword">as</span> TextAsset).bytes);</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.m_LuaScripts.Count&gt;=<span class="keyword">this</span>.LuaNames.Count)</span><br><span class="line">                &#123;</span><br><span class="line">                    Manager.Event.Fire(<span class="number">10000</span>);</span><br><span class="line">                    LuaNames.Clear();</span><br><span class="line">                    LuaNames = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络客户端Lua部分"><a href="#网络客户端Lua部分" class="headerlink" title="网络客户端Lua部分"></a>网络客户端Lua部分</h2><p><img src="/../images/image-20230308082605820.png" alt="image-20230308082605820"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--模拟Class基类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class</span><span class="params">(super)</span></span></span><br><span class="line">    <span class="keyword">local</span> class = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> super <span class="keyword">then</span></span><br><span class="line">       class = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;<span class="built_in">__index</span> = super&#125;)</span><br><span class="line">       class.super = super</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       class = &#123;ctor = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="keyword">end</span>&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    class.<span class="built_in">__index</span> = class</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">class.new</span><span class="params">(...)</span></span></span><br><span class="line">       <span class="keyword">local</span> instance = <span class="built_in">setmetatable</span>(&#123;&#125;, class)</span><br><span class="line">       <span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(inst, ...)</span></span></span><br><span class="line">           <span class="keyword">if</span> <span class="built_in">type</span>(inst.super) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">create</span>(inst.super, ...);</span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line">           <span class="keyword">if</span> <span class="built_in">type</span>(inst.ctor) == <span class="string">&quot;function&quot;</span> <span class="keyword">then</span></span><br><span class="line">                inst.ctor(instance, ...);</span><br><span class="line">           <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">end</span></span><br><span class="line">       <span class="built_in">create</span>(instance, ...);</span><br><span class="line">       <span class="keyword">return</span> instance</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> class;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lua网络消息基类</span></span><br><span class="line"><span class="keyword">local</span> base_msg = Class();</span><br><span class="line"></span><br><span class="line"><span class="comment">--消息注册</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base_msg:add_req_res</span><span class="params">(msg_name,msg_id,...)</span></span></span><br><span class="line"><span class="comment">--参数列表</span></span><br><span class="line"><span class="keyword">local</span> keys = &#123;...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">--消息请求</span></span><br><span class="line"><span class="built_in">self</span>[<span class="string">&quot;req_&quot;</span>..msg_name] = <span class="function"><span class="keyword">function</span><span class="params">(self,... )</span></span></span><br><span class="line"><span class="keyword">local</span> values = &#123;...&#125;;</span><br><span class="line"><span class="keyword">if</span> #keys ~= #values <span class="keyword">then</span></span><br><span class="line">Log.Error(<span class="string">&quot;参数不正确：&quot;</span>,msg_name);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> send_data = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,#keys <span class="keyword">do</span></span><br><span class="line">send_data[keys[i]] = values[i];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">msg_mgr.send_msg(msg_id,send_data);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--消息接收 如果定义了接受的方法，则执行接受方法</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(<span class="built_in">self</span>[<span class="string">&quot;res_&quot;</span> .. msg_name]) == <span class="string">&quot;function&quot;</span> <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">msg_mgr.register(msg_id,</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(data)</span></span></span><br><span class="line">            <span class="keyword">local</span> msg = Json.decode(data);</span><br><span class="line">            <span class="keyword">if</span> msg.code ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">            Log.Error(<span class="string">&quot;错误码:&quot;</span>,msg.code);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">self</span>[<span class="string">&quot;res_&quot;</span> .. msg_name](<span class="built_in">self</span>,msg);</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Log.Error(<span class="string">&quot;请注册消息返回回调：&quot;</span>..msg_name);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> base_msg;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Lua网络消息管理器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> msg_mgr = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> msg_model_list = &#123;&#125;</span><br><span class="line"><span class="keyword">local</span> msg_responses = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--手动添加每个模块名字</span></span><br><span class="line"><span class="keyword">local</span> msg_name_list = </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;msg_test&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">msg_mgr.init</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(msg_name_list) <span class="keyword">do</span></span><br><span class="line">msg_model_list[v] = <span class="built_in">require</span>(<span class="string">&quot;message.&quot;</span>..v).new();</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">msg_mgr.get_msg</span><span class="params">(key)</span></span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> msg_model_list[key] <span class="keyword">then</span></span><br><span class="line">Log.Error(<span class="string">&quot;脚本不存在:&quot;</span>..key);</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> msg_model_list[key];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">msg_mgr.register</span><span class="params">(msg_id,func)</span></span></span><br><span class="line"><span class="keyword">if</span> msg_responses[msg_id] <span class="keyword">then</span></span><br><span class="line">Log.Error(<span class="string">&quot;消息已注册:&quot;</span>..msg_id);</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">msg_responses[msg_id] = func;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReceiveMessage</span><span class="params">(msg_id,message)</span></span></span><br><span class="line">Log.Info(<span class="string">&quot;&lt;color=#A0522D&gt;receive:&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;:id = &quot;</span>..msg_id .. <span class="string">&quot; : &quot;</span>..message..<span class="string">&quot;&lt;/color&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(msg_responses[msg_id]) == <span class="string">&quot;function&quot;</span> <span class="keyword">then</span></span><br><span class="line">msg_responses[msg_id](message);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Log.Error(<span class="string">&quot;此消息没有res：&quot;</span>,msg_id);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">msg_mgr.send_msg</span><span class="params">(msg_id,send_data)</span></span></span><br><span class="line"><span class="keyword">local</span> str = Json.encode(send_data);</span><br><span class="line">Log.Info(<span class="string">&quot;&lt;color=#9400D3&gt;send:&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;:id = &quot;</span>..msg_id..<span class="string">&quot; : &quot;</span>..str..<span class="string">&quot;&lt;/color&gt;&quot;</span>);</span><br><span class="line">Manager.Net:SendMessage(msg_id,str);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> msg_mgr;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Log</span></span><br><span class="line"><span class="keyword">local</span> Log = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">read_table</span><span class="params">(tab,tab_count)</span></span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_symbol</span><span class="params">(count)</span></span></span><br><span class="line"><span class="keyword">local</span> symol = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,count <span class="keyword">do</span></span><br><span class="line">symol = symol .. <span class="string">&quot;    &quot;</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> symol;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> symbol = get_symbol(tab_count);</span><br><span class="line"><span class="keyword">local</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">str = str .. symbol .. k .. <span class="string">&quot;:\n&quot;</span> .. symbol ..<span class="string">&quot;&#123;\n&quot;</span>..read_table(v,tab_count + <span class="number">1</span>)..symbol..<span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span>(v) == <span class="string">&quot;userdata&quot;</span> <span class="keyword">then</span></span><br><span class="line">str = str ..symbol .. k ..  <span class="string">&quot; = userdata,\n&quot;</span>;</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span>(v) == <span class="string">&quot;function&quot;</span> <span class="keyword">then</span></span><br><span class="line">str = str ..symbol .. k ..  <span class="string">&quot; = function,\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">str = str ..symbol .. k ..  <span class="string">&quot; = &quot;</span> .. <span class="built_in">tostring</span>(v)..<span class="string">&quot;,\n&quot;</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">get_log_string</span><span class="params">(...)</span></span></span><br><span class="line"><span class="keyword">local</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">local</span> pram = &#123;...&#125;;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(pram) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span>(v) == <span class="string">&quot;table&quot;</span> <span class="keyword">then</span></span><br><span class="line">str = str .. <span class="string">&quot;&#123;\n&quot;</span>.. read_table(v,<span class="number">1</span>) ..<span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span>(v) == <span class="string">&quot;function&quot;</span> <span class="keyword">then</span></span><br><span class="line">str = str .. v ..  <span class="string">&quot;function,\n&quot;</span>;</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">type</span>(v) == <span class="string">&quot;userdata&quot;</span> <span class="keyword">then</span></span><br><span class="line">str = str .. <span class="string">&quot;userdata,\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">str = str .. <span class="built_in">tostring</span>(v) .. <span class="string">&quot;  &quot;</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Log.Info</span><span class="params">(...)</span></span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> AppConst.OpenLog <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">CS.Log.Info(get_log_string(...));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Log.Warning</span><span class="params">(...)</span></span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> AppConst.OpenLog <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">CS.Log.Warning(get_log_string(...));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Log.Error</span><span class="params">(...)</span></span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> AppConst.OpenLog <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> str = get_log_string(...);</span><br><span class="line">CS.Log.Error(str .. <span class="built_in">debug</span>.<span class="built_in">traceback</span>());</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Log;</span><br></pre></td></tr></table></figure><h1 id="真机测试"><a href="#真机测试" class="headerlink" title="真机测试"></a>真机测试</h1><p><img src="/../images/image-20230308160756981.png" alt="image-20230308160756981"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;整包分包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;资源加载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Lua管理&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Xlua" scheme="http://example.com/categories/Xlua/"/>
    
    
    <category term="Xlua" scheme="http://example.com/tags/Xlua/"/>
    
  </entry>
  
  <entry>
    <title>unity文件</title>
    <link href="http://example.com/2023/02/13/unity%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2023/02/13/unity%E6%96%87%E4%BB%B6/</id>
    <published>2023-02-13T13:01:22.000Z</published>
    <updated>2023-02-13T13:52:24.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">一.Resources文件夹。</span><br><span class="line">可以使用Resources.Load(“文件名字，注：不包括文件后缀名”);把文件夹中的对象加载出来。</span><br><span class="line">注：此方可实现对文件实施“增删查改”等操作，但打包后不可以更改了。</span><br><span class="line"></span><br><span class="line">二.Windows平台文件处理</span><br><span class="line">在直接使用Application.dataPath来读取文件进行操作。</span><br><span class="line">注：移动端是没有访问权限的。</span><br><span class="line"></span><br><span class="line">三.StreamingAssets文件夹。</span><br><span class="line">1.可使用Application.dataPath来读取文件进行操作。</span><br><span class="line">2.直接使用Application.streamingAssetsPath来读取文件进行操作。</span><br><span class="line">注：此方法在pc/Mac电脑中可实现对文件实施“增删查改”等操作，但在移动端只支持读取操作。</span><br><span class="line"></span><br><span class="line">四.使用Application.persistentDataPath操作文件</span><br><span class="line">该文件存在手机沙盒中，因为不能直接存放文件，</span><br><span class="line">1.通过服务器直接下载保存到该位置，也可以通过Md5码比对下载更新新的资源</span><br><span class="line">2.没有服务器的，只有间接通过文件流的方式从本地读取并写入Application.persistentDataPath文件下，然后再通过Application.persistentDataPath来读取操作。</span><br><span class="line">注：在Pc/Mac电脑 以及android跟Ipad、ipone都可对文件进行任意操作，另外在IOS上该目录下的东西可以被iCloud自动备份。</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Resource：在Unity编辑器的Project窗口里创建，Resources文件夹下的资源全部会打包进.apk或者.ipa，并且打包时会将里面的资源压缩处理。加载方法是Resources.Load(文件名)，需要注意：文件名不包括扩展名，打包后不能更改Resources下的资源内容。但是从Resources文件夹中加载出来的资源可以更改。</span><br><span class="line"></span><br><span class="line">2.Application.dataPath：这个属性返回的是程序的数据文件所在文件夹的路径，例如在Editor中就是项目的Assets文件夹的路径，通过这个路径可以访问项目中任何文件夹中的资源，但是在移动端它是完全没用。</span><br><span class="line"></span><br><span class="line">3.Application.streamingAssetsPath：这个属性用于返回流数据的缓存目录，返回路径为相对路径，适合设置一些外部数据文件的路径。在Unity工程的Assets目录下起一个名为“StreamingAssets”的文件夹即可，然后用Application.streamingAssetsPath访问，这个文件夹中的资源在打包时会原封不动的打包进去，不会压缩，一般放置一些资源数据。在PC/MAC中可实现对文件的“增删改查”等操作，但在移动端是一个只读路径。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;一.Resources文件夹。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可以使用Resources.Load(“文件名字，注：不包括文件后缀名”);把文件夹中的对象加载出来。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：此方可实现对文件实施“增删查改”等操作，但打包后不可以更改了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;二.Windows平台文件处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;在直接使用Application.dataPath来读取文件进行操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：移动端是没有访问权限的。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;三.StreamingAssets文件夹。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.可使用Application.dataPath来读取文件进行操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.直接使用Application.streamingAssetsPath来读取文件进行操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：此方法在pc/Mac电脑中可实现对文件实施“增删查改”等操作，但在移动端只支持读取操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;四.使用Application.persistentDataPath操作文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;该文件存在手机沙盒中，因为不能直接存放文件，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1.通过服务器直接下载保存到该位置，也可以通过Md5码比对下载更新新的资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.没有服务器的，只有间接通过文件流的方式从本地读取并写入Application.persistentDataPath文件下，然后再通过Application.persistentDataPath来读取操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：在Pc/Mac电脑 以及android跟Ipad、ipone都可对文件进行任意操作，另外在IOS上该目录下的东西可以被iCloud自动备份。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="文件" scheme="http://example.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Lua01</title>
    <link href="http://example.com/2023/02/12/Lua01/"/>
    <id>http://example.com/2023/02/12/Lua01/</id>
    <published>2023-02-12T12:32:09.000Z</published>
    <updated>2023-03-21T13:23:11.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原文链接：https://blog.csdn.net/qq_21407523/article/details/115151017</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="可传函数"><a href="#可传函数" class="headerlink" title="可传函数"></a>可传函数</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a,b )</span></span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(ff,a,b )</span></span></span><br><span class="line">    <span class="keyword">return</span> ff(a,b)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(f(add,<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="可变长度"><a href="#可变长度" class="headerlink" title="可变长度"></a>可变长度</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add</span><span class="params">( ... )</span></span></span><br><span class="line">    <span class="keyword">local</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">local</span> A=&#123;...&#125;</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(A) <span class="keyword">do</span></span><br><span class="line">    sum=sum+v</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="阿斯克吗转字符串"><a href="#阿斯克吗转字符串" class="headerlink" title="阿斯克吗转字符串"></a>阿斯克吗转字符串</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\x66&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b=<span class="string">&quot;sdf&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">upper</span>(<span class="string">&quot;fds&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">upper</span>(b))</span><br><span class="line"><span class="built_in">print</span>(b:<span class="built_in">upper</span>())</span><br><span class="line"><span class="built_in">print</span>(b.<span class="built_in">upper</span>(b))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">A=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">--正向遍历</span></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(A) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--反向遍历</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(A) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--某位置插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(A,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">--所以位置后插入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">concat</span>(A, <span class="number">1</span>))</span><br><span class="line"><span class="comment">--排序</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="comment">--从大到小排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">low</span><span class="params">( a,b )</span></span></span><br><span class="line">    <span class="keyword">return</span> a&gt;b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(A,up)</span><br><span class="line"></span><br><span class="line"><span class="comment">--输入的一行  io.lines()</span></span><br><span class="line"><span class="keyword">local</span> a=&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span><span class="params">(a)</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">table</span>.<span class="built_in">concat</span>(a,<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line">  a[#a+<span class="number">1</span>]=line</span><br><span class="line">  <span class="built_in">print</span>(x(a))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--随机数种子</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())</span><br><span class="line"><span class="comment">--随机数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">math</span>.<span class="built_in">random</span>(<span class="number">1</span>,<span class="number">100</span>))</span><br></pre></td></tr></table></figure><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">关于协程的操作作为基础库的一个子库， 被放在一个独立表 <span class="built_in">coroutine</span> 中。 协程的介绍参见 §<span class="number">2.6</span> 。</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">create</span> (f)</span><br><span class="line">创建一个主体函数为 f 的新协程。 f 必须是一个 Lua 的函数。 返回这个新协程，它是一个类型为 <span class="string">&quot;thread&quot;</span> 的对象。</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span> (co [, val1, ···])</span><br><span class="line">开始或继续协程 co 的运行。 当你第一次延续一个协程，它会从主体函数处开始运行。 val1, ... 这些值会以参数形式传入主体函数。 如果该协程被让出，<span class="built_in">resume</span> 会重新启动它； val1, ... 这些参数会作为让出点的返回值。</span><br><span class="line"></span><br><span class="line">如果协程运行起来没有错误， <span class="built_in">resume</span> 返回 <span class="literal">true</span> 加上传给 <span class="built_in">yield</span> 的所有值 （当协程让出）， 或是主体函数的所有返回值（当协程中止）。 如果有任何错误发生， <span class="built_in">resume</span> 返回 <span class="literal">false</span> 加错误消息。</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">yield</span> (···)</span><br><span class="line">挂起正在调用的协程的执行。 传递给 <span class="built_in">yield</span> 的参数都会转为 <span class="built_in">resume</span> 的额外返回值。</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">wrap</span> (f)</span><br><span class="line">创建一个主体函数为 f 的新协程。 f 必须是一个 Lua 的函数。 返回一个函数， 每次调用该函数都会延续该协程。 传给这个函数的参数都会作为 <span class="built_in">resume</span> 的额外参数。 和 <span class="built_in">resume</span> 返回相同的值， 只是没有第一个布尔量。 如果发生任何错误，抛出这个错误。</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">status</span> (co)</span><br><span class="line">以字符串形式返回协程 co 的状态： 当协程正在运行（它就是调用 <span class="built_in">status</span> 的那个） ，返回 <span class="string">&quot;running&quot;</span>； 如果协程调用 <span class="built_in">yield</span> 挂起或是还没有开始运行，返回 <span class="string">&quot;suspended&quot;</span>； 如果协程是活动的，但并不在运行（即它正在延续其它协程），返回 <span class="string">&quot;normal&quot;</span>； 如果协程运行完主体函数或因错误停止，返回 <span class="string">&quot;dead&quot;</span>。</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.isyieldable ()</span><br><span class="line">如果正在运行的协程可以让出，则返回真。</span><br><span class="line"></span><br><span class="line">不在主线程中或不在一个无法让出的 C 函数中时，当前协程是可让出的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">running</span> ()</span><br><span class="line">返回当前正在运行的协程加一个布尔量。 如果当前运行的协程是主线程，其为真。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="协程创建执行与返回"><a href="#协程创建执行与返回" class="headerlink" title="协程创建执行与返回"></a>协程创建执行与返回</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建运行协程</span></span><br><span class="line"><span class="comment">--[[coroutine.create (f)</span></span><br><span class="line"><span class="comment">创建一个主体函数为 f 的新协程。 f 必须是一个 Lua 的函数。 返回这个新协程，它是一个类型为 &quot;thread&quot; 的对象。]]</span></span><br><span class="line">co= <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">( ... )</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;coroutine is running...&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(co)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co)</span><br><span class="line"></span><br><span class="line"><span class="comment">--返回值 coroutine.yield() 返回后再次执行时从返回处开始执行</span></span><br><span class="line">co= <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">( ... )</span></span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">yield</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;coroutine1 is running...&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="协程传参返回值"><a href="#协程传参返回值" class="headerlink" title="协程传参返回值"></a>协程传参返回值</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--传参  coroutine.resume(co,1,2,3,41,1)</span></span><br><span class="line">co= <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(...)</span></span></span><br><span class="line"><span class="keyword">local</span> a = &#123;...&#125;</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(i,v)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">41</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">--返回值  返回的第一个值为执行成功与否</span></span><br><span class="line">co= <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(...)</span></span></span><br><span class="line">    <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(<span class="string">&quot;saf&quot;</span>,<span class="number">123</span>,dffs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line">a,b ,c,d= <span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">41</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b,c,d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--注意传值时第二次传值不会进行覆盖</span></span><br><span class="line">co= <span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span></span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    c,d = <span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a,b)</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    <span class="built_in">print</span>(c,d)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--使用coroutine.wrap创建的协程 返回值为function</span></span><br><span class="line"><span class="comment">--创建一个主体函数为 f 的新协程。 f 必须是一个 Lua 的函数。 返回一个函数， 每次调用该函数都会延续该协程。 传给这个函数的参数都会作为 resume 的额外参数。 和 resume 返回相同的值， 只是没有第一个布尔量。 如果发生任何错误，抛出这个错误。</span></span><br><span class="line">co= <span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">(a,b)</span></span></span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    c,d=<span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a,b)</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    <span class="built_in">print</span>(c,d)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(co))</span><br><span class="line">co(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">co(<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> monster =&#123;</span><br><span class="line">    name=<span class="string">&quot;monster&quot;</span>,</span><br><span class="line">    Hp=<span class="number">100</span>,</span><br><span class="line">    pos=&#123;x=<span class="number">100</span>,y=<span class="number">200</span>&#125;,</span><br><span class="line">    <span class="string">[[</span></span><br><span class="line"><span class="string">    TakeDamage=function(self,demage)</span></span><br><span class="line"><span class="string">        self.Hp=self.Hp-demage</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    ]]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(monster.Hp)</span><br><span class="line"><span class="comment">--定义函数加上self变量</span></span><br><span class="line">monster.TakeDamage=<span class="function"><span class="keyword">function</span><span class="params">(self,demage)</span></span></span><br><span class="line">        <span class="built_in">self</span>.Hp=<span class="built_in">self</span>.Hp-demage</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="string">[[</span></span><br><span class="line"><span class="string">使用语法糖改编 默认有self</span></span><br><span class="line"><span class="string">function monster:TakeDamage(demage)</span></span><br><span class="line"><span class="string">        self.Hp=self.Hp-demage</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line"></span><br><span class="line">monster.TakeDamage(monster,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(monster.Hp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> monster1 =&#123;</span><br><span class="line">    name=<span class="string">&quot;monster&quot;</span>,</span><br><span class="line">    Hp=<span class="number">120</span>,</span><br><span class="line">    pos=&#123;x=<span class="number">100</span>,y=<span class="number">200</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--可进行传值</span></span><br><span class="line">monster.TakeDamage(monster1,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(monster1.Hp)</span><br><span class="line"></span><br><span class="line"><span class="comment">--语法糖：将自身作为函数的第一个参数传入</span></span><br><span class="line">monster:TakeDamage(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--直接赋值为地址引用</span></span><br><span class="line"><span class="keyword">local</span> monster1 = monster</span><br><span class="line">monster1:TakeDamage(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(monster.Hp) <span class="comment">--输出为 0 </span></span><br></pre></td></tr></table></figure><h1 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--meta table 元表 原型</span></span><br><span class="line"></span><br><span class="line">monster =&#123;</span><br><span class="line">    name=<span class="string">&quot;monster&quot;</span>,</span><br><span class="line">    Hp=<span class="number">100</span>,</span><br><span class="line">    pos=&#123;x=<span class="number">100</span>,y=<span class="number">200</span>&#125;,</span><br><span class="line">    TakeDamage=<span class="function"><span class="keyword">function</span><span class="params">(self,demage)</span></span></span><br><span class="line">        <span class="built_in">self</span>.Hp=<span class="built_in">self</span>.Hp-demage</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">objMonster=&#123;x=<span class="number">1</span>,y=<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(objMonster, &#123;<span class="built_in">__index</span>=monster&#125;)</span><br><span class="line">objMonster:TakeDamage(<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(objMonster.Hp)</span><br><span class="line"><span class="comment">--设置元表后不会修改元表值</span></span><br><span class="line"><span class="built_in">print</span>(monster.Hp)</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建new函数</span></span><br><span class="line">monster=&#123;</span><br><span class="line">    name=<span class="string">&quot;monster&quot;</span>,</span><br><span class="line">    Hp=<span class="number">100</span>,</span><br><span class="line">    x=<span class="number">1</span>,y=<span class="number">2</span>,</span><br><span class="line">    TakeDamage=<span class="function"><span class="keyword">function</span><span class="params">(self,damage)</span></span></span><br><span class="line">        <span class="built_in">self</span>.Hp=<span class="built_in">self</span>.Hp-damage</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">    showInfo=<span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name:&quot;</span>,<span class="built_in">self</span>.name,<span class="string">&quot;Hp:&quot;</span>,<span class="built_in">self</span>.Hp,<span class="built_in">self</span>.x,<span class="built_in">self</span>.y)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">monster:new</span><span class="params">(name,Hp,x,y )</span></span></span><br><span class="line">    <span class="keyword">local</span> aa = &#123;&#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(aa,&#123;<span class="built_in">__index</span>=monster&#125;)</span><br><span class="line">    aa.name=name</span><br><span class="line">    aa.Hp=Hp0<span class="number">.1</span>?.,m bcxzZ7</span><br><span class="line">    =-</span><br><span class="line">    aa.x=x</span><br><span class="line">    aa.y=y</span><br><span class="line">    <span class="keyword">return</span> aa</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> a=monster:new(<span class="string">&quot;aaa&quot;</span>,<span class="number">11</span>,<span class="number">222</span>,<span class="number">333</span>)</span><br><span class="line">a:showInfo()</span><br><span class="line">a:TakeDamage(<span class="number">100</span>)</span><br><span class="line">a:showInfo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--设置直接调用table名执行的函数</span></span><br><span class="line">monster=&#123;</span><br><span class="line">    name=<span class="string">&quot;monster&quot;</span>,</span><br><span class="line">    Hp=<span class="number">100</span>,</span><br><span class="line">    x=<span class="number">1</span>,y=<span class="number">2</span>,</span><br><span class="line">    TakeDamage=<span class="function"><span class="keyword">function</span><span class="params">(self,damage)</span></span></span><br><span class="line">        <span class="built_in">self</span>.Hp=<span class="built_in">self</span>.Hp-damage</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">monster:showInfo</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;name:&quot;</span>,<span class="built_in">self</span>.name,<span class="string">&quot;Hp:&quot;</span>,<span class="built_in">self</span>.Hp,<span class="built_in">self</span>.x,<span class="built_in">self</span>.y)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">monster:new</span><span class="params">(name,Hp,x,y )</span></span></span><br><span class="line">    <span class="keyword">local</span> aa = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    aa.name=name</span><br><span class="line">    aa.Hp=Hp</span><br><span class="line">    aa.x=x</span><br><span class="line">    aa.y=y</span><br><span class="line">    <span class="built_in">setmetatable</span>(aa,&#123;<span class="built_in">__index</span>=monster&#125;)</span><br><span class="line">    <span class="keyword">return</span> aa</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--设置table的__call</span></span><br><span class="line"><span class="built_in">setmetatable</span>(monster,</span><br><span class="line">&#123;   </span><br><span class="line">    <span class="built_in">__call</span>=</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(self,name,Hp,x,y )</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>:new(name,Hp,x,y)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">--直接调用函数</span></span><br><span class="line"><span class="keyword">local</span> a=monster(<span class="string">&quot;aaa&quot;</span>,<span class="number">11</span>,<span class="number">222</span>,<span class="number">333</span>)</span><br><span class="line">a:showInfo()</span><br><span class="line">a:TakeDamage(<span class="number">100</span>)</span><br><span class="line">a:showInfo()</span><br></pre></td></tr></table></figure><h1 id="实现私有成员"><a href="#实现私有成员" class="headerlink" title="实现私有成员"></a>实现私有成员</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--实现思路，在new的时候只把可以使用的接口开放出来</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="string">[[</span></span><br><span class="line"><span class="string">rawset (table, index, value)</span></span><br><span class="line"><span class="string">在不触发任何元方法的情况下 将 table[index] 设为 value。 table 必须是一张表， index 可以是 nil 与 NaN 之外的任何值。 value 可以是任何 Lua 值。</span></span><br><span class="line"><span class="string">这个函数返回 table。</span></span><br><span class="line"><span class="string">]]</span></span><br><span class="line">monster=&#123;</span><br><span class="line">    name=<span class="string">&quot;monster&quot;</span>,</span><br><span class="line">    Hp=<span class="number">100</span>,</span><br><span class="line">    x=<span class="number">1</span>,y=<span class="number">2</span>,</span><br><span class="line">    <span class="built_in">type</span>=<span class="string">&quot;monster&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">monster:GetHp</span><span class="params">( )</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>.Hp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">monster:TakeDamage</span><span class="params">( damage )</span></span></span><br><span class="line">    <span class="built_in">self</span>.Hp=<span class="built_in">self</span>.Hp-damage</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">monster.new</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> obj=&#123;Hp=monster.Hp,y=monster.y,x=monster.x&#125;</span><br><span class="line">    <span class="built_in">setmetatable</span>(obj,monster)</span><br><span class="line">    monster.<span class="built_in">__index</span> = &#123;GetHp=monster.GetHp,TakeDamage=monster.TakeDamage&#125;</span><br><span class="line">    <span class="comment">--当使用没用定义的变量时调用__newindex，可用来实现标量</span></span><br><span class="line">    monster.<span class="built_in">__newindex</span>=<span class="function"><span class="keyword">function</span><span class="params">(tab,key,value)</span></span></span><br><span class="line">                            <span class="keyword">if</span> key==<span class="string">&quot;type&quot;</span> <span class="keyword">then</span></span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&quot;not&quot;</span>)</span><br><span class="line">                            <span class="keyword">return</span></span><br><span class="line">                            <span class="keyword">end</span></span><br><span class="line">                        <span class="built_in">rawset</span>(tab,key,value)</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> x = monster.new()</span><br><span class="line"><span class="built_in">print</span>(x:GetHp())</span><br><span class="line">x.<span class="built_in">type</span>=<span class="string">&quot;fds&quot;</span></span><br><span class="line">x.hp=<span class="string">&quot;sdf&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x.Hp)</span><br></pre></td></tr></table></figure><h1 id="闭包-1"><a href="#闭包-1" class="headerlink" title="闭包"></a>闭包</h1><p><a href="https://blog.csdn.net/u012861978/article/details/105796686?ops_request_misc=%7B%22request_id%22:%22167625967216782425647812%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167625967216782425647812&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-105796686-null-null.142%5Ev73%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=lua%E9%97%AD%E5%8C%85&spm=1018.2226.3001.4187">(47条消息) lua闭包_汪汪富贵的博客-CSDN博客</a></p><p>概念：子函数可以使用父函数中的局部变量叫做闭包</p><p>1、闭包的数据隔离<br>不同实例上的两个不同闭包，闭包中的upvalue变量各自独立，从而实现数据隔离</p><p>2、闭包的数据共享<br>两个闭包共享一份变量upvalue，引用的是更外部函数的局部变量（即Upvlaue）,变量是同一个，引用也指向同一个地方，从而实现对共享数据进行访问和修改。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--同一时间返回共用同一upvalue</span></span><br><span class="line"><span class="comment">--不同时间upvalue不同</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span><span class="params">( n )</span></span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line">    n=n+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span><span class="params">()</span></span>                                                           </span><br><span class="line">    n=n+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> a,b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x=c(<span class="number">10</span>)</span><br><span class="line">y=c(<span class="number">10</span>)</span><br><span class="line">x()</span><br><span class="line">y()</span><br><span class="line">x()</span><br></pre></td></tr></table></figure><h1 id="ipairs和pairs的区别"><a href="#ipairs和pairs的区别" class="headerlink" title="ipairs和pairs的区别"></a>ipairs和pairs的区别</h1><p>lua中，ipairs和pairs都是用来遍历table的函数，但是它们的区别在于：</p><ol><li>ipairs只能遍历数字索引的元素，而pairs可以遍历所有类型的元素。</li><li>ipairs遍历时按照数字索引的顺序遍历，而pairs遍历时是无序的。</li><li>ipairs遍历时遇到nil值会停止遍历，而pairs会一直遍历到table的末尾。</li></ol><p>因此，如果需要遍历一个只包含数字索引的table，可以使用ipairs；如果需要遍历一个包含不同类型索引的table，可以使用pairs。</p><h1 id="C-与Lua交互过程和原理"><a href="#C-与Lua交互过程和原理" class="headerlink" title="C#与Lua交互过程和原理"></a>C#与Lua交互过程和原理</h1><p>Wrap文件：每一个Wrap文件都是对一个C#类的包装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C# Call Lua交互过程</span><br><span class="line">C#文件先调用Lua的解析器底层的dll库（C语言编写），再由DLL文件执行相应的Lua文件</span><br><span class="line"></span><br><span class="line">C#与Lua交互原理：虚拟栈！！！</span><br><span class="line">交互通过虚拟栈实现，栈的索引分为正数和负数，如果索引是正数，则1表示栈底，如果索引是负数，则-1表示在栈顶</span><br><span class="line"></span><br><span class="line">C# Call Lua交互原理</span><br><span class="line">C#先将数据放入栈中，然后Lua去栈中获取数据，然后返回数据对应的值到栈顶，再由栈顶返回至C#</span><br><span class="line"></span><br><span class="line">C#调用Lua过程：</span><br><span class="line">C#生成Bridge文件，Bridge调dll文件（dll是用C写的库），先调用lua中dll文件，由dll文件执行lua代码</span><br><span class="line">C#-&gt;Bridge-&gt;dll-&gt;Lua 或 C#-&gt;dll-&gt;Lua</span><br><span class="line"></span><br><span class="line">从内存方面解释：说白了就是对栈进行操作</span><br><span class="line">C# Call Lua：C#把请求或数据放在栈顶，然后lua从栈顶取出该数据，在lua中做出相应处理（查询，改变），然后把处理结果放回栈顶，最后C#再从栈顶取出lua处理完的数据，完成交互。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Lua Call C# 交互过程</span><br><span class="line">1.Wrap方式：首先生成C#源文件对应的Wrap文件，Lua文件会调用生成的Wrap文件，再由Wrap文件去调用C#文件。</span><br><span class="line">2.反射方式：当索引系统API、DLL库或者第三方库，如果无法将代码具体实现进行代码生成，可通过反射来获取，执行效率较低。</span><br><span class="line"></span><br><span class="line">Lua Call C#交互原理</span><br><span class="line">C#源文件生成Wrap文件、或C#源文件生成C模块，将Wrap文件和C模块注册到Lua的解析器中，最后再由Lua去调用这个模块的函数~</span><br><span class="line"></span><br><span class="line">从代码文件方面解释：</span><br><span class="line">lua调用C#过程：</span><br><span class="line">lua-&gt;wrap-&gt;C#</span><br><span class="line">先生成Wrap文件（中间文件/适配文件），wrap文件把字段方法，注册到lua虚拟机中（解释器luajit），然后lua通过wrap就可以调C#了、或者在config文件中添加相应类型也可以</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;原文链接：https://blog.csdn.net/qq_21407523/article/details/115151017&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="lua" scheme="http://example.com/categories/lua/"/>
    
    
    <category term="lua" scheme="http://example.com/tags/lua/"/>
    
  </entry>
  
  <entry>
    <title>极世界-好友系统</title>
    <link href="http://example.com/2023/01/16/%E6%9E%81%E4%B8%96%E7%95%8C-%E5%A5%BD%E5%8F%8B%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/01/16/%E6%9E%81%E4%B8%96%E7%95%8C-%E5%A5%BD%E5%8F%8B%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-01-16T08:12:09.000Z</published>
    <updated>2023-03-09T04:44:44.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">好友添加流程：请求人添加好友，服务器向响应方发送请求消息，响应方发送响应信息，服务器根据响应信息向请求方和响应方添加信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;好友添加流程：请求人添加好友，服务器向响应方发送请求消息，响应方发送响应信息，服务器根据响应信息向请求方和响应方添加信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>极世界-刷怪系统</title>
    <link href="http://example.com/2023/01/13/%E6%9E%81%E4%B8%96%E7%95%8C-%E5%88%B7%E6%80%AA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/01/13/%E6%9E%81%E4%B8%96%E7%95%8C-%E5%88%B7%E6%80%AA%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-01-13T03:27:36.000Z</published>
    <updated>2023-01-16T08:12:43.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">刷怪逻辑：</span><br><span class="line">地图创建刷怪管理，刷怪管理存储刷怪规则，刷怪规则每帧判断是否需要刷怪需要则，地图管理器刷怪，传递给地图通知地图中所有玩家</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;刷怪逻辑：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;地图创建刷怪管理，刷怪管理存储刷怪规则，刷怪规则每帧判断是否需要刷怪需要则，地图管理器刷怪，传递给地图通知地图中所有玩家&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>极世界-任务系统</title>
    <link href="http://example.com/2023/01/11/%E6%9E%81%E4%B8%96%E7%95%8C-%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/01/11/%E6%9E%81%E4%B8%96%E7%95%8C-%E4%BB%BB%E5%8A%A1%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-01-11T08:30:08.000Z</published>
    <updated>2023-01-13T03:26:48.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/../images/image-20230113112519212.png" alt="image-20230113112519212"></p><p><img src="/../images/image-20230113112533890.png" alt="image-20230113112533890"></p><p><img src="/../images/image-20230113112546424.png" alt="image-20230113112546424"></p><p><img src="/../images/image-20230113112556148.png" alt="image-20230113112556148"></p><p><img src="/../images/image-20230113112606055.png" alt="image-20230113112606055"></p><p><img src="/../images/image-20230113112615013.png" alt="image-20230113112615013"></p><p><img src="/../images/image-20230113112624099.png" alt="image-20230113112624099"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>极世界-装备系统</title>
    <link href="http://example.com/2023/01/04/%E6%9E%81%E4%B8%96%E7%95%8C-%E8%A3%85%E5%A4%87%E7%B3%BB%E7%BB%9F-1/"/>
    <id>http://example.com/2023/01/04/%E6%9E%81%E4%B8%96%E7%95%8C-%E8%A3%85%E5%A4%87%E7%B3%BB%E7%BB%9F-1/</id>
    <published>2023-01-04T11:06:07.000Z</published>
    <updated>2023-01-04T11:06:07.269Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>极世界-装备系统</title>
    <link href="http://example.com/2023/01/03/%E6%9E%81%E4%B8%96%E7%95%8C-%E8%A3%85%E5%A4%87%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2023/01/03/%E6%9E%81%E4%B8%96%E7%95%8C-%E8%A3%85%E5%A4%87%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-01-03T03:33:05.000Z</published>
    <updated>2023-01-05T03:53:04.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">接口 IPointerClickHandler</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/../images/image-20230104190912135.png" alt="image-20230104190912135"></p><p><img src="/../images/image-20230104190925642.png" alt="image-20230104190925642"></p><p><img src="/../images/image-20230104190938466.png" alt="image-20230104190938466"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;接口 IPointerClickHandler&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>极世界-商店系统</title>
    <link href="http://example.com/2022/12/30/%E6%9E%81%E4%B8%96%E7%95%8C-%E5%95%86%E5%BA%97%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/12/30/%E6%9E%81%E4%B8%96%E7%95%8C-%E5%95%86%E5%BA%97%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-12-30T02:11:09.000Z</published>
    <updated>2023-01-03T03:36:41.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">选择时组件 Selectable</span><br><span class="line">当绑定组件后，继承 ISelectHandler 接口 实现 OnSelect函数，当选择时则执行此函数</span><br></pre></td></tr></table></figure><span id="more"></span><p><img src="/../images/image-20230103113612563.png" alt="image-20230103113612563"></p><p><img src="/../images/image-20230103113626905.png" alt="image-20230103113626905"></p><p><img src="/../images/image-20230103113635096.png" alt="image-20230103113635096"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;选择时组件 Selectable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当绑定组件后，继承 ISelectHandler 接口 实现 OnSelect函数，当选择时则执行此函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>极世界-背包系统</title>
    <link href="http://example.com/2022/12/28/%E6%9E%81%E4%B8%96%E7%95%8C-%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/12/28/%E6%9E%81%E4%B8%96%E7%95%8C-%E8%83%8C%E5%8C%85%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-12-28T02:14:02.000Z</published>
    <updated>2022-12-29T04:47:06.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">数据库用二进制存储</span><br><span class="line"></span><br><span class="line">更新协议 更新Define 制作背包UI 背包小格子脚本 背包数据库建立</span><br><span class="line"></span><br><span class="line">bagitem使用结构体，为了方便进行交换</span><br><span class="line"></span><br><span class="line">背包作用</span><br><span class="line">背包系统组成</span><br><span class="line"></span><br><span class="line">[StructLayout(LayoutKind.Sequential, Pack =1)]解释</span><br><span class="line"></span><br><span class="line">GetComponentsInChildren(); 使用方法</span><br><span class="line"></span><br><span class="line">通过二进制存储数据</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="背包作用"><a href="#背包作用" class="headerlink" title="背包作用"></a>背包作用</h1><p><img src="/../images/image-20221228162200670.png" alt="image-20221228162200670"></p><h1 id="背包系统组成"><a href="#背包系统组成" class="headerlink" title="背包系统组成"></a>背包系统组成</h1><p><img src="/../images/image-20221228162225821.png" alt="image-20221228162225821"></p><h1 id="StructLayout-LayoutKind-Sequential-Pack-x3D-1-解释"><a href="#StructLayout-LayoutKind-Sequential-Pack-x3D-1-解释" class="headerlink" title="[StructLayout(LayoutKind.Sequential, Pack &#x3D;1)]解释"></a>[StructLayout(LayoutKind.Sequential, Pack &#x3D;1)]解释</h1><p><code>[StructLayout(LayoutKind.Sequential)]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">结构体是由若干成员组成的.布局有两种</span><br><span class="line">1.Sequential,顺序布局,比如</span><br><span class="line">struct S1</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  int b;</span><br><span class="line">&#125;</span><br><span class="line">那么默认情况下在内存里是先排a,再排b</span><br><span class="line">也就是如果能取到a的地址,和b的地址,则相差一个int类型的长度,4字节</span><br><span class="line">[StructLayout(LayoutKind.Sequential)] </span><br><span class="line">struct S1</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  int b;</span><br><span class="line">&#125;</span><br><span class="line">这样和上一个是一样的.因为默认的内存排列就是Sequential,也就是按成员的先后顺序排列.</span><br><span class="line">2.Explicit,精确布局</span><br><span class="line">需要用FieldOffset()设置每个成员的位置</span><br><span class="line">这样就可以实现类似c的公用体的功能</span><br><span class="line">[StructLayout(LayoutKind.Explicit)] </span><br><span class="line">struct S1</span><br><span class="line">&#123;</span><br><span class="line">  [FieldOffset(0)]</span><br><span class="line">  int a;</span><br><span class="line">  [FieldOffset(0)]</span><br><span class="line">  int b;</span><br><span class="line">&#125;</span><br><span class="line">这样a和b在内存中地址相同</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">StructLayout特性支持三种附加字段：CharSet、Pack、Size。     </span><br></pre></td></tr></table></figure><p>·  CharSet定义在结构中的字符串成员在结构被传给DLL时的排列方式。可以是Unicode、Ansi或Auto。<br> 默认为Auto，在WIN  NT&#x2F;2000&#x2F;XP中表示字符串按照Unicode字符串进行排列，在WIN  95&#x2F;98&#x2F;Me中则表示按照ANSI字符串进行排列。<br>·  Pack定义了结构的封装大小。可以是1、2、4、8、16、32、64、128或特殊值0。特殊值0表示当前操作平台默认的压缩大小。   </p><h1 id="c-GetComponentsInChildren-lt-组件-gt"><a href="#c-GetComponentsInChildren-lt-组件-gt" class="headerlink" title="c# GetComponentsInChildren&lt;组件&gt;();"></a>c# <code>GetComponentsInChildren</code>&lt;组件&gt;();</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c# GetComponentsInChildren&lt;组件&gt;();</span><br><span class="line">这种方式是 大家经常用到的，这种是获取自己和它的孩子有同样的组件（比如 Rigidbody），返回一个数组，数组包括自己和它的孩子。如果他的孩子里面有的是不活跃SetActive(false);则获取不到。</span><br><span class="line">所以就会有第二个参数GetComponentsInChildren&lt;组件&gt;(true);</span><br><span class="line"></span><br><span class="line">includeInactive =true;</span><br><span class="line">原文链接：https://blog.csdn.net/microsoftMSDNNET/article/details/48522817</span><br></pre></td></tr></table></figure><h1 id="通过二进制存储数据"><a href="#通过二进制存储数据" class="headerlink" title="通过二进制存储数据"></a>通过二进制存储数据</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 分析获取背包</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;data&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">unsafe</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Analyze</span>(<span class="params"><span class="built_in">byte</span>[] data</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">fixed</span> (<span class="built_in">byte</span>* pt = data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.Unlocked;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            BagItem* item = (BagItem*)(pt + (i * <span class="keyword">sizeof</span>(BagItem)));</span><br><span class="line">            <span class="keyword">this</span>.items[i] = *item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsafe</span> <span class="keyword">public</span> NBagInfo <span class="title">GetBagInfo</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Debug.LogError(<span class="string">&quot;BagManager-&gt;NBagInfo&quot;</span>);</span><br><span class="line">    <span class="keyword">fixed</span> (<span class="built_in">byte</span>* pt = info.Items)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.Unlocked; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            BagItem* item = (BagItem*)(pt + (i * <span class="keyword">sizeof</span>(BagItem)));</span><br><span class="line">            *item = items[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;数据库用二进制存储&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更新协议 更新Define 制作背包UI 背包小格子脚本 背包数据库建立&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bagitem使用结构体，为了方便进行交换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;背包作用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;背包系统组成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[StructLayout(LayoutKind.Sequential, Pack =1)]解释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetComponentsInChildren(); 使用方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通过二进制存储数据&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>极世界-道具系统</title>
    <link href="http://example.com/2022/12/21/%E6%9E%81%E4%B8%96%E7%95%8C-%E9%81%93%E5%85%B7%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/12/21/%E6%9E%81%E4%B8%96%E7%95%8C-%E9%81%93%E5%85%B7%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-12-21T14:25:18.000Z</published>
    <updated>2022-12-22T15:37:52.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">道具分类</span><br><span class="line">道具系统对外接口</span><br><span class="line">道具系统组成</span><br><span class="line"></span><br><span class="line">更新协议：道具类型，角色道具信息，登录时返回角色信息（包含道具）</span><br><span class="line">建立道具表数据库 角色与道具一对多 道具包含ID 数量</span><br><span class="line"></span><br><span class="line">服务端：道具管理器，道具实体类</span><br><span class="line">item:物品的增加删除和使用</span><br><span class="line">itemManager：物品所有者，物品列表，物品使用，是否持有物品，物品获取，物品添加，物品移除，获取物品列表</span><br><span class="line"></span><br><span class="line">DBservice:数据库保存</span><br><span class="line">Character：创建ItemManager，将道具读入Manager</span><br><span class="line"></span><br><span class="line">UserSerevice-角色进入：将角色信息填入</span><br><span class="line"></span><br><span class="line">客户端：item实体，itemManager</span><br><span class="line">item实体：存放 ID，数量</span><br><span class="line">ItemManager：Item字典，初始化Item，获取配置表中信息，使用逻辑</span><br><span class="line"></span><br><span class="line">UserSerevice：角色进入初始化道具表管理器</span><br><span class="line"></span><br><span class="line">道具实体类存在的意义：为了避免频繁操作数据库，登录时将道具信息拉出，之后操作本地数据，需要更新时更新数据库</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;道具分类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;道具系统对外接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;道具系统组成&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;更新协议：道具类型，角色道具信息，登录时返回角色信息（包含道具）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;建立道具表数据库 角色与道具一对多 道具包含ID 数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;服务端：道具管理器，道具实体类&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item:物品的增加删除和使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;itemManager：物品所有者，物品列表，物品使用，是否持有物品，物品获取，物品添加，物品移除，获取物品列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DBservice:数据库保存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Character：创建ItemManager，将道具读入Manager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserSerevice-角色进入：将角色信息填入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;客户端：item实体，itemManager&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item实体：存放 ID，数量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ItemManager：Item字典，初始化Item，获取配置表中信息，使用逻辑&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UserSerevice：角色进入初始化道具表管理器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;道具实体类存在的意义：为了避免频繁操作数据库，登录时将道具信息拉出，之后操作本地数据，需要更新时更新数据库&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="unity" scheme="http://example.com/categories/unity/"/>
    
    
    <category term="极世界" scheme="http://example.com/tags/%E6%9E%81%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
</feed>
